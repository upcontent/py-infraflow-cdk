import infraflow.cdk.iam._actions as actions
from infraflow.cdk.iam.base import IamAction


class A4B:
    def __init__(self):
        self.all = IamAction("a4b", all=True)
        self.AssociateDeviceWithRoom = actions.A4BAssociateDeviceWithRoom()
        self.AssociateSkillGroupWithRoom = actions.A4BAssociateSkillGroupWithRoom()
        self.CreateProfile = actions.A4BCreateProfile()
        self.CreateRoom = actions.A4BCreateRoom()
        self.CreateSkillGroup = actions.A4BCreateSkillGroup()
        self.CreateUser = actions.A4BCreateUser()
        self.DeleteProfile = actions.A4BDeleteProfile()
        self.DeleteRoom = actions.A4BDeleteRoom()
        self.DeleteRoomSkillParameter = actions.A4BDeleteRoomSkillParameter()
        self.DeleteSkillGroup = actions.A4BDeleteSkillGroup()
        self.DeleteUser = actions.A4BDeleteUser()
        self.DisassociateDeviceFromRoom = actions.A4BDisassociateDeviceFromRoom()
        self.DisassociateSkillGroupFromRoom = actions.A4BDisassociateSkillGroupFromRoom()
        self.GetDevice = actions.A4BGetDevice()
        self.GetProfile = actions.A4BGetProfile()
        self.GetRoom = actions.A4BGetRoom()
        self.GetRoomSkillParameter = actions.A4BGetRoomSkillParameter()
        self.GetSkillGroup = actions.A4BGetSkillGroup()
        self.ListSkills = actions.A4BListSkills()
        self.ListTags = actions.A4BListTags()
        self.PutRoomSkillParameter = actions.A4BPutRoomSkillParameter()
        self.ResolveRoom = actions.A4BResolveRoom()
        self.RevokeInvitation = actions.A4BRevokeInvitation()
        self.SearchDevices = actions.A4BSearchDevices()
        self.SearchProfiles = actions.A4BSearchProfiles()
        self.SearchRooms = actions.A4BSearchRooms()
        self.SearchSkillGroups = actions.A4BSearchSkillGroups()
        self.SearchUsers = actions.A4BSearchUsers()
        self.SendInvitation = actions.A4BSendInvitation()
        self.StartDeviceSync = actions.A4BStartDeviceSync()
        self.TagResource = actions.A4BTagResource()
        self.UntagResource = actions.A4BUntagResource()
        self.UpdateDevice = actions.A4BUpdateDevice()
        self.UpdateProfile = actions.A4BUpdateProfile()
        self.UpdateRoom = actions.A4BUpdateRoom()
        self.UpdateSkillGroup = actions.A4BUpdateSkillGroup()


class Acm:
    def __init__(self):
        self.all = IamAction("acm", all=True)
        self.AddTagsToCertificate = actions.AcmAddTagsToCertificate()
        self.DeleteCertificate = actions.AcmDeleteCertificate()
        self.DescribeCertificate = actions.AcmDescribeCertificate()
        self.GetCertificate = actions.AcmGetCertificate()
        self.ImportCertificate = actions.AcmImportCertificate()
        self.ListCertificates = actions.AcmListCertificates()
        self.ListTagsForCertificate = actions.AcmListTagsForCertificate()
        self.RemoveTagsFromCertificate = actions.AcmRemoveTagsFromCertificate()
        self.RequestCertificate = actions.AcmRequestCertificate()
        self.ResendValidationEmail = actions.AcmResendValidationEmail()


class ApiGateway:
    def __init__(self):
        self.all = IamAction("apigateway", all=True)
        self.DELETE = actions.ApiGatewayDELETE()
        self.GET = actions.ApiGatewayGET()
        self.HEAD = actions.ApiGatewayHEAD()
        self.OPTIONS = actions.ApiGatewayOPTIONS()
        self.PATCH = actions.ApiGatewayPATCH()
        self.POST = actions.ApiGatewayPOST()
        self.PUT = actions.ApiGatewayPUT()


class ApplicationAutoscaling:
    def __init__(self):
        self.all = IamAction("application-autoscaling", all=True)
        self.DeleteScalingPolicy = actions.ApplicationAutoscalingDeleteScalingPolicy()
        self.DeleteScheduledAction = actions.ApplicationAutoscalingDeleteScheduledAction()
        self.DeregisterScalableTarget = actions.ApplicationAutoscalingDeregisterScalableTarget()
        self.DescribeScalableTargets = actions.ApplicationAutoscalingDescribeScalableTargets()
        self.DescribeScalingActivities = actions.ApplicationAutoscalingDescribeScalingActivities()
        self.DescribeScalingPolicies = actions.ApplicationAutoscalingDescribeScalingPolicies()
        self.DescribeScheduledActions = actions.ApplicationAutoscalingDescribeScheduledActions()
        self.PutScalingPolicy = actions.ApplicationAutoscalingPutScalingPolicy()
        self.PutScheduledAction = actions.ApplicationAutoscalingPutScheduledAction()
        self.RegisterScalableTarget = actions.ApplicationAutoscalingRegisterScalableTarget()


class AppStream:
    def __init__(self):
        self.all = IamAction("appstream", all=True)
        self.AssociateFleet = actions.AppstreamAssociateFleet()
        self.CreateDirectoryConfig = actions.AppstreamCreateDirectoryConfig()
        self.CreateFleet = actions.AppstreamCreateFleet()
        self.CreateImageBuilder = actions.AppstreamCreateImageBuilder()
        self.CreateImageBuilderStreamingURL = actions.AppstreamCreateImageBuilderStreamingURL()
        self.CreateStack = actions.AppstreamCreateStack()
        self.CreateStreamingURL = actions.AppstreamCreateStreamingURL()
        self.DeleteDirectoryConfig = actions.AppstreamDeleteDirectoryConfig()
        self.DeleteFleet = actions.AppstreamDeleteFleet()
        self.DeleteImage = actions.AppstreamDeleteImage()
        self.DeleteImageBuilder = actions.AppstreamDeleteImageBuilder()
        self.DeleteStack = actions.AppstreamDeleteStack()
        self.DescribeDirectoryConfigs = actions.AppstreamDescribeDirectoryConfigs()
        self.DescribeFleets = actions.AppstreamDescribeFleets()
        self.DescribeImageBuilders = actions.AppstreamDescribeImageBuilders()
        self.DescribeImages = actions.AppstreamDescribeImages()
        self.DescribeSessions = actions.AppstreamDescribeSessions()
        self.DescribeStacks = actions.AppstreamDescribeStacks()
        self.DisassociateFleet = actions.AppstreamDisassociateFleet()
        self.ExpireSession = actions.AppstreamExpireSession()
        self.ListAssociatedFleets = actions.AppstreamListAssociatedFleets()
        self.ListAssociatedStacks = actions.AppstreamListAssociatedStacks()
        self.ListTagsForResource = actions.AppstreamListTagsForResource()
        self.StartFleet = actions.AppstreamStartFleet()
        self.StartImageBuilder = actions.AppstreamStartImageBuilder()
        self.StopFleet = actions.AppstreamStopFleet()
        self.StopImageBuilder = actions.AppstreamStopImageBuilder()
        self.Stream = actions.AppstreamStream()
        self.TagResource = actions.AppstreamTagResource()
        self.UntagResource = actions.AppstreamUntagResource()
        self.UpdateDirectoryConfig = actions.AppstreamUpdateDirectoryConfig()
        self.UpdateFleet = actions.AppstreamUpdateFleet()
        self.UpdateStack = actions.AppstreamUpdateStack()


class AppSync:
    def __init__(self):
        self.all = IamAction("appsync", all=True)
        self.CreateApiKey = actions.AppsyncCreateApiKey()
        self.CreateDataSource = actions.AppsyncCreateDataSource()
        self.CreateGraphqlApi = actions.AppsyncCreateGraphqlApi()
        self.CreateResolver = actions.AppsyncCreateResolver()
        self.CreateType = actions.AppsyncCreateType()
        self.DeleteApiKey = actions.AppsyncDeleteApiKey()
        self.DeleteDataSource = actions.AppsyncDeleteDataSource()
        self.DeleteGraphqlApi = actions.AppsyncDeleteGraphqlApi()
        self.DeleteResolver = actions.AppsyncDeleteResolver()
        self.DeleteType = actions.AppsyncDeleteType()
        self.GetDataSource = actions.AppsyncGetDataSource()
        self.GetGraphqlApi = actions.AppsyncGetGraphqlApi()
        self.GetIntrospectionSchema = actions.AppsyncGetIntrospectionSchema()
        self.GetResolver = actions.AppsyncGetResolver()
        self.GetSchemaCreationStatus = actions.AppsyncGetSchemaCreationStatus()
        self.GetType = actions.AppsyncGetType()
        self.GraphQL = actions.AppsyncGraphQL()
        self.ListApiKeys = actions.AppsyncListApiKeys()
        self.ListDataSources = actions.AppsyncListDataSources()
        self.ListGraphqlApis = actions.AppsyncListGraphqlApis()
        self.ListResolvers = actions.AppsyncListResolvers()
        self.ListTypes = actions.AppsyncListTypes()
        self.StartSchemaCreation = actions.AppsyncStartSchemaCreation()
        self.UpdateApiKey = actions.AppsyncUpdateApiKey()
        self.UpdateDataSource = actions.AppsyncUpdateDataSource()
        self.UpdateGraphqlApi = actions.AppsyncUpdateGraphqlApi()
        self.UpdateResolver = actions.AppsyncUpdateResolver()
        self.UpdateType = actions.AppsyncUpdateType()


class Artifact:
    def __init__(self):
        self.all = IamAction("artifact", all=True)
        self.AcceptAgreement = actions.ArtifactAcceptAgreement()
        self.DownloadAgreement = actions.ArtifactDownloadAgreement()
        self.Get = actions.ArtifactGet()
        self.TerminateAgreement = actions.ArtifactTerminateAgreement()


class Athena:
    def __init__(self):
        self.all = IamAction("athena", all=True)
        self.BatchGetNamedQuery = actions.AthenaBatchGetNamedQuery()
        self.BatchGetQueryExecution = actions.AthenaBatchGetQueryExecution()
        self.CancelQueryExecution = actions.AthenaCancelQueryExecution()
        self.CreateNamedQuery = actions.AthenaCreateNamedQuery()
        self.DeleteNamedQuery = actions.AthenaDeleteNamedQuery()
        self.GetCatalogs = actions.AthenaGetCatalogs()
        self.GetExecutionEngine = actions.AthenaGetExecutionEngine()
        self.GetExecutionEngines = actions.AthenaGetExecutionEngines()
        self.GetNamedQuery = actions.AthenaGetNamedQuery()
        self.GetNamespace = actions.AthenaGetNamespace()
        self.GetNamespaces = actions.AthenaGetNamespaces()
        self.GetQueryExecution = actions.AthenaGetQueryExecution()
        self.GetQueryExecutions = actions.AthenaGetQueryExecutions()
        self.GetQueryResults = actions.AthenaGetQueryResults()
        self.GetTable = actions.AthenaGetTable()
        self.GetTables = actions.AthenaGetTables()
        self.ListNamedQueries = actions.AthenaListNamedQueries()
        self.ListQueryExecutions = actions.AthenaListQueryExecutions()
        self.RunQuery = actions.AthenaRunQuery()
        self.StartQueryExecution = actions.AthenaStartQueryExecution()
        self.StopQueryExecution = actions.AthenaStopQueryExecution()


class AutoScalingPlans:
    def __init__(self):
        self.all = IamAction("autoscaling-plans", all=True)
        self.CreateScalingPlan = actions.AutoscalingPlansCreateScalingPlan()
        self.DeleteScalingPlan = actions.AutoscalingPlansDeleteScalingPlan()
        self.DescribeScalingPlanResources = actions.AutoscalingPlansDescribeScalingPlanResources()
        self.DescribeScalingPlans = actions.AutoscalingPlansDescribeScalingPlans()


class AutoScaling:
    def __init__(self):
        self.all = IamAction("autoscaling", all=True)
        self.AttachInstances = actions.AutoscalingAttachInstances()
        self.AttachLoadBalancerTargetGroups = actions.AutoscalingAttachLoadBalancerTargetGroups()
        self.AttachLoadBalancers = actions.AutoscalingAttachLoadBalancers()
        self.CompleteLifecycleAction = actions.AutoscalingCompleteLifecycleAction()
        self.CreateAutoScalingGroup = actions.AutoscalingCreateAutoScalingGroup()
        self.CreateLaunchConfiguration = actions.AutoscalingCreateLaunchConfiguration()
        self.CreateOrUpdateTags = actions.AutoscalingCreateOrUpdateTags()
        self.DeleteAutoScalingGroup = actions.AutoscalingDeleteAutoScalingGroup()
        self.DeleteLaunchConfiguration = actions.AutoscalingDeleteLaunchConfiguration()
        self.DeleteLifecycleHook = actions.AutoscalingDeleteLifecycleHook()
        self.DeleteNotificationConfiguration = actions.AutoscalingDeleteNotificationConfiguration()
        self.DeletePolicy = actions.AutoscalingDeletePolicy()
        self.DeleteScheduledAction = actions.AutoscalingDeleteScheduledAction()
        self.DeleteTags = actions.AutoscalingDeleteTags()
        self.DescribeAccountLimits = actions.AutoscalingDescribeAccountLimits()
        self.DescribeAdjustmentTypes = actions.AutoscalingDescribeAdjustmentTypes()
        self.DescribeAutoScalingGroups = actions.AutoscalingDescribeAutoScalingGroups()
        self.DescribeAutoScalingInstances = actions.AutoscalingDescribeAutoScalingInstances()
        self.DescribeAutoScalingNotificationTypes = actions.AutoscalingDescribeAutoScalingNotificationTypes()
        self.DescribeLaunchConfigurations = actions.AutoscalingDescribeLaunchConfigurations()
        self.DescribeLifecycleHookTypes = actions.AutoscalingDescribeLifecycleHookTypes()
        self.DescribeLifecycleHooks = actions.AutoscalingDescribeLifecycleHooks()
        self.DescribeLoadBalancerTargetGroups = actions.AutoscalingDescribeLoadBalancerTargetGroups()
        self.DescribeLoadBalancers = actions.AutoscalingDescribeLoadBalancers()
        self.DescribeMetricCollectionTypes = actions.AutoscalingDescribeMetricCollectionTypes()
        self.DescribeNotificationConfigurations = actions.AutoscalingDescribeNotificationConfigurations()
        self.DescribePolicies = actions.AutoscalingDescribePolicies()
        self.DescribeScalingActivities = actions.AutoscalingDescribeScalingActivities()
        self.DescribeScalingProcessTypes = actions.AutoscalingDescribeScalingProcessTypes()
        self.DescribeScheduledActions = actions.AutoscalingDescribeScheduledActions()
        self.DescribeTags = actions.AutoscalingDescribeTags()
        self.DescribeTerminationPolicyTypes = actions.AutoscalingDescribeTerminationPolicyTypes()
        self.DetachInstances = actions.AutoscalingDetachInstances()
        self.DetachLoadBalancerTargetGroups = actions.AutoscalingDetachLoadBalancerTargetGroups()
        self.DetachLoadBalancers = actions.AutoscalingDetachLoadBalancers()
        self.DisableMetricsCollection = actions.AutoscalingDisableMetricsCollection()
        self.EnableMetricsCollection = actions.AutoscalingEnableMetricsCollection()
        self.EnterStandby = actions.AutoscalingEnterStandby()
        self.ExecutePolicy = actions.AutoscalingExecutePolicy()
        self.ExitStandby = actions.AutoscalingExitStandby()
        self.PutLifecycleHook = actions.AutoscalingPutLifecycleHook()
        self.PutNotificationConfiguration = actions.AutoscalingPutNotificationConfiguration()
        self.PutScalingPolicy = actions.AutoscalingPutScalingPolicy()
        self.PutScheduledUpdateGroupAction = actions.AutoscalingPutScheduledUpdateGroupAction()
        self.RecordLifecycleActionHeartbeat = actions.AutoscalingRecordLifecycleActionHeartbeat()
        self.ResumeProcesses = actions.AutoscalingResumeProcesses()
        self.SetDesiredCapacity = actions.AutoscalingSetDesiredCapacity()
        self.SetInstanceHealth = actions.AutoscalingSetInstanceHealth()
        self.SetInstanceProtection = actions.AutoscalingSetInstanceProtection()
        self.SuspendProcesses = actions.AutoscalingSuspendProcesses()
        self.TerminateInstanceInAutoScalingGroup = actions.AutoscalingTerminateInstanceInAutoScalingGroup()
        self.UpdateAutoScalingGroup = actions.AutoscalingUpdateAutoScalingGroup()


class AwsMarketplaceManagement:
    def __init__(self):
        self.all = IamAction("aws-marketplace-management", all=True)
        self.uploadFiles = actions.AwsMarketplaceManagementuploadFiles()
        self.viewMarketing = actions.AwsMarketplaceManagementviewMarketing()
        self.viewReports = actions.AwsMarketplaceManagementviewReports()
        self.viewSupport = actions.AwsMarketplaceManagementviewSupport()


class AwsMarketplace:
    def __init__(self):
        self.all = IamAction("aws-marketplace", all=True)
        self.BatchMeterUsage = actions.AwsMarketplaceBatchMeterUsage()
        self.MeterUsage = actions.AwsMarketplaceMeterUsage()
        self.ResolveCustomer = actions.AwsMarketplaceResolveCustomer()
        self.Subscribe = actions.AwsMarketplaceSubscribe()
        self.Unsubscribe = actions.AwsMarketplaceUnsubscribe()
        self.ViewSubscriptions = actions.AwsMarketplaceViewSubscriptions()


class AwsPortal:
    def __init__(self):
        self.all = IamAction("aws-portal", all=True)
        self.ModifyAccount = actions.AwsPortalModifyAccount()
        self.ModifyBilling = actions.AwsPortalModifyBilling()
        self.ModifyPaymentMethods = actions.AwsPortalModifyPaymentMethods()
        self.ViewAccount = actions.AwsPortalViewAccount()
        self.ViewBilling = actions.AwsPortalViewBilling()
        self.ViewPaymentMethods = actions.AwsPortalViewPaymentMethods()
        self.ViewUsage = actions.AwsPortalViewUsage()


class Batch:
    def __init__(self):
        self.all = IamAction("batch", all=True)
        self.CancelJob = actions.BatchCancelJob()
        self.CreateComputeEnvironment = actions.BatchCreateComputeEnvironment()
        self.CreateJobQueue = actions.BatchCreateJobQueue()
        self.DeleteComputeEnvironment = actions.BatchDeleteComputeEnvironment()
        self.DeleteJobQueue = actions.BatchDeleteJobQueue()
        self.DeregisterJobDefinition = actions.BatchDeregisterJobDefinition()
        self.DescribeComputeEnvironments = actions.BatchDescribeComputeEnvironments()
        self.DescribeJobDefinitions = actions.BatchDescribeJobDefinitions()
        self.DescribeJobQueues = actions.BatchDescribeJobQueues()
        self.DescribeJobs = actions.BatchDescribeJobs()
        self.ListJobs = actions.BatchListJobs()
        self.RegisterJobDefinition = actions.BatchRegisterJobDefinition()
        self.SubmitJob = actions.BatchSubmitJob()
        self.TerminateJob = actions.BatchTerminateJob()
        self.UpdateComputeEnvironment = actions.BatchUpdateComputeEnvironment()
        self.UpdateJobQueue = actions.BatchUpdateJobQueue()


class Budgets:
    def __init__(self):
        self.all = IamAction("budgets", all=True)
        self.ModifyBudget = actions.BudgetsModifyBudget()
        self.ViewBudget = actions.BudgetsViewBudget()


class Ce:
    def __init__(self):
        self.all = IamAction("ce", all=True)
        self.GetCostAndUsage = actions.CeGetCostAndUsage()
        self.GetDimensionValues = actions.CeGetDimensionValues()
        self.GetReservationUtilization = actions.CeGetReservationUtilization()
        self.GetTags = actions.CeGetTags()


class Chime:
    def __init__(self):
        self.all = IamAction("chime", all=True)
        self.AcceptDelegate = actions.ChimeAcceptDelegate()
        self.ActivateUsers = actions.ChimeActivateUsers()
        self.AddDomain = actions.ChimeAddDomain()
        self.AddOrUpdateGroups = actions.ChimeAddOrUpdateGroups()
        self.AuthorizeDirectory = actions.ChimeAuthorizeDirectory()
        self.ConnectDirectory = actions.ChimeConnectDirectory()
        self.CreateAccount = actions.ChimeCreateAccount()
        self.CreateCDRBucket = actions.ChimeCreateCDRBucket()
        self.DeleteAccount = actions.ChimeDeleteAccount()
        self.DeleteCDRBucket = actions.ChimeDeleteCDRBucket()
        self.DeleteDelegate = actions.ChimeDeleteDelegate()
        self.DeleteDomain = actions.ChimeDeleteDomain()
        self.DeleteGroups = actions.ChimeDeleteGroups()
        self.DisconnectDirectory = actions.ChimeDisconnectDirectory()
        self.GetAccount = actions.ChimeGetAccount()
        self.GetAccountResource = actions.ChimeGetAccountResource()
        self.GetAccountSettings = actions.ChimeGetAccountSettings()
        self.GetCDRBucket = actions.ChimeGetCDRBucket()
        self.GetDomain = actions.ChimeGetDomain()
        self.GetUser = actions.ChimeGetUser()
        self.GetUserByEmail = actions.ChimeGetUserByEmail()
        self.InviteDelegate = actions.ChimeInviteDelegate()
        self.InviteUsers = actions.ChimeInviteUsers()
        self.ListAccounts = actions.ChimeListAccounts()
        self.ListCDRBucket = actions.ChimeListCDRBucket()
        self.ListDelegates = actions.ChimeListDelegates()
        self.ListDirectories = actions.ChimeListDirectories()
        self.ListDomains = actions.ChimeListDomains()
        self.ListGroups = actions.ChimeListGroups()
        self.ListUsers = actions.ChimeListUsers()
        self.LogoutUser = actions.ChimeLogoutUser()
        self.RenameAccount = actions.ChimeRenameAccount()
        self.RenewDelegate = actions.ChimeRenewDelegate()
        self.ResetAccountResource = actions.ChimeResetAccountResource()
        self.ResetPersonalPin = actions.ChimeResetPersonalPin()
        self.SubmitSupportRequest = actions.ChimeSubmitSupportRequest()
        self.SuspendUsers = actions.ChimeSuspendUsers()
        self.UnauthorizeDirectory = actions.ChimeUnauthorizeDirectory()
        self.UpdateAccountResource = actions.ChimeUpdateAccountResource()
        self.UpdateAccountSettings = actions.ChimeUpdateAccountSettings()
        self.UpdateCDRBucket = actions.ChimeUpdateCDRBucket()
        self.UpdateSupportedLicenses = actions.ChimeUpdateSupportedLicenses()
        self.UpdateUserLicenses = actions.ChimeUpdateUserLicenses()
        self.ValidateAccountResource = actions.ChimeValidateAccountResource()
        self.ValidateDelegate = actions.ChimeValidateDelegate()


class Cloud9:
    def __init__(self):
        self.all = IamAction("cloud9", all=True)
        self.CreateEnvironmentEC2 = actions.Cloud9CreateEnvironmentEC2()
        self.CreateEnvironmentMembership = actions.Cloud9CreateEnvironmentMembership()
        self.CreateEnvironmentSSH = actions.Cloud9CreateEnvironmentSSH()
        self.DeleteEnvironment = actions.Cloud9DeleteEnvironment()
        self.DeleteEnvironmentMembership = actions.Cloud9DeleteEnvironmentMembership()
        self.DescribeEnvironmentMemberships = actions.Cloud9DescribeEnvironmentMemberships()
        self.DescribeEnvironmentStatus = actions.Cloud9DescribeEnvironmentStatus()
        self.DescribeEnvironments = actions.Cloud9DescribeEnvironments()
        self.GetUserPublicKey = actions.Cloud9GetUserPublicKey()
        self.ListEnvironments = actions.Cloud9ListEnvironments()
        self.UpdateEnvironment = actions.Cloud9UpdateEnvironment()
        self.UpdateEnvironmentMembership = actions.Cloud9UpdateEnvironmentMembership()
        self.ValidateEnvironmentName = actions.Cloud9ValidateEnvironmentName()


class CloudDirectory:
    def __init__(self):
        self.all = IamAction("clouddirectory", all=True)
        self.AddFacetToObject = actions.ClouddirectoryAddFacetToObject()
        self.ApplySchema = actions.ClouddirectoryApplySchema()
        self.AttachObject = actions.ClouddirectoryAttachObject()
        self.AttachPolicy = actions.ClouddirectoryAttachPolicy()
        self.AttachToIndex = actions.ClouddirectoryAttachToIndex()
        self.AttachTypedLink = actions.ClouddirectoryAttachTypedLink()
        self.BatchRead = actions.ClouddirectoryBatchRead()
        self.BatchWrite = actions.ClouddirectoryBatchWrite()
        self.CreateDirectory = actions.ClouddirectoryCreateDirectory()
        self.CreateFacet = actions.ClouddirectoryCreateFacet()
        self.CreateIndex = actions.ClouddirectoryCreateIndex()
        self.CreateObject = actions.ClouddirectoryCreateObject()
        self.CreateSchema = actions.ClouddirectoryCreateSchema()
        self.CreateTypedLinkFacet = actions.ClouddirectoryCreateTypedLinkFacet()
        self.DeleteDirectory = actions.ClouddirectoryDeleteDirectory()
        self.DeleteFacet = actions.ClouddirectoryDeleteFacet()
        self.DeleteObject = actions.ClouddirectoryDeleteObject()
        self.DeleteSchema = actions.ClouddirectoryDeleteSchema()
        self.DeleteTypedLinkFacet = actions.ClouddirectoryDeleteTypedLinkFacet()
        self.DetachFromIndex = actions.ClouddirectoryDetachFromIndex()
        self.DetachObject = actions.ClouddirectoryDetachObject()
        self.DetachPolicy = actions.ClouddirectoryDetachPolicy()
        self.DetachTypedLink = actions.ClouddirectoryDetachTypedLink()
        self.DisableDirectory = actions.ClouddirectoryDisableDirectory()
        self.EnableDirectory = actions.ClouddirectoryEnableDirectory()
        self.GetDirectory = actions.ClouddirectoryGetDirectory()
        self.GetFacet = actions.ClouddirectoryGetFacet()
        self.GetObjectInformation = actions.ClouddirectoryGetObjectInformation()
        self.GetSchemaAsJson = actions.ClouddirectoryGetSchemaAsJson()
        self.GetTypedLinkFacetInformation = actions.ClouddirectoryGetTypedLinkFacetInformation()
        self.ListAppliedSchemaArns = actions.ClouddirectoryListAppliedSchemaArns()
        self.ListAttachedIndices = actions.ClouddirectoryListAttachedIndices()
        self.ListDevelopmentSchemaArns = actions.ClouddirectoryListDevelopmentSchemaArns()
        self.ListDirectories = actions.ClouddirectoryListDirectories()
        self.ListFacetAttributes = actions.ClouddirectoryListFacetAttributes()
        self.ListFacetNames = actions.ClouddirectoryListFacetNames()
        self.ListIncomingTypedLinks = actions.ClouddirectoryListIncomingTypedLinks()
        self.ListIndex = actions.ClouddirectoryListIndex()
        self.ListObjectAttributes = actions.ClouddirectoryListObjectAttributes()
        self.ListObjectChildren = actions.ClouddirectoryListObjectChildren()
        self.ListObjectParentPaths = actions.ClouddirectoryListObjectParentPaths()
        self.ListObjectParents = actions.ClouddirectoryListObjectParents()
        self.ListObjectPolicies = actions.ClouddirectoryListObjectPolicies()
        self.ListOutgoingTypedLinks = actions.ClouddirectoryListOutgoingTypedLinks()
        self.ListPolicyAttachments = actions.ClouddirectoryListPolicyAttachments()
        self.ListPublishedSchemaArns = actions.ClouddirectoryListPublishedSchemaArns()
        self.ListTagsForResource = actions.ClouddirectoryListTagsForResource()
        self.ListTypedLinkFacetAttributes = actions.ClouddirectoryListTypedLinkFacetAttributes()
        self.ListTypedLinkFacetNames = actions.ClouddirectoryListTypedLinkFacetNames()
        self.LookupPolicy = actions.ClouddirectoryLookupPolicy()
        self.PublishSchema = actions.ClouddirectoryPublishSchema()
        self.PutSchemaFromJson = actions.ClouddirectoryPutSchemaFromJson()
        self.RemoveFacetFromObject = actions.ClouddirectoryRemoveFacetFromObject()
        self.TagResource = actions.ClouddirectoryTagResource()
        self.UntagResource = actions.ClouddirectoryUntagResource()
        self.UpdateFacet = actions.ClouddirectoryUpdateFacet()
        self.UpdateObjectAttributes = actions.ClouddirectoryUpdateObjectAttributes()
        self.UpdateSchema = actions.ClouddirectoryUpdateSchema()
        self.UpdateTypedLinkFacet = actions.ClouddirectoryUpdateTypedLinkFacet()


class CloudFormation:
    def __init__(self):
        self.all = IamAction("cloudformation", all=True)
        self.CancelUpdateStack = actions.CloudformationCancelUpdateStack()
        self.ContinueUpdateRollback = actions.CloudformationContinueUpdateRollback()
        self.CreateChangeSet = actions.CloudformationCreateChangeSet()
        self.CreateStack = actions.CloudformationCreateStack()
        self.CreateUploadBucket = actions.CloudformationCreateUploadBucket()
        self.DeleteChangeSet = actions.CloudformationDeleteChangeSet()
        self.DeleteStack = actions.CloudformationDeleteStack()
        self.DescribeAccountLimits = actions.CloudformationDescribeAccountLimits()
        self.DescribeChangeSet = actions.CloudformationDescribeChangeSet()
        self.DescribeStackEvents = actions.CloudformationDescribeStackEvents()
        self.DescribeStackResource = actions.CloudformationDescribeStackResource()
        self.DescribeStackResources = actions.CloudformationDescribeStackResources()
        self.DescribeStacks = actions.CloudformationDescribeStacks()
        self.EstimateTemplateCost = actions.CloudformationEstimateTemplateCost()
        self.ExecuteChangeSet = actions.CloudformationExecuteChangeSet()
        self.GetStackPolicy = actions.CloudformationGetStackPolicy()
        self.GetTemplate = actions.CloudformationGetTemplate()
        self.GetTemplateSummary = actions.CloudformationGetTemplateSummary()
        self.ListChangeSets = actions.CloudformationListChangeSets()
        self.ListExports = actions.CloudformationListExports()
        self.ListImports = actions.CloudformationListImports()
        self.ListStackResources = actions.CloudformationListStackResources()
        self.ListStacks = actions.CloudformationListStacks()
        self.PreviewStackUpdate = actions.CloudformationPreviewStackUpdate()
        self.SetStackPolicy = actions.CloudformationSetStackPolicy()
        self.SignalResource = actions.CloudformationSignalResource()
        self.UpdateStack = actions.CloudformationUpdateStack()
        self.UpdateTerminationProtection = actions.CloudformationUpdateTerminationProtection()
        self.ValidateTemplate = actions.CloudformationValidateTemplate()


class CloudFront:
    def __init__(self):
        self.all = IamAction("cloudfront", all=True)
        self.CreateCloudFrontOriginAccessIdentity = actions.CloudfrontCreateCloudFrontOriginAccessIdentity()
        self.CreateDistribution = actions.CloudfrontCreateDistribution()
        self.CreateDistributionWithTags = actions.CloudfrontCreateDistributionWithTags()
        self.CreateInvalidation = actions.CloudfrontCreateInvalidation()
        self.CreateStreamingDistribution = actions.CloudfrontCreateStreamingDistribution()
        self.CreateStreamingDistributionWithTags = actions.CloudfrontCreateStreamingDistributionWithTags()
        self.DeleteCloudFrontOriginAccessIdentity = actions.CloudfrontDeleteCloudFrontOriginAccessIdentity()
        self.DeleteDistribution = actions.CloudfrontDeleteDistribution()
        self.DeleteStreamingDistribution = actions.CloudfrontDeleteStreamingDistribution()
        self.GetCloudFrontOriginAccessIdentity = actions.CloudfrontGetCloudFrontOriginAccessIdentity()
        self.GetCloudFrontOriginAccessIdentityConfig = actions.CloudfrontGetCloudFrontOriginAccessIdentityConfig()
        self.GetDistribution = actions.CloudfrontGetDistribution()
        self.GetDistributionConfig = actions.CloudfrontGetDistributionConfig()
        self.GetInvalidation = actions.CloudfrontGetInvalidation()
        self.GetStreamingDistribution = actions.CloudfrontGetStreamingDistribution()
        self.GetStreamingDistributionConfig = actions.CloudfrontGetStreamingDistributionConfig()
        self.ListCloudFrontOriginAccessIdentities = actions.CloudfrontListCloudFrontOriginAccessIdentities()
        self.ListDistributions = actions.CloudfrontListDistributions()
        self.ListDistributionsByWebACLId = actions.CloudfrontListDistributionsByWebACLId()
        self.ListInvalidations = actions.CloudfrontListInvalidations()
        self.ListStreamingDistributions = actions.CloudfrontListStreamingDistributions()
        self.ListTagsForResource = actions.CloudfrontListTagsForResource()
        self.TagResource = actions.CloudfrontTagResource()
        self.UntagResource = actions.CloudfrontUntagResource()
        self.UpdateCloudFrontOriginAccessIdentity = actions.CloudfrontUpdateCloudFrontOriginAccessIdentity()
        self.UpdateDistribution = actions.CloudfrontUpdateDistribution()
        self.UpdateStreamingDistribution = actions.CloudfrontUpdateStreamingDistribution()


class CloudHsm:
    def __init__(self):
        self.all = IamAction("cloudhsm", all=True)
        self.AddTagsToResource = actions.CloudhsmAddTagsToResource()
        self.CreateHapg = actions.CloudhsmCreateHapg()
        self.CreateHsm = actions.CloudhsmCreateHsm()
        self.CreateLunaClient = actions.CloudhsmCreateLunaClient()
        self.DeleteHapg = actions.CloudhsmDeleteHapg()
        self.DeleteHsm = actions.CloudhsmDeleteHsm()
        self.DeleteLunaClient = actions.CloudhsmDeleteLunaClient()
        self.DescribeHapg = actions.CloudhsmDescribeHapg()
        self.DescribeHsm = actions.CloudhsmDescribeHsm()
        self.DescribeLunaClient = actions.CloudhsmDescribeLunaClient()
        self.GetConfig = actions.CloudhsmGetConfig()
        self.ListAvailableZones = actions.CloudhsmListAvailableZones()
        self.ListHapgs = actions.CloudhsmListHapgs()
        self.ListHsms = actions.CloudhsmListHsms()
        self.ListLunaClients = actions.CloudhsmListLunaClients()
        self.ListTagsForResource = actions.CloudhsmListTagsForResource()
        self.ModifyHapg = actions.CloudhsmModifyHapg()
        self.ModifyHsm = actions.CloudhsmModifyHsm()
        self.ModifyLunaClient = actions.CloudhsmModifyLunaClient()
        self.RemoveTagsFromResource = actions.CloudhsmRemoveTagsFromResource()


class CloudSearch:
    def __init__(self):
        self.all = IamAction("cloudsearch", all=True)
        self.AddTags = actions.CloudsearchAddTags()
        self.BuildSuggesters = actions.CloudsearchBuildSuggesters()
        self.CreateDomain = actions.CloudsearchCreateDomain()
        self.DefineAnalysisScheme = actions.CloudsearchDefineAnalysisScheme()
        self.DefineExpression = actions.CloudsearchDefineExpression()
        self.DefineIndexField = actions.CloudsearchDefineIndexField()
        self.DefineSuggester = actions.CloudsearchDefineSuggester()
        self.DeleteAnalysisScheme = actions.CloudsearchDeleteAnalysisScheme()
        self.DeleteDomain = actions.CloudsearchDeleteDomain()
        self.DeleteExpression = actions.CloudsearchDeleteExpression()
        self.DeleteIndexField = actions.CloudsearchDeleteIndexField()
        self.DeleteSuggester = actions.CloudsearchDeleteSuggester()
        self.DescribeAnalysisSchemes = actions.CloudsearchDescribeAnalysisSchemes()
        self.DescribeAvailabilityOptions = actions.CloudsearchDescribeAvailabilityOptions()
        self.DescribeDomains = actions.CloudsearchDescribeDomains()
        self.DescribeExpressions = actions.CloudsearchDescribeExpressions()
        self.DescribeIndexFields = actions.CloudsearchDescribeIndexFields()
        self.DescribeScalingParameters = actions.CloudsearchDescribeScalingParameters()
        self.DescribeServiceAccessPolicies = actions.CloudsearchDescribeServiceAccessPolicies()
        self.DescribeSuggesters = actions.CloudsearchDescribeSuggesters()
        self.IndexDocuments = actions.CloudsearchIndexDocuments()
        self.ListDomainNames = actions.CloudsearchListDomainNames()
        self.ListTags = actions.CloudsearchListTags()
        self.RemoveTags = actions.CloudsearchRemoveTags()
        self.UpdateAvailabilityOptions = actions.CloudsearchUpdateAvailabilityOptions()
        self.UpdateScalingParameters = actions.CloudsearchUpdateScalingParameters()
        self.UpdateServiceAccessPolicies = actions.CloudsearchUpdateServiceAccessPolicies()
        self.document = actions.Cloudsearchdocument()
        self.search = actions.Cloudsearchsearch()
        self.suggest = actions.Cloudsearchsuggest()


class CloudTrail:
    def __init__(self):
        self.all = IamAction("cloudtrail", all=True)
        self.AddTags = actions.CloudtrailAddTags()
        self.CreateTrail = actions.CloudtrailCreateTrail()
        self.DeleteTrail = actions.CloudtrailDeleteTrail()
        self.DescribeTrails = actions.CloudtrailDescribeTrails()
        self.GetEventSelectors = actions.CloudtrailGetEventSelectors()
        self.GetTrailStatus = actions.CloudtrailGetTrailStatus()
        self.ListPublicKeys = actions.CloudtrailListPublicKeys()
        self.ListTags = actions.CloudtrailListTags()
        self.LookupEvents = actions.CloudtrailLookupEvents()
        self.PutEventSelectors = actions.CloudtrailPutEventSelectors()
        self.RemoveTags = actions.CloudtrailRemoveTags()
        self.StartLogging = actions.CloudtrailStartLogging()
        self.StopLogging = actions.CloudtrailStopLogging()
        self.UpdateTrail = actions.CloudtrailUpdateTrail()


class CloudWatch:
    def __init__(self):
        self.all = IamAction("cloudwatch", all=True)
        self.DeleteAlarms = actions.CloudwatchDeleteAlarms()
        self.DeleteDashboards = actions.CloudwatchDeleteDashboards()
        self.DescribeAlarmHistory = actions.CloudwatchDescribeAlarmHistory()
        self.DescribeAlarms = actions.CloudwatchDescribeAlarms()
        self.DescribeAlarmsForMetric = actions.CloudwatchDescribeAlarmsForMetric()
        self.DisableAlarmActions = actions.CloudwatchDisableAlarmActions()
        self.EnableAlarmActions = actions.CloudwatchEnableAlarmActions()
        self.GetDashboard = actions.CloudwatchGetDashboard()
        self.GetMetricData = actions.CloudwatchGetMetricData()
        self.GetMetricStatistics = actions.CloudwatchGetMetricStatistics()
        self.ListDashboards = actions.CloudwatchListDashboards()
        self.ListMetrics = actions.CloudwatchListMetrics()
        self.PutDashboard = actions.CloudwatchPutDashboard()
        self.PutMetricAlarm = actions.CloudwatchPutMetricAlarm()
        self.PutMetricData = actions.CloudwatchPutMetricData()
        self.SetAlarmState = actions.CloudwatchSetAlarmState()


class CodeBuild:
    def __init__(self):
        self.all = IamAction("codebuild", all=True)
        self.BatchDeleteBuilds = actions.CodebuildBatchDeleteBuilds()
        self.BatchGetBuilds = actions.CodebuildBatchGetBuilds()
        self.BatchGetProjects = actions.CodebuildBatchGetProjects()
        self.CreateProject = actions.CodebuildCreateProject()
        self.DeleteProject = actions.CodebuildDeleteProject()
        self.ListBuilds = actions.CodebuildListBuilds()
        self.ListBuildsForProject = actions.CodebuildListBuildsForProject()
        self.ListConnectedOAuthAccounts = actions.CodebuildListConnectedOAuthAccounts()
        self.ListCuratedEnvironmentImages = actions.CodebuildListCuratedEnvironmentImages()
        self.ListProjects = actions.CodebuildListProjects()
        self.ListRepositories = actions.CodebuildListRepositories()
        self.PersistOAuthToken = actions.CodebuildPersistOAuthToken()
        self.StartBuild = actions.CodebuildStartBuild()
        self.StopBuild = actions.CodebuildStopBuild()
        self.UpdateProject = actions.CodebuildUpdateProject()


class CodeCommit:
    def __init__(self):
        self.all = IamAction("codecommit", all=True)
        self.BatchGetPullRequests = actions.CodecommitBatchGetPullRequests()
        self.BatchGetRepositories = actions.CodecommitBatchGetRepositories()
        self.CancelUploadArchive = actions.CodecommitCancelUploadArchive()
        self.CreateBranch = actions.CodecommitCreateBranch()
        self.CreatePullRequest = actions.CodecommitCreatePullRequest()
        self.CreateRepository = actions.CodecommitCreateRepository()
        self.DeleteBranch = actions.CodecommitDeleteBranch()
        self.DeleteCommentContent = actions.CodecommitDeleteCommentContent()
        self.DeleteRepository = actions.CodecommitDeleteRepository()
        self.DescribePullRequestEvents = actions.CodecommitDescribePullRequestEvents()
        self.GetBlob = actions.CodecommitGetBlob()
        self.GetBranch = actions.CodecommitGetBranch()
        self.GetComment = actions.CodecommitGetComment()
        self.GetCommentsForComparedCommit = actions.CodecommitGetCommentsForComparedCommit()
        self.GetCommentsForPullRequest = actions.CodecommitGetCommentsForPullRequest()
        self.GetCommit = actions.CodecommitGetCommit()
        self.GetCommitHistory = actions.CodecommitGetCommitHistory()
        self.GetCommitsFromMergeBase = actions.CodecommitGetCommitsFromMergeBase()
        self.GetDifferences = actions.CodecommitGetDifferences()
        self.GetMergeConflicts = actions.CodecommitGetMergeConflicts()
        self.GetObjectIdentifier = actions.CodecommitGetObjectIdentifier()
        self.GetPullRequest = actions.CodecommitGetPullRequest()
        self.GetReferences = actions.CodecommitGetReferences()
        self.GetRepository = actions.CodecommitGetRepository()
        self.GetRepositoryTriggers = actions.CodecommitGetRepositoryTriggers()
        self.GetTree = actions.CodecommitGetTree()
        self.GetUploadArchiveStatus = actions.CodecommitGetUploadArchiveStatus()
        self.GitPull = actions.CodecommitGitPull()
        self.GitPush = actions.CodecommitGitPush()
        self.ListBranches = actions.CodecommitListBranches()
        self.ListPullRequests = actions.CodecommitListPullRequests()
        self.ListRepositories = actions.CodecommitListRepositories()
        self.MergePullRequestByFastForward = actions.CodecommitMergePullRequestByFastForward()
        self.PostCommentForComparedCommit = actions.CodecommitPostCommentForComparedCommit()
        self.PostCommentForPullRequest = actions.CodecommitPostCommentForPullRequest()
        self.PostCommentReply = actions.CodecommitPostCommentReply()
        self.PutFile = actions.CodecommitPutFile()
        self.PutRepositoryTriggers = actions.CodecommitPutRepositoryTriggers()
        self.TestRepositoryTriggers = actions.CodecommitTestRepositoryTriggers()
        self.UpdateComment = actions.CodecommitUpdateComment()
        self.UpdateDefaultBranch = actions.CodecommitUpdateDefaultBranch()
        self.UpdatePullRequestDescription = actions.CodecommitUpdatePullRequestDescription()
        self.UpdatePullRequestStatus = actions.CodecommitUpdatePullRequestStatus()
        self.UpdatePullRequestTitle = actions.CodecommitUpdatePullRequestTitle()
        self.UpdateRepositoryDescription = actions.CodecommitUpdateRepositoryDescription()
        self.UpdateRepositoryName = actions.CodecommitUpdateRepositoryName()
        self.UploadArchive = actions.CodecommitUploadArchive()


class CodeDeploy:
    def __init__(self):
        self.all = IamAction("codedeploy", all=True)
        self.AddTagsToOnPremisesInstances = actions.CodedeployAddTagsToOnPremisesInstances()
        self.BatchGetApplicationRevisions = actions.CodedeployBatchGetApplicationRevisions()
        self.BatchGetApplications = actions.CodedeployBatchGetApplications()
        self.BatchGetDeploymentGroups = actions.CodedeployBatchGetDeploymentGroups()
        self.BatchGetDeploymentInstances = actions.CodedeployBatchGetDeploymentInstances()
        self.BatchGetDeployments = actions.CodedeployBatchGetDeployments()
        self.BatchGetOnPremisesInstances = actions.CodedeployBatchGetOnPremisesInstances()
        self.ContinueDeployment = actions.CodedeployContinueDeployment()
        self.CreateApplication = actions.CodedeployCreateApplication()
        self.CreateDeployment = actions.CodedeployCreateDeployment()
        self.CreateDeploymentConfig = actions.CodedeployCreateDeploymentConfig()
        self.CreateDeploymentGroup = actions.CodedeployCreateDeploymentGroup()
        self.DeleteApplication = actions.CodedeployDeleteApplication()
        self.DeleteDeploymentConfig = actions.CodedeployDeleteDeploymentConfig()
        self.DeleteDeploymentGroup = actions.CodedeployDeleteDeploymentGroup()
        self.DeregisterOnPremisesInstance = actions.CodedeployDeregisterOnPremisesInstance()
        self.GetApplication = actions.CodedeployGetApplication()
        self.GetApplicationRevision = actions.CodedeployGetApplicationRevision()
        self.GetDeployment = actions.CodedeployGetDeployment()
        self.GetDeploymentConfig = actions.CodedeployGetDeploymentConfig()
        self.GetDeploymentGroup = actions.CodedeployGetDeploymentGroup()
        self.GetDeploymentInstance = actions.CodedeployGetDeploymentInstance()
        self.GetOnPremisesInstance = actions.CodedeployGetOnPremisesInstance()
        self.ListApplicationRevisions = actions.CodedeployListApplicationRevisions()
        self.ListApplications = actions.CodedeployListApplications()
        self.ListDeploymentConfigs = actions.CodedeployListDeploymentConfigs()
        self.ListDeploymentGroups = actions.CodedeployListDeploymentGroups()
        self.ListDeploymentInstances = actions.CodedeployListDeploymentInstances()
        self.ListDeployments = actions.CodedeployListDeployments()
        self.ListOnPremisesInstances = actions.CodedeployListOnPremisesInstances()
        self.RegisterApplicationRevision = actions.CodedeployRegisterApplicationRevision()
        self.RegisterOnPremisesInstance = actions.CodedeployRegisterOnPremisesInstance()
        self.RemoveTagsFromOnPremisesInstances = actions.CodedeployRemoveTagsFromOnPremisesInstances()
        self.StopDeployment = actions.CodedeployStopDeployment()
        self.UpdateApplication = actions.CodedeployUpdateApplication()
        self.UpdateDeploymentGroup = actions.CodedeployUpdateDeploymentGroup()


class CodePipeline:
    def __init__(self):
        self.all = IamAction("codepipeline", all=True)
        self.AcknowledgeJob = actions.CodepipelineAcknowledgeJob()
        self.AcknowledgeThirdPartyJob = actions.CodepipelineAcknowledgeThirdPartyJob()
        self.CreateCustomActionType = actions.CodepipelineCreateCustomActionType()
        self.CreatePipeline = actions.CodepipelineCreatePipeline()
        self.DeleteCustomActionType = actions.CodepipelineDeleteCustomActionType()
        self.DeletePipeline = actions.CodepipelineDeletePipeline()
        self.DisableStageTransition = actions.CodepipelineDisableStageTransition()
        self.EnableStageTransition = actions.CodepipelineEnableStageTransition()
        self.GetJobDetails = actions.CodepipelineGetJobDetails()
        self.GetPipeline = actions.CodepipelineGetPipeline()
        self.GetPipelineExecution = actions.CodepipelineGetPipelineExecution()
        self.GetPipelineState = actions.CodepipelineGetPipelineState()
        self.GetThirdPartyJobDetails = actions.CodepipelineGetThirdPartyJobDetails()
        self.ListActionTypes = actions.CodepipelineListActionTypes()
        self.ListPipelineExecutions = actions.CodepipelineListPipelineExecutions()
        self.ListPipelines = actions.CodepipelineListPipelines()
        self.PollForJobs = actions.CodepipelinePollForJobs()
        self.PollForThirdPartyJobs = actions.CodepipelinePollForThirdPartyJobs()
        self.PutActionRevision = actions.CodepipelinePutActionRevision()
        self.PutApprovalResult = actions.CodepipelinePutApprovalResult()
        self.PutJobFailureResult = actions.CodepipelinePutJobFailureResult()
        self.PutJobSuccessResult = actions.CodepipelinePutJobSuccessResult()
        self.PutThirdPartyJobFailureResult = actions.CodepipelinePutThirdPartyJobFailureResult()
        self.PutThirdPartyJobSuccessResult = actions.CodepipelinePutThirdPartyJobSuccessResult()
        self.RetryStageExecution = actions.CodepipelineRetryStageExecution()
        self.StartPipelineExecution = actions.CodepipelineStartPipelineExecution()
        self.UpdatePipeline = actions.CodepipelineUpdatePipeline()


class CodeStar:
    def __init__(self):
        self.all = IamAction("codestar", all=True)
        self.AssociateTeamMember = actions.CodestarAssociateTeamMember()
        self.CreateProject = actions.CodestarCreateProject()
        self.CreateUserProfile = actions.CodestarCreateUserProfile()
        self.DeleteExtendedAccess = actions.CodestarDeleteExtendedAccess()
        self.DeleteProject = actions.CodestarDeleteProject()
        self.DeleteUserProfile = actions.CodestarDeleteUserProfile()
        self.DescribeProject = actions.CodestarDescribeProject()
        self.DescribeUserProfile = actions.CodestarDescribeUserProfile()
        self.DisassociateTeamMember = actions.CodestarDisassociateTeamMember()
        self.GetExtendedAccess = actions.CodestarGetExtendedAccess()
        self.ListProjects = actions.CodestarListProjects()
        self.ListResources = actions.CodestarListResources()
        self.ListTeamMembers = actions.CodestarListTeamMembers()
        self.ListUserProfiles = actions.CodestarListUserProfiles()
        self.PutExtendedAccess = actions.CodestarPutExtendedAccess()
        self.UpdateProject = actions.CodestarUpdateProject()
        self.UpdateTeamMember = actions.CodestarUpdateTeamMember()
        self.UpdateUserProfile = actions.CodestarUpdateUserProfile()
        self.VerifyServiceRole = actions.CodestarVerifyServiceRole()


class CognitoIdentity:
    def __init__(self):
        self.all = IamAction("cognito-identity", all=True)
        self.CreateIdentityPool = actions.CognitoIdentityCreateIdentityPool()
        self.DeleteIdentities = actions.CognitoIdentityDeleteIdentities()
        self.DeleteIdentityPool = actions.CognitoIdentityDeleteIdentityPool()
        self.DescribeIdentity = actions.CognitoIdentityDescribeIdentity()
        self.DescribeIdentityPool = actions.CognitoIdentityDescribeIdentityPool()
        self.GetCredentialsForIdentity = actions.CognitoIdentityGetCredentialsForIdentity()
        self.GetId = actions.CognitoIdentityGetId()
        self.GetIdentityPoolRoles = actions.CognitoIdentityGetIdentityPoolRoles()
        self.GetOpenIdToken = actions.CognitoIdentityGetOpenIdToken()
        self.GetOpenIdTokenForDeveloperIdentity = actions.CognitoIdentityGetOpenIdTokenForDeveloperIdentity()
        self.ListIdentities = actions.CognitoIdentityListIdentities()
        self.ListIdentityPools = actions.CognitoIdentityListIdentityPools()
        self.LookupDeveloperIdentity = actions.CognitoIdentityLookupDeveloperIdentity()
        self.MergeDeveloperIdentities = actions.CognitoIdentityMergeDeveloperIdentities()
        self.SetIdentityPoolRoles = actions.CognitoIdentitySetIdentityPoolRoles()
        self.UnlinkDeveloperIdentity = actions.CognitoIdentityUnlinkDeveloperIdentity()
        self.UnlinkIdentity = actions.CognitoIdentityUnlinkIdentity()
        self.UpdateIdentityPool = actions.CognitoIdentityUpdateIdentityPool()


class CognitoIdp:
    def __init__(self):
        self.all = IamAction("cognito-idp", all=True)
        self.AddCustomAttributes = actions.CognitoIdpAddCustomAttributes()
        self.AdminAddUserToGroup = actions.CognitoIdpAdminAddUserToGroup()
        self.AdminConfirmSignUp = actions.CognitoIdpAdminConfirmSignUp()
        self.AdminCreateUser = actions.CognitoIdpAdminCreateUser()
        self.AdminDeleteUser = actions.CognitoIdpAdminDeleteUser()
        self.AdminDeleteUserAttributes = actions.CognitoIdpAdminDeleteUserAttributes()
        self.AdminDisableUser = actions.CognitoIdpAdminDisableUser()
        self.AdminEnableUser = actions.CognitoIdpAdminEnableUser()
        self.AdminForgetDevice = actions.CognitoIdpAdminForgetDevice()
        self.AdminGetDevice = actions.CognitoIdpAdminGetDevice()
        self.AdminGetUser = actions.CognitoIdpAdminGetUser()
        self.AdminInitiateAuth = actions.CognitoIdpAdminInitiateAuth()
        self.AdminListDevices = actions.CognitoIdpAdminListDevices()
        self.AdminListGroupsForUser = actions.CognitoIdpAdminListGroupsForUser()
        self.AdminListUserAuthEvents = actions.CognitoIdpAdminListUserAuthEvents()
        self.AdminRemoveUserFromGroup = actions.CognitoIdpAdminRemoveUserFromGroup()
        self.AdminResetUserPassword = actions.CognitoIdpAdminResetUserPassword()
        self.AdminRespondToAuthChallenge = actions.CognitoIdpAdminRespondToAuthChallenge()
        self.AdminSetUserMFAPreference = actions.CognitoIdpAdminSetUserMFAPreference()
        self.AdminSetUserSettings = actions.CognitoIdpAdminSetUserSettings()
        self.AdminUpdateAuthEventFeedback = actions.CognitoIdpAdminUpdateAuthEventFeedback()
        self.AdminUpdateDeviceStatus = actions.CognitoIdpAdminUpdateDeviceStatus()
        self.AdminUpdateUserAttributes = actions.CognitoIdpAdminUpdateUserAttributes()
        self.AdminUserGlobalSignOut = actions.CognitoIdpAdminUserGlobalSignOut()
        self.ChangePassword = actions.CognitoIdpChangePassword()
        self.ConfirmDevice = actions.CognitoIdpConfirmDevice()
        self.ConfirmForgotPassword = actions.CognitoIdpConfirmForgotPassword()
        self.ConfirmSignUp = actions.CognitoIdpConfirmSignUp()
        self.CreateGroup = actions.CognitoIdpCreateGroup()
        self.CreateUserImportJob = actions.CognitoIdpCreateUserImportJob()
        self.CreateUserPool = actions.CognitoIdpCreateUserPool()
        self.CreateUserPoolClient = actions.CognitoIdpCreateUserPoolClient()
        self.DeleteGroup = actions.CognitoIdpDeleteGroup()
        self.DeleteUser = actions.CognitoIdpDeleteUser()
        self.DeleteUserAttributes = actions.CognitoIdpDeleteUserAttributes()
        self.DeleteUserPool = actions.CognitoIdpDeleteUserPool()
        self.DeleteUserPoolClient = actions.CognitoIdpDeleteUserPoolClient()
        self.DescribeRiskConfiguration = actions.CognitoIdpDescribeRiskConfiguration()
        self.DescribeUserImportJob = actions.CognitoIdpDescribeUserImportJob()
        self.DescribeUserPool = actions.CognitoIdpDescribeUserPool()
        self.DescribeUserPoolClient = actions.CognitoIdpDescribeUserPoolClient()
        self.ForgetDevice = actions.CognitoIdpForgetDevice()
        self.ForgotPassword = actions.CognitoIdpForgotPassword()
        self.GetCSVHeader = actions.CognitoIdpGetCSVHeader()
        self.GetDevice = actions.CognitoIdpGetDevice()
        self.GetGroup = actions.CognitoIdpGetGroup()
        self.GetUser = actions.CognitoIdpGetUser()
        self.GetUserAttributeVerificationCode = actions.CognitoIdpGetUserAttributeVerificationCode()
        self.GetUserPoolMfaConfig = actions.CognitoIdpGetUserPoolMfaConfig()
        self.GlobalSignOut = actions.CognitoIdpGlobalSignOut()
        self.InitiateAuth = actions.CognitoIdpInitiateAuth()
        self.ListDevices = actions.CognitoIdpListDevices()
        self.ListGroups = actions.CognitoIdpListGroups()
        self.ListUserImportJobs = actions.CognitoIdpListUserImportJobs()
        self.ListUserPoolClients = actions.CognitoIdpListUserPoolClients()
        self.ListUsersInGroup = actions.CognitoIdpListUsersInGroup()
        self.ResendConfirmationCode = actions.CognitoIdpResendConfirmationCode()
        self.RespondToAuthChallenge = actions.CognitoIdpRespondToAuthChallenge()
        self.SetRiskConfiguration = actions.CognitoIdpSetRiskConfiguration()
        self.SetUserMFAPreference = actions.CognitoIdpSetUserMFAPreference()
        self.SetUserPoolMfaConfig = actions.CognitoIdpSetUserPoolMfaConfig()
        self.SetUserSettings = actions.CognitoIdpSetUserSettings()
        self.SignUp = actions.CognitoIdpSignUp()
        self.StartUserImportJob = actions.CognitoIdpStartUserImportJob()
        self.StopUserImportJob = actions.CognitoIdpStopUserImportJob()
        self.UpdateAuthEventFeedback = actions.CognitoIdpUpdateAuthEventFeedback()
        self.UpdateDeviceStatus = actions.CognitoIdpUpdateDeviceStatus()
        self.UpdateGroup = actions.CognitoIdpUpdateGroup()
        self.UpdateUserAttributes = actions.CognitoIdpUpdateUserAttributes()
        self.UpdateUserPool = actions.CognitoIdpUpdateUserPool()
        self.UpdateUserPoolClient = actions.CognitoIdpUpdateUserPoolClient()
        self.VerifyUserAttribute = actions.CognitoIdpVerifyUserAttribute()


class CognitoSync:
    def __init__(self):
        self.all = IamAction("cognito-sync", all=True)
        self.BulkPublish = actions.CognitoSyncBulkPublish()
        self.DeleteDataset = actions.CognitoSyncDeleteDataset()
        self.DescribeDataset = actions.CognitoSyncDescribeDataset()
        self.DescribeIdentityPoolUsage = actions.CognitoSyncDescribeIdentityPoolUsage()
        self.DescribeIdentityUsage = actions.CognitoSyncDescribeIdentityUsage()
        self.GetBulkPublishDetails = actions.CognitoSyncGetBulkPublishDetails()
        self.GetCognitoEvents = actions.CognitoSyncGetCognitoEvents()
        self.GetIdentityPoolConfiguration = actions.CognitoSyncGetIdentityPoolConfiguration()
        self.ListDatasets = actions.CognitoSyncListDatasets()
        self.ListIdentityPoolUsage = actions.CognitoSyncListIdentityPoolUsage()
        self.ListRecords = actions.CognitoSyncListRecords()
        self.QueryRecords = actions.CognitoSyncQueryRecords()
        self.RegisterDevice = actions.CognitoSyncRegisterDevice()
        self.SetCognitoEvents = actions.CognitoSyncSetCognitoEvents()
        self.SetDatasetConfiguration = actions.CognitoSyncSetDatasetConfiguration()
        self.SetIdentityPoolConfiguration = actions.CognitoSyncSetIdentityPoolConfiguration()
        self.SubscribeToDataset = actions.CognitoSyncSubscribeToDataset()
        self.UnsubscribeFromDataset = actions.CognitoSyncUnsubscribeFromDataset()
        self.UpdateRecords = actions.CognitoSyncUpdateRecords()


class Comprehend:
    def __init__(self):
        self.all = IamAction("comprehend", all=True)
        self.BatchDetectDominantLanguage = actions.ComprehendBatchDetectDominantLanguage()
        self.BatchDetectEntities = actions.ComprehendBatchDetectEntities()
        self.BatchDetectKeyPhrases = actions.ComprehendBatchDetectKeyPhrases()
        self.BatchDetectSentiment = actions.ComprehendBatchDetectSentiment()
        self.DescribeTopicsDetectionJob = actions.ComprehendDescribeTopicsDetectionJob()
        self.DetectDominantLanguage = actions.ComprehendDetectDominantLanguage()
        self.DetectEntities = actions.ComprehendDetectEntities()
        self.DetectKeyPhrases = actions.ComprehendDetectKeyPhrases()
        self.DetectSentiment = actions.ComprehendDetectSentiment()
        self.ListTopicsDetectionJobs = actions.ComprehendListTopicsDetectionJobs()
        self.StartTopicsDetectionJob = actions.ComprehendStartTopicsDetectionJob()


class Config:
    def __init__(self):
        self.all = IamAction("config", all=True)
        self.DeleteConfigRule = actions.ConfigDeleteConfigRule()
        self.DeleteConfigurationRecorder = actions.ConfigDeleteConfigurationRecorder()
        self.DeleteDeliveryChannel = actions.ConfigDeleteDeliveryChannel()
        self.DeleteEvaluationResults = actions.ConfigDeleteEvaluationResults()
        self.DeliverConfigSnapshot = actions.ConfigDeliverConfigSnapshot()
        self.DescribeComplianceByConfigRule = actions.ConfigDescribeComplianceByConfigRule()
        self.DescribeComplianceByResource = actions.ConfigDescribeComplianceByResource()
        self.DescribeConfigRuleEvaluationStatus = actions.ConfigDescribeConfigRuleEvaluationStatus()
        self.DescribeConfigRules = actions.ConfigDescribeConfigRules()
        self.DescribeConfigurationRecorderStatus = actions.ConfigDescribeConfigurationRecorderStatus()
        self.DescribeConfigurationRecorders = actions.ConfigDescribeConfigurationRecorders()
        self.DescribeDeliveryChannelStatus = actions.ConfigDescribeDeliveryChannelStatus()
        self.DescribeDeliveryChannels = actions.ConfigDescribeDeliveryChannels()
        self.GetComplianceDetailsByConfigRule = actions.ConfigGetComplianceDetailsByConfigRule()
        self.GetComplianceDetailsByResource = actions.ConfigGetComplianceDetailsByResource()
        self.GetComplianceSummaryByConfigRule = actions.ConfigGetComplianceSummaryByConfigRule()
        self.GetComplianceSummaryByResourceType = actions.ConfigGetComplianceSummaryByResourceType()
        self.GetResourceConfigHistory = actions.ConfigGetResourceConfigHistory()
        self.GetResources = actions.ConfigGetResources()
        self.GetTagKeys = actions.ConfigGetTagKeys()
        self.ListDiscoveredResources = actions.ConfigListDiscoveredResources()
        self.PutConfigRule = actions.ConfigPutConfigRule()
        self.PutConfigurationRecorder = actions.ConfigPutConfigurationRecorder()
        self.PutDeliveryChannel = actions.ConfigPutDeliveryChannel()
        self.PutEvaluations = actions.ConfigPutEvaluations()
        self.StartConfigRulesEvaluation = actions.ConfigStartConfigRulesEvaluation()
        self.StartConfigurationRecorder = actions.ConfigStartConfigurationRecorder()
        self.StopConfigurationRecorder = actions.ConfigStopConfigurationRecorder()


class Connect:
    def __init__(self):
        self.all = IamAction("connect", all=True)
        self.CreateInstance = actions.ConnectCreateInstance()
        self.DescribeInstance = actions.ConnectDescribeInstance()
        self.DestroyInstance = actions.ConnectDestroyInstance()
        self.GetFederationToken = actions.ConnectGetFederationToken()
        self.GetFederationTokens = actions.ConnectGetFederationTokens()
        self.ListInstances = actions.ConnectListInstances()
        self.ModifyInstance = actions.ConnectModifyInstance()


class Crowd:
    def __init__(self):
        self.all = IamAction("crowd", all=True)
        self.GetTask = actions.CrowdGetTask()
        self.PutTask = actions.CrowdPutTask()


class Cur:
    def __init__(self):
        self.all = IamAction("cur", all=True)
        self.DeleteReportDefinition = actions.CurDeleteReportDefinition()
        self.DescribeReportDefinitions = actions.CurDescribeReportDefinitions()
        self.PutReportDefinition = actions.CurPutReportDefinition()


class Datapipeline:
    def __init__(self):
        self.all = IamAction("datapipeline", all=True)
        self.ActivatePipeline = actions.DatapipelineActivatePipeline()
        self.AddTags = actions.DatapipelineAddTags()
        self.CreatePipeline = actions.DatapipelineCreatePipeline()
        self.DeactivatePipeline = actions.DatapipelineDeactivatePipeline()
        self.DeletePipeline = actions.DatapipelineDeletePipeline()
        self.DescribeObjects = actions.DatapipelineDescribeObjects()
        self.DescribePipelines = actions.DatapipelineDescribePipelines()
        self.EvaluateExpression = actions.DatapipelineEvaluateExpression()
        self.GetAccountLimits = actions.DatapipelineGetAccountLimits()
        self.GetPipelineDefinition = actions.DatapipelineGetPipelineDefinition()
        self.ListPipelines = actions.DatapipelineListPipelines()
        self.PollForTask = actions.DatapipelinePollForTask()
        self.PutAccountLimits = actions.DatapipelinePutAccountLimits()
        self.PutPipelineDefinition = actions.DatapipelinePutPipelineDefinition()
        self.QueryObjects = actions.DatapipelineQueryObjects()
        self.RemoveTags = actions.DatapipelineRemoveTags()
        self.ReportTaskProgress = actions.DatapipelineReportTaskProgress()
        self.ReportTaskRunnerHeartbeat = actions.DatapipelineReportTaskRunnerHeartbeat()
        self.SetStatus = actions.DatapipelineSetStatus()
        self.SetTaskStatus = actions.DatapipelineSetTaskStatus()
        self.ValidatePipelineDefinition = actions.DatapipelineValidatePipelineDefinition()


class Dax:
    def __init__(self):
        self.all = IamAction("dax", all=True)
        self.BatchGetItem = actions.DaxBatchGetItem()
        self.BatchWriteItem = actions.DaxBatchWriteItem()
        self.CreateCluster = actions.DaxCreateCluster()
        self.CreateParameterGroup = actions.DaxCreateParameterGroup()
        self.CreateSubnetGroup = actions.DaxCreateSubnetGroup()
        self.DecreaseReplicationFactor = actions.DaxDecreaseReplicationFactor()
        self.DeleteCluster = actions.DaxDeleteCluster()
        self.DeleteItem = actions.DaxDeleteItem()
        self.DeleteParameterGroup = actions.DaxDeleteParameterGroup()
        self.DeleteSubnetGroup = actions.DaxDeleteSubnetGroup()
        self.DescribeClusters = actions.DaxDescribeClusters()
        self.DescribeDefaultParameters = actions.DaxDescribeDefaultParameters()
        self.DescribeEvents = actions.DaxDescribeEvents()
        self.DescribeParameterGroups = actions.DaxDescribeParameterGroups()
        self.DescribeParameters = actions.DaxDescribeParameters()
        self.DescribeSubnetGroups = actions.DaxDescribeSubnetGroups()
        self.DescribeTable = actions.DaxDescribeTable()
        self.GetItem = actions.DaxGetItem()
        self.IncreaseReplicationFactor = actions.DaxIncreaseReplicationFactor()
        self.ListTables = actions.DaxListTables()
        self.ListTags = actions.DaxListTags()
        self.PutItem = actions.DaxPutItem()
        self.Query = actions.DaxQuery()
        self.RebootNode = actions.DaxRebootNode()
        self.Scan = actions.DaxScan()
        self.TagResource = actions.DaxTagResource()
        self.UntagResource = actions.DaxUntagResource()
        self.UpdateCluster = actions.DaxUpdateCluster()
        self.UpdateItem = actions.DaxUpdateItem()
        self.UpdateParameterGroup = actions.DaxUpdateParameterGroup()
        self.UpdateSubnetGroup = actions.DaxUpdateSubnetGroup()


class DeviceFarm:
    def __init__(self):
        self.all = IamAction("devicefarm", all=True)
        self.CreateDevicePool = actions.DevicefarmCreateDevicePool()
        self.CreateNetworkProfile = actions.DevicefarmCreateNetworkProfile()
        self.CreateProject = actions.DevicefarmCreateProject()
        self.CreateRemoteAccessSession = actions.DevicefarmCreateRemoteAccessSession()
        self.CreateUpload = actions.DevicefarmCreateUpload()
        self.DeleteDevicePool = actions.DevicefarmDeleteDevicePool()
        self.DeleteNetworkProfile = actions.DevicefarmDeleteNetworkProfile()
        self.DeleteProject = actions.DevicefarmDeleteProject()
        self.DeleteRemoteAccessSession = actions.DevicefarmDeleteRemoteAccessSession()
        self.DeleteRun = actions.DevicefarmDeleteRun()
        self.DeleteUpload = actions.DevicefarmDeleteUpload()
        self.GetAccountSettings = actions.DevicefarmGetAccountSettings()
        self.GetDevice = actions.DevicefarmGetDevice()
        self.GetDevicePool = actions.DevicefarmGetDevicePool()
        self.GetDevicePoolCompatibility = actions.DevicefarmGetDevicePoolCompatibility()
        self.GetJob = actions.DevicefarmGetJob()
        self.GetNetworkProfile = actions.DevicefarmGetNetworkProfile()
        self.GetOfferingStatus = actions.DevicefarmGetOfferingStatus()
        self.GetProject = actions.DevicefarmGetProject()
        self.GetRemoteAccessSession = actions.DevicefarmGetRemoteAccessSession()
        self.GetRun = actions.DevicefarmGetRun()
        self.GetSuite = actions.DevicefarmGetSuite()
        self.GetTest = actions.DevicefarmGetTest()
        self.GetUpload = actions.DevicefarmGetUpload()
        self.InstallToRemoteAccessSession = actions.DevicefarmInstallToRemoteAccessSession()
        self.ListArtifacts = actions.DevicefarmListArtifacts()
        self.ListDevicePools = actions.DevicefarmListDevicePools()
        self.ListDevices = actions.DevicefarmListDevices()
        self.ListJobs = actions.DevicefarmListJobs()
        self.ListNetworkProfiles = actions.DevicefarmListNetworkProfiles()
        self.ListOfferingTransactions = actions.DevicefarmListOfferingTransactions()
        self.ListOfferings = actions.DevicefarmListOfferings()
        self.ListProjects = actions.DevicefarmListProjects()
        self.ListRemoteAccessSessions = actions.DevicefarmListRemoteAccessSessions()
        self.ListRuns = actions.DevicefarmListRuns()
        self.ListSamples = actions.DevicefarmListSamples()
        self.ListSuites = actions.DevicefarmListSuites()
        self.ListTests = actions.DevicefarmListTests()
        self.ListUniqueProblems = actions.DevicefarmListUniqueProblems()
        self.ListUploads = actions.DevicefarmListUploads()
        self.PurchaseOffering = actions.DevicefarmPurchaseOffering()
        self.RenewOffering = actions.DevicefarmRenewOffering()
        self.ScheduleRun = actions.DevicefarmScheduleRun()
        self.StopRemoteAccessSession = actions.DevicefarmStopRemoteAccessSession()
        self.StopRun = actions.DevicefarmStopRun()
        self.UpdateDevicePool = actions.DevicefarmUpdateDevicePool()
        self.UpdateNetworkProfile = actions.DevicefarmUpdateNetworkProfile()
        self.UpdateProject = actions.DevicefarmUpdateProject()


class DirectConnect:
    def __init__(self):
        self.all = IamAction("directconnect", all=True)
        self.AllocateConnectionOnInterconnect = actions.DirectconnectAllocateConnectionOnInterconnect()
        self.AllocatePrivateVirtualInterface = actions.DirectconnectAllocatePrivateVirtualInterface()
        self.AllocatePublicVirtualInterface = actions.DirectconnectAllocatePublicVirtualInterface()
        self.ConfirmConnection = actions.DirectconnectConfirmConnection()
        self.ConfirmPrivateVirtualInterface = actions.DirectconnectConfirmPrivateVirtualInterface()
        self.ConfirmPublicVirtualInterface = actions.DirectconnectConfirmPublicVirtualInterface()
        self.CreateConnection = actions.DirectconnectCreateConnection()
        self.CreateInterconnect = actions.DirectconnectCreateInterconnect()
        self.CreatePrivateVirtualInterface = actions.DirectconnectCreatePrivateVirtualInterface()
        self.CreatePublicVirtualInterface = actions.DirectconnectCreatePublicVirtualInterface()
        self.DeleteConnection = actions.DirectconnectDeleteConnection()
        self.DeleteInterconnect = actions.DirectconnectDeleteInterconnect()
        self.DeleteVirtualInterface = actions.DirectconnectDeleteVirtualInterface()
        self.DescribeConnectionLoa = actions.DirectconnectDescribeConnectionLoa()
        self.DescribeConnections = actions.DirectconnectDescribeConnections()
        self.DescribeConnectionsOnInterconnect = actions.DirectconnectDescribeConnectionsOnInterconnect()
        self.DescribeInterconnectLoa = actions.DirectconnectDescribeInterconnectLoa()
        self.DescribeInterconnects = actions.DirectconnectDescribeInterconnects()
        self.DescribeLocations = actions.DirectconnectDescribeLocations()
        self.DescribeVirtualGateways = actions.DirectconnectDescribeVirtualGateways()
        self.DescribeVirtualInterfaces = actions.DirectconnectDescribeVirtualInterfaces()


class Discovery:
    def __init__(self):
        self.all = IamAction("discovery", all=True)
        self.AssociateConfigurationItemsToApplication = actions.DiscoveryAssociateConfigurationItemsToApplication()
        self.CreateApplication = actions.DiscoveryCreateApplication()
        self.CreateTags = actions.DiscoveryCreateTags()
        self.DeleteApplications = actions.DiscoveryDeleteApplications()
        self.DeleteTags = actions.DiscoveryDeleteTags()
        self.DescribeAgents = actions.DiscoveryDescribeAgents()
        self.DescribeConfigurations = actions.DiscoveryDescribeConfigurations()
        self.DescribeExportConfigurations = actions.DiscoveryDescribeExportConfigurations()
        self.DescribeTags = actions.DiscoveryDescribeTags()
        self.DisassociateConfigurationItemsFromApplication = actions.DiscoveryDisassociateConfigurationItemsFromApplication()
        self.ExportConfigurations = actions.DiscoveryExportConfigurations()
        self.GetDiscoverySummary = actions.DiscoveryGetDiscoverySummary()
        self.ListConfigurations = actions.DiscoveryListConfigurations()
        self.ListServerNeighbors = actions.DiscoveryListServerNeighbors()
        self.StartDataCollectionByAgentIds = actions.DiscoveryStartDataCollectionByAgentIds()
        self.StartExportTask = actions.DiscoveryStartExportTask()
        self.StopDataCollectionByAgentIds = actions.DiscoveryStopDataCollectionByAgentIds()
        self.UpdateApplication = actions.DiscoveryUpdateApplication()


class Dms:
    def __init__(self):
        self.all = IamAction("dms", all=True)
        self.AddTagsToResource = actions.DmsAddTagsToResource()
        self.CreateEndpoint = actions.DmsCreateEndpoint()
        self.CreateReplicationInstance = actions.DmsCreateReplicationInstance()
        self.CreateReplicationSubnetGroup = actions.DmsCreateReplicationSubnetGroup()
        self.CreateReplicationTask = actions.DmsCreateReplicationTask()
        self.DeleteEndpoint = actions.DmsDeleteEndpoint()
        self.DeleteEventSubscription = actions.DmsDeleteEventSubscription()
        self.DeleteReplicationInstance = actions.DmsDeleteReplicationInstance()
        self.DeleteReplicationSubnetGroup = actions.DmsDeleteReplicationSubnetGroup()
        self.DeleteReplicationTask = actions.DmsDeleteReplicationTask()
        self.DescribeAccountAttributes = actions.DmsDescribeAccountAttributes()
        self.DescribeCertificates = actions.DmsDescribeCertificates()
        self.DescribeConnections = actions.DmsDescribeConnections()
        self.DescribeEndpointTypes = actions.DmsDescribeEndpointTypes()
        self.DescribeEndpoints = actions.DmsDescribeEndpoints()
        self.DescribeEventCategories = actions.DmsDescribeEventCategories()
        self.DescribeEventSubscriptions = actions.DmsDescribeEventSubscriptions()
        self.DescribeEvents = actions.DmsDescribeEvents()
        self.DescribeOrderableReplicationInstances = actions.DmsDescribeOrderableReplicationInstances()
        self.DescribeRefreshSchemasStatus = actions.DmsDescribeRefreshSchemasStatus()
        self.DescribeReplicationInstances = actions.DmsDescribeReplicationInstances()
        self.DescribeReplicationSubnetGroups = actions.DmsDescribeReplicationSubnetGroups()
        self.DescribeReplicationTasks = actions.DmsDescribeReplicationTasks()
        self.DescribeSchemas = actions.DmsDescribeSchemas()
        self.DescribeTableStatistics = actions.DmsDescribeTableStatistics()
        self.ListTagsForResource = actions.DmsListTagsForResource()
        self.ModifyEndpoint = actions.DmsModifyEndpoint()
        self.ModifyEventSubscription = actions.DmsModifyEventSubscription()
        self.ModifyReplicationInstance = actions.DmsModifyReplicationInstance()
        self.ModifyReplicationSubnetGroup = actions.DmsModifyReplicationSubnetGroup()
        self.ModifyReplicationTask = actions.DmsModifyReplicationTask()
        self.RefreshSchemas = actions.DmsRefreshSchemas()
        self.RemoveTagsFromResource = actions.DmsRemoveTagsFromResource()
        self.StartReplicationTask = actions.DmsStartReplicationTask()
        self.StopReplicationTask = actions.DmsStopReplicationTask()
        self.TestConnection = actions.DmsTestConnection()


class Ds:
    def __init__(self):
        self.all = IamAction("ds", all=True)
        self.AddIpRoutes = actions.DsAddIpRoutes()
        self.AddTagsToResource = actions.DsAddTagsToResource()
        self.AuthorizeApplication = actions.DsAuthorizeApplication()
        self.CancelSchemaExtension = actions.DsCancelSchemaExtension()
        self.ConnectDirectory = actions.DsConnectDirectory()
        self.CreateAlias = actions.DsCreateAlias()
        self.CreateComputer = actions.DsCreateComputer()
        self.CreateConditionalForwarder = actions.DsCreateConditionalForwarder()
        self.CreateDirectory = actions.DsCreateDirectory()
        self.CreateMicrosoftAD = actions.DsCreateMicrosoftAD()
        self.CreateSnapshot = actions.DsCreateSnapshot()
        self.CreateTrust = actions.DsCreateTrust()
        self.DeleteConditionalForwarder = actions.DsDeleteConditionalForwarder()
        self.DeleteDirectory = actions.DsDeleteDirectory()
        self.DeleteSnapshot = actions.DsDeleteSnapshot()
        self.DeleteTrust = actions.DsDeleteTrust()
        self.DeregisterEventTopic = actions.DsDeregisterEventTopic()
        self.DescribeConditionalForwarders = actions.DsDescribeConditionalForwarders()
        self.DescribeDirectories = actions.DsDescribeDirectories()
        self.DescribeEventTopics = actions.DsDescribeEventTopics()
        self.DescribeSnapshots = actions.DsDescribeSnapshots()
        self.DescribeTrusts = actions.DsDescribeTrusts()
        self.DisableRadius = actions.DsDisableRadius()
        self.DisableSso = actions.DsDisableSso()
        self.EnableRadius = actions.DsEnableRadius()
        self.EnableSso = actions.DsEnableSso()
        self.GetDirectoryLimits = actions.DsGetDirectoryLimits()
        self.GetSnapshotLimits = actions.DsGetSnapshotLimits()
        self.ListAuthorizedApplications = actions.DsListAuthorizedApplications()
        self.ListIpRoutes = actions.DsListIpRoutes()
        self.ListSchemaExtensions = actions.DsListSchemaExtensions()
        self.ListTagsForResource = actions.DsListTagsForResource()
        self.RegisterEventTopic = actions.DsRegisterEventTopic()
        self.RemoveIpRoutes = actions.DsRemoveIpRoutes()
        self.RemoveTagsFromResource = actions.DsRemoveTagsFromResource()
        self.RestoreFromSnapshot = actions.DsRestoreFromSnapshot()
        self.StartSchemaExtension = actions.DsStartSchemaExtension()
        self.UnauthorizeApplication = actions.DsUnauthorizeApplication()
        self.UpdateConditionalForwarder = actions.DsUpdateConditionalForwarder()
        self.UpdateRadius = actions.DsUpdateRadius()
        self.VerifyTrust = actions.DsVerifyTrust()


class Dynamodb:
    def __init__(self):
        self.all = IamAction("dynamodb", all=True)
        self.BatchGetItem = actions.DynamodbBatchGetItem()
        self.BatchWriteItem = actions.DynamodbBatchWriteItem()
        self.CreateBackup = actions.DynamodbCreateBackup()
        self.CreateTable = actions.DynamodbCreateTable()
        self.DeleteBackup = actions.DynamodbDeleteBackup()
        self.DeleteItem = actions.DynamodbDeleteItem()
        self.DeleteTable = actions.DynamodbDeleteTable()
        self.DescribeBackup = actions.DynamodbDescribeBackup()
        self.DescribeContinuousBackups = actions.DynamodbDescribeContinuousBackups()
        self.DescribeLimits = actions.DynamodbDescribeLimits()
        self.DescribeReservedCapacity = actions.DynamodbDescribeReservedCapacity()
        self.DescribeReservedCapacityOfferings = actions.DynamodbDescribeReservedCapacityOfferings()
        self.DescribeStream = actions.DynamodbDescribeStream()
        self.DescribeTable = actions.DynamodbDescribeTable()
        self.DescribeTimeToLive = actions.DynamodbDescribeTimeToLive()
        self.GetItem = actions.DynamodbGetItem()
        self.GetRecords = actions.DynamodbGetRecords()
        self.GetShardIterator = actions.DynamodbGetShardIterator()
        self.ListBackups = actions.DynamodbListBackups()
        self.ListStreams = actions.DynamodbListStreams()
        self.ListTables = actions.DynamodbListTables()
        self.ListTagsOfResource = actions.DynamodbListTagsOfResource()
        self.PurchaseReservedCapacityOfferings = actions.DynamodbPurchaseReservedCapacityOfferings()
        self.PutItem = actions.DynamodbPutItem()
        self.Query = actions.DynamodbQuery()
        self.RestoreTableFromBackup = actions.DynamodbRestoreTableFromBackup()
        self.RestoreTableToPointInTime = actions.DynamodbRestoreTableToPointInTime()
        self.Scan = actions.DynamodbScan()
        self.TagResource = actions.DynamodbTagResource()
        self.UntagResource = actions.DynamodbUntagResource()
        self.UpdateContinuousBackups = actions.DynamodbUpdateContinuousBackups()
        self.UpdateItem = actions.DynamodbUpdateItem()
        self.UpdateTable = actions.DynamodbUpdateTable()
        self.UpdateTimeToLive = actions.DynamodbUpdateTimeToLive()


class Ec2:
    def __init__(self):
        self.all = IamAction("ec2", all=True)
        self.AcceptReservedInstancesExchangeQuote = actions.Ec2AcceptReservedInstancesExchangeQuote()
        self.AcceptVpcEndpointConnections = actions.Ec2AcceptVpcEndpointConnections()
        self.AcceptVpcPeeringConnection = actions.Ec2AcceptVpcPeeringConnection()
        self.AllocateAddress = actions.Ec2AllocateAddress()
        self.AllocateHosts = actions.Ec2AllocateHosts()
        self.AssignIpv6Addresses = actions.Ec2AssignIpv6Addresses()
        self.AssignPrivateIpAddresses = actions.Ec2AssignPrivateIpAddresses()
        self.AssociateAddress = actions.Ec2AssociateAddress()
        self.AssociateDhcpOptions = actions.Ec2AssociateDhcpOptions()
        self.AssociateIamInstanceProfile = actions.Ec2AssociateIamInstanceProfile()
        self.AssociateRouteTable = actions.Ec2AssociateRouteTable()
        self.AssociateSubnetCidrBlock = actions.Ec2AssociateSubnetCidrBlock()
        self.AssociateVpcCidrBlock = actions.Ec2AssociateVpcCidrBlock()
        self.AttachClassicLinkVpc = actions.Ec2AttachClassicLinkVpc()
        self.AttachInternetGateway = actions.Ec2AttachInternetGateway()
        self.AttachNetworkInterface = actions.Ec2AttachNetworkInterface()
        self.AttachVolume = actions.Ec2AttachVolume()
        self.AttachVpnGateway = actions.Ec2AttachVpnGateway()
        self.AuthorizeSecurityGroupEgress = actions.Ec2AuthorizeSecurityGroupEgress()
        self.AuthorizeSecurityGroupIngress = actions.Ec2AuthorizeSecurityGroupIngress()
        self.BundleInstance = actions.Ec2BundleInstance()
        self.CancelBundleTask = actions.Ec2CancelBundleTask()
        self.CancelConversionTask = actions.Ec2CancelConversionTask()
        self.CancelExportTask = actions.Ec2CancelExportTask()
        self.CancelImportTask = actions.Ec2CancelImportTask()
        self.CancelReservedInstancesListing = actions.Ec2CancelReservedInstancesListing()
        self.CancelSpotFleetRequests = actions.Ec2CancelSpotFleetRequests()
        self.CancelSpotInstanceRequests = actions.Ec2CancelSpotInstanceRequests()
        self.ConfirmProductInstance = actions.Ec2ConfirmProductInstance()
        self.CopyFpgaImage = actions.Ec2CopyFpgaImage()
        self.CopyImage = actions.Ec2CopyImage()
        self.CopySnapshot = actions.Ec2CopySnapshot()
        self.CreateCustomerGateway = actions.Ec2CreateCustomerGateway()
        self.CreateDefaultSubnet = actions.Ec2CreateDefaultSubnet()
        self.CreateDefaultVpc = actions.Ec2CreateDefaultVpc()
        self.CreateDhcpOptions = actions.Ec2CreateDhcpOptions()
        self.CreateEgressOnlyInternetGateway = actions.Ec2CreateEgressOnlyInternetGateway()
        self.CreateFlowLogs = actions.Ec2CreateFlowLogs()
        self.CreateFpgaImage = actions.Ec2CreateFpgaImage()
        self.CreateImage = actions.Ec2CreateImage()
        self.CreateInstanceExportTask = actions.Ec2CreateInstanceExportTask()
        self.CreateInternetGateway = actions.Ec2CreateInternetGateway()
        self.CreateKeyPair = actions.Ec2CreateKeyPair()
        self.CreateLaunchTemplate = actions.Ec2CreateLaunchTemplate()
        self.CreateLaunchTemplateVersion = actions.Ec2CreateLaunchTemplateVersion()
        self.CreateNatGateway = actions.Ec2CreateNatGateway()
        self.CreateNetworkAcl = actions.Ec2CreateNetworkAcl()
        self.CreateNetworkAclEntry = actions.Ec2CreateNetworkAclEntry()
        self.CreateNetworkInterface = actions.Ec2CreateNetworkInterface()
        self.CreateNetworkInterfacePermission = actions.Ec2CreateNetworkInterfacePermission()
        self.CreatePlacementGroup = actions.Ec2CreatePlacementGroup()
        self.CreateReservedInstancesListing = actions.Ec2CreateReservedInstancesListing()
        self.CreateRoute = actions.Ec2CreateRoute()
        self.CreateRouteTable = actions.Ec2CreateRouteTable()
        self.CreateSecurityGroup = actions.Ec2CreateSecurityGroup()
        self.CreateSnapshot = actions.Ec2CreateSnapshot()
        self.CreateSpotDatafeedSubscription = actions.Ec2CreateSpotDatafeedSubscription()
        self.CreateSubnet = actions.Ec2CreateSubnet()
        self.CreateTags = actions.Ec2CreateTags()
        self.CreateVolume = actions.Ec2CreateVolume()
        self.CreateVpc = actions.Ec2CreateVpc()
        self.CreateVpcEndpoint = actions.Ec2CreateVpcEndpoint()
        self.CreateVpcEndpointConnectionNotification = actions.Ec2CreateVpcEndpointConnectionNotification()
        self.CreateVpcEndpointServiceConfiguration = actions.Ec2CreateVpcEndpointServiceConfiguration()
        self.CreateVpcPeeringConnection = actions.Ec2CreateVpcPeeringConnection()
        self.CreateVpnConnection = actions.Ec2CreateVpnConnection()
        self.CreateVpnConnectionRoute = actions.Ec2CreateVpnConnectionRoute()
        self.CreateVpnGateway = actions.Ec2CreateVpnGateway()
        self.DeleteCustomerGateway = actions.Ec2DeleteCustomerGateway()
        self.DeleteDhcpOptions = actions.Ec2DeleteDhcpOptions()
        self.DeleteEgressOnlyInternetGateway = actions.Ec2DeleteEgressOnlyInternetGateway()
        self.DeleteFlowLogs = actions.Ec2DeleteFlowLogs()
        self.DeleteFpgaImage = actions.Ec2DeleteFpgaImage()
        self.DeleteInternetGateway = actions.Ec2DeleteInternetGateway()
        self.DeleteKeyPair = actions.Ec2DeleteKeyPair()
        self.DeleteLaunchTemplate = actions.Ec2DeleteLaunchTemplate()
        self.DeleteLaunchTemplateVersions = actions.Ec2DeleteLaunchTemplateVersions()
        self.DeleteNatGateway = actions.Ec2DeleteNatGateway()
        self.DeleteNetworkAcl = actions.Ec2DeleteNetworkAcl()
        self.DeleteNetworkAclEntry = actions.Ec2DeleteNetworkAclEntry()
        self.DeleteNetworkInterface = actions.Ec2DeleteNetworkInterface()
        self.DeleteNetworkInterfacePermission = actions.Ec2DeleteNetworkInterfacePermission()
        self.DeletePlacementGroup = actions.Ec2DeletePlacementGroup()
        self.DeleteRoute = actions.Ec2DeleteRoute()
        self.DeleteRouteTable = actions.Ec2DeleteRouteTable()
        self.DeleteSecurityGroup = actions.Ec2DeleteSecurityGroup()
        self.DeleteSnapshot = actions.Ec2DeleteSnapshot()
        self.DeleteSpotDatafeedSubscription = actions.Ec2DeleteSpotDatafeedSubscription()
        self.DeleteSubnet = actions.Ec2DeleteSubnet()
        self.DeleteTags = actions.Ec2DeleteTags()
        self.DeleteVolume = actions.Ec2DeleteVolume()
        self.DeleteVpc = actions.Ec2DeleteVpc()
        self.DeleteVpcEndpointConnectionNotifications = actions.Ec2DeleteVpcEndpointConnectionNotifications()
        self.DeleteVpcEndpointServiceConfigurations = actions.Ec2DeleteVpcEndpointServiceConfigurations()
        self.DeleteVpcEndpoints = actions.Ec2DeleteVpcEndpoints()
        self.DeleteVpcPeeringConnection = actions.Ec2DeleteVpcPeeringConnection()
        self.DeleteVpnConnection = actions.Ec2DeleteVpnConnection()
        self.DeleteVpnConnectionRoute = actions.Ec2DeleteVpnConnectionRoute()
        self.DeleteVpnGateway = actions.Ec2DeleteVpnGateway()
        self.DeregisterImage = actions.Ec2DeregisterImage()
        self.DescribeAccountAttributes = actions.Ec2DescribeAccountAttributes()
        self.DescribeAddresses = actions.Ec2DescribeAddresses()
        self.DescribeAvailabilityZones = actions.Ec2DescribeAvailabilityZones()
        self.DescribeBundleTasks = actions.Ec2DescribeBundleTasks()
        self.DescribeClassicLinkInstances = actions.Ec2DescribeClassicLinkInstances()
        self.DescribeConversionTasks = actions.Ec2DescribeConversionTasks()
        self.DescribeCustomerGateways = actions.Ec2DescribeCustomerGateways()
        self.DescribeDhcpOptions = actions.Ec2DescribeDhcpOptions()
        self.DescribeEgressOnlyInternetGateways = actions.Ec2DescribeEgressOnlyInternetGateways()
        self.DescribeElasticGpus = actions.Ec2DescribeElasticGpus()
        self.DescribeExportTasks = actions.Ec2DescribeExportTasks()
        self.DescribeFlowLogs = actions.Ec2DescribeFlowLogs()
        self.DescribeFpgaImageAttribute = actions.Ec2DescribeFpgaImageAttribute()
        self.DescribeFpgaImages = actions.Ec2DescribeFpgaImages()
        self.DescribeHostReservationOfferings = actions.Ec2DescribeHostReservationOfferings()
        self.DescribeHostReservations = actions.Ec2DescribeHostReservations()
        self.DescribeHosts = actions.Ec2DescribeHosts()
        self.DescribeIamInstanceProfileAssociations = actions.Ec2DescribeIamInstanceProfileAssociations()
        self.DescribeIdFormat = actions.Ec2DescribeIdFormat()
        self.DescribeIdentityIdFormat = actions.Ec2DescribeIdentityIdFormat()
        self.DescribeImageAttribute = actions.Ec2DescribeImageAttribute()
        self.DescribeImages = actions.Ec2DescribeImages()
        self.DescribeImportImageTasks = actions.Ec2DescribeImportImageTasks()
        self.DescribeImportSnapshotTasks = actions.Ec2DescribeImportSnapshotTasks()
        self.DescribeInstanceAttribute = actions.Ec2DescribeInstanceAttribute()
        self.DescribeInstanceCreditSpecifications = actions.Ec2DescribeInstanceCreditSpecifications()
        self.DescribeInstanceStatus = actions.Ec2DescribeInstanceStatus()
        self.DescribeInstances = actions.Ec2DescribeInstances()
        self.DescribeInternetGateways = actions.Ec2DescribeInternetGateways()
        self.DescribeKeyPairs = actions.Ec2DescribeKeyPairs()
        self.DescribeLaunchTemplateVersions = actions.Ec2DescribeLaunchTemplateVersions()
        self.DescribeLaunchTemplates = actions.Ec2DescribeLaunchTemplates()
        self.DescribeMovingAddresses = actions.Ec2DescribeMovingAddresses()
        self.DescribeNatGateways = actions.Ec2DescribeNatGateways()
        self.DescribeNetworkAcls = actions.Ec2DescribeNetworkAcls()
        self.DescribeNetworkInterfaceAttribute = actions.Ec2DescribeNetworkInterfaceAttribute()
        self.DescribeNetworkInterfacePermissions = actions.Ec2DescribeNetworkInterfacePermissions()
        self.DescribeNetworkInterfaces = actions.Ec2DescribeNetworkInterfaces()
        self.DescribePlacementGroups = actions.Ec2DescribePlacementGroups()
        self.DescribePrefixLists = actions.Ec2DescribePrefixLists()
        self.DescribeRegions = actions.Ec2DescribeRegions()
        self.DescribeReservedInstances = actions.Ec2DescribeReservedInstances()
        self.DescribeReservedInstancesListings = actions.Ec2DescribeReservedInstancesListings()
        self.DescribeReservedInstancesModifications = actions.Ec2DescribeReservedInstancesModifications()
        self.DescribeReservedInstancesOfferings = actions.Ec2DescribeReservedInstancesOfferings()
        self.DescribeRouteTables = actions.Ec2DescribeRouteTables()
        self.DescribeScheduledInstanceAvailability = actions.Ec2DescribeScheduledInstanceAvailability()
        self.DescribeScheduledInstances = actions.Ec2DescribeScheduledInstances()
        self.DescribeSecurityGroupReferences = actions.Ec2DescribeSecurityGroupReferences()
        self.DescribeSecurityGroups = actions.Ec2DescribeSecurityGroups()
        self.DescribeSnapshotAttribute = actions.Ec2DescribeSnapshotAttribute()
        self.DescribeSnapshots = actions.Ec2DescribeSnapshots()
        self.DescribeSpotDatafeedSubscription = actions.Ec2DescribeSpotDatafeedSubscription()
        self.DescribeSpotFleetInstances = actions.Ec2DescribeSpotFleetInstances()
        self.DescribeSpotFleetRequestHistory = actions.Ec2DescribeSpotFleetRequestHistory()
        self.DescribeSpotFleetRequests = actions.Ec2DescribeSpotFleetRequests()
        self.DescribeSpotInstanceRequests = actions.Ec2DescribeSpotInstanceRequests()
        self.DescribeSpotPriceHistory = actions.Ec2DescribeSpotPriceHistory()
        self.DescribeStaleSecurityGroups = actions.Ec2DescribeStaleSecurityGroups()
        self.DescribeSubnets = actions.Ec2DescribeSubnets()
        self.DescribeTags = actions.Ec2DescribeTags()
        self.DescribeVolumeAttribute = actions.Ec2DescribeVolumeAttribute()
        self.DescribeVolumeStatus = actions.Ec2DescribeVolumeStatus()
        self.DescribeVolumes = actions.Ec2DescribeVolumes()
        self.DescribeVolumesModifications = actions.Ec2DescribeVolumesModifications()
        self.DescribeVpcAttribute = actions.Ec2DescribeVpcAttribute()
        self.DescribeVpcClassicLink = actions.Ec2DescribeVpcClassicLink()
        self.DescribeVpcClassicLinkDnsSupport = actions.Ec2DescribeVpcClassicLinkDnsSupport()
        self.DescribeVpcEndpointConnectionNotifications = actions.Ec2DescribeVpcEndpointConnectionNotifications()
        self.DescribeVpcEndpointConnections = actions.Ec2DescribeVpcEndpointConnections()
        self.DescribeVpcEndpointServiceConfigurations = actions.Ec2DescribeVpcEndpointServiceConfigurations()
        self.DescribeVpcEndpointServicePermissions = actions.Ec2DescribeVpcEndpointServicePermissions()
        self.DescribeVpcEndpointServices = actions.Ec2DescribeVpcEndpointServices()
        self.DescribeVpcEndpoints = actions.Ec2DescribeVpcEndpoints()
        self.DescribeVpcPeeringConnections = actions.Ec2DescribeVpcPeeringConnections()
        self.DescribeVpcs = actions.Ec2DescribeVpcs()
        self.DescribeVpnConnections = actions.Ec2DescribeVpnConnections()
        self.DescribeVpnGateways = actions.Ec2DescribeVpnGateways()
        self.DetachClassicLinkVpc = actions.Ec2DetachClassicLinkVpc()
        self.DetachInternetGateway = actions.Ec2DetachInternetGateway()
        self.DetachNetworkInterface = actions.Ec2DetachNetworkInterface()
        self.DetachVolume = actions.Ec2DetachVolume()
        self.DetachVpnGateway = actions.Ec2DetachVpnGateway()
        self.DisableVgwRoutePropagation = actions.Ec2DisableVgwRoutePropagation()
        self.DisableVpcClassicLink = actions.Ec2DisableVpcClassicLink()
        self.DisableVpcClassicLinkDnsSupport = actions.Ec2DisableVpcClassicLinkDnsSupport()
        self.DisassociateAddress = actions.Ec2DisassociateAddress()
        self.DisassociateIamInstanceProfile = actions.Ec2DisassociateIamInstanceProfile()
        self.DisassociateRouteTable = actions.Ec2DisassociateRouteTable()
        self.DisassociateSubnetCidrBlock = actions.Ec2DisassociateSubnetCidrBlock()
        self.DisassociateVpcCidrBlock = actions.Ec2DisassociateVpcCidrBlock()
        self.EnableVgwRoutePropagation = actions.Ec2EnableVgwRoutePropagation()
        self.EnableVolumeIO = actions.Ec2EnableVolumeIO()
        self.EnableVpcClassicLink = actions.Ec2EnableVpcClassicLink()
        self.EnableVpcClassicLinkDnsSupport = actions.Ec2EnableVpcClassicLinkDnsSupport()
        self.GetConsoleOutput = actions.Ec2GetConsoleOutput()
        self.GetConsoleScreenshot = actions.Ec2GetConsoleScreenshot()
        self.GetHostReservationPurchasePreview = actions.Ec2GetHostReservationPurchasePreview()
        self.GetLaunchTemplateData = actions.Ec2GetLaunchTemplateData()
        self.GetPasswordData = actions.Ec2GetPasswordData()
        self.GetReservedInstancesExchangeQuote = actions.Ec2GetReservedInstancesExchangeQuote()
        self.ImportImage = actions.Ec2ImportImage()
        self.ImportInstance = actions.Ec2ImportInstance()
        self.ImportKeyPair = actions.Ec2ImportKeyPair()
        self.ImportSnapshot = actions.Ec2ImportSnapshot()
        self.ImportVolume = actions.Ec2ImportVolume()
        self.ModifyFpgaImageAttribute = actions.Ec2ModifyFpgaImageAttribute()
        self.ModifyHosts = actions.Ec2ModifyHosts()
        self.ModifyIdFormat = actions.Ec2ModifyIdFormat()
        self.ModifyIdentityIdFormat = actions.Ec2ModifyIdentityIdFormat()
        self.ModifyImageAttribute = actions.Ec2ModifyImageAttribute()
        self.ModifyInstanceAttribute = actions.Ec2ModifyInstanceAttribute()
        self.ModifyInstanceCreditSpecification = actions.Ec2ModifyInstanceCreditSpecification()
        self.ModifyInstancePlacement = actions.Ec2ModifyInstancePlacement()
        self.ModifyLaunchTemplate = actions.Ec2ModifyLaunchTemplate()
        self.ModifyNetworkInterfaceAttribute = actions.Ec2ModifyNetworkInterfaceAttribute()
        self.ModifyReservedInstances = actions.Ec2ModifyReservedInstances()
        self.ModifySnapshotAttribute = actions.Ec2ModifySnapshotAttribute()
        self.ModifySpotFleetRequest = actions.Ec2ModifySpotFleetRequest()
        self.ModifySubnetAttribute = actions.Ec2ModifySubnetAttribute()
        self.ModifyVolume = actions.Ec2ModifyVolume()
        self.ModifyVolumeAttribute = actions.Ec2ModifyVolumeAttribute()
        self.ModifyVpcAttribute = actions.Ec2ModifyVpcAttribute()
        self.ModifyVpcEndpoint = actions.Ec2ModifyVpcEndpoint()
        self.ModifyVpcEndpointConnectionNotification = actions.Ec2ModifyVpcEndpointConnectionNotification()
        self.ModifyVpcEndpointServiceConfiguration = actions.Ec2ModifyVpcEndpointServiceConfiguration()
        self.ModifyVpcEndpointServicePermissions = actions.Ec2ModifyVpcEndpointServicePermissions()
        self.ModifyVpcPeeringConnectionOptions = actions.Ec2ModifyVpcPeeringConnectionOptions()
        self.ModifyVpcTenancy = actions.Ec2ModifyVpcTenancy()
        self.MonitorInstances = actions.Ec2MonitorInstances()
        self.MoveAddressToVpc = actions.Ec2MoveAddressToVpc()
        self.PurchaseHostReservation = actions.Ec2PurchaseHostReservation()
        self.PurchaseReservedInstancesOffering = actions.Ec2PurchaseReservedInstancesOffering()
        self.PurchaseScheduledInstances = actions.Ec2PurchaseScheduledInstances()
        self.RebootInstances = actions.Ec2RebootInstances()
        self.RegisterImage = actions.Ec2RegisterImage()
        self.RejectVpcEndpointConnections = actions.Ec2RejectVpcEndpointConnections()
        self.RejectVpcPeeringConnection = actions.Ec2RejectVpcPeeringConnection()
        self.ReleaseAddress = actions.Ec2ReleaseAddress()
        self.ReleaseHosts = actions.Ec2ReleaseHosts()
        self.ReplaceIamInstanceProfileAssociation = actions.Ec2ReplaceIamInstanceProfileAssociation()
        self.ReplaceNetworkAclAssociation = actions.Ec2ReplaceNetworkAclAssociation()
        self.ReplaceNetworkAclEntry = actions.Ec2ReplaceNetworkAclEntry()
        self.ReplaceRoute = actions.Ec2ReplaceRoute()
        self.ReplaceRouteTableAssociation = actions.Ec2ReplaceRouteTableAssociation()
        self.ReportInstanceStatus = actions.Ec2ReportInstanceStatus()
        self.RequestSpotFleet = actions.Ec2RequestSpotFleet()
        self.RequestSpotInstances = actions.Ec2RequestSpotInstances()
        self.ResetFpgaImageAttribute = actions.Ec2ResetFpgaImageAttribute()
        self.ResetImageAttribute = actions.Ec2ResetImageAttribute()
        self.ResetInstanceAttribute = actions.Ec2ResetInstanceAttribute()
        self.ResetNetworkInterfaceAttribute = actions.Ec2ResetNetworkInterfaceAttribute()
        self.ResetSnapshotAttribute = actions.Ec2ResetSnapshotAttribute()
        self.RestoreAddressToClassic = actions.Ec2RestoreAddressToClassic()
        self.RevokeSecurityGroupEgress = actions.Ec2RevokeSecurityGroupEgress()
        self.RevokeSecurityGroupIngress = actions.Ec2RevokeSecurityGroupIngress()
        self.RunInstances = actions.Ec2RunInstances()
        self.RunScheduledInstances = actions.Ec2RunScheduledInstances()
        self.StartInstances = actions.Ec2StartInstances()
        self.StopInstances = actions.Ec2StopInstances()
        self.TerminateInstances = actions.Ec2TerminateInstances()
        self.UnassignIpv6Addresses = actions.Ec2UnassignIpv6Addresses()
        self.UnassignPrivateIpAddresses = actions.Ec2UnassignPrivateIpAddresses()
        self.UnmonitorInstances = actions.Ec2UnmonitorInstances()
        self.UpdateSecurityGroupRuleDescriptionsEgress = actions.Ec2UpdateSecurityGroupRuleDescriptionsEgress()
        self.UpdateSecurityGroupRuleDescriptionsIngress = actions.Ec2UpdateSecurityGroupRuleDescriptionsIngress()


class Ec2Messages:
    def __init__(self):
        self.all = IamAction("ec2messages", all=True)
        self.AcknowledgeMessage = actions.Ec2MessagesAcknowledgeMessage()
        self.DeleteMessage = actions.Ec2MessagesDeleteMessage()
        self.FailMessage = actions.Ec2MessagesFailMessage()
        self.GetEndpoint = actions.Ec2MessagesGetEndpoint()
        self.GetMessages = actions.Ec2MessagesGetMessages()
        self.SendReply = actions.Ec2MessagesSendReply()


class Ecr:
    def __init__(self):
        self.all = IamAction("ecr", all=True)
        self.BatchCheckLayerAvailability = actions.EcrBatchCheckLayerAvailability()
        self.BatchDeleteImage = actions.EcrBatchDeleteImage()
        self.BatchGetImage = actions.EcrBatchGetImage()
        self.CompleteLayerUpload = actions.EcrCompleteLayerUpload()
        self.CreateRepository = actions.EcrCreateRepository()
        self.DeleteRepository = actions.EcrDeleteRepository()
        self.DeleteRepositoryPolicy = actions.EcrDeleteRepositoryPolicy()
        self.DescribeImages = actions.EcrDescribeImages()
        self.DescribeRepositories = actions.EcrDescribeRepositories()
        self.GetAuthorizationToken = actions.EcrGetAuthorizationToken()
        self.GetDownloadUrlForLayer = actions.EcrGetDownloadUrlForLayer()
        self.GetRepositoryPolicy = actions.EcrGetRepositoryPolicy()
        self.InitiateLayerUpload = actions.EcrInitiateLayerUpload()
        self.ListImages = actions.EcrListImages()
        self.PutImage = actions.EcrPutImage()
        self.SetRepositoryPolicy = actions.EcrSetRepositoryPolicy()
        self.UploadLayerPart = actions.EcrUploadLayerPart()


class Ecs:
    def __init__(self):
        self.all = IamAction("ecs", all=True)
        self.CreateCluster = actions.EcsCreateCluster()
        self.CreateService = actions.EcsCreateService()
        self.DeleteCluster = actions.EcsDeleteCluster()
        self.DeleteService = actions.EcsDeleteService()
        self.DeregisterContainerInstance = actions.EcsDeregisterContainerInstance()
        self.DeregisterTaskDefinition = actions.EcsDeregisterTaskDefinition()
        self.DescribeClusters = actions.EcsDescribeClusters()
        self.DescribeContainerInstances = actions.EcsDescribeContainerInstances()
        self.DescribeServices = actions.EcsDescribeServices()
        self.DescribeTaskDefinition = actions.EcsDescribeTaskDefinition()
        self.DescribeTasks = actions.EcsDescribeTasks()
        self.DiscoverPollEndpoint = actions.EcsDiscoverPollEndpoint()
        self.ListClusters = actions.EcsListClusters()
        self.ListContainerInstances = actions.EcsListContainerInstances()
        self.ListServices = actions.EcsListServices()
        self.ListTaskDefinitionFamilies = actions.EcsListTaskDefinitionFamilies()
        self.ListTaskDefinitions = actions.EcsListTaskDefinitions()
        self.ListTasks = actions.EcsListTasks()
        self.Poll = actions.EcsPoll()
        self.RegisterContainerInstance = actions.EcsRegisterContainerInstance()
        self.RegisterTaskDefinition = actions.EcsRegisterTaskDefinition()
        self.RunTask = actions.EcsRunTask()
        self.StartTask = actions.EcsStartTask()
        self.StartTelemetrySession = actions.EcsStartTelemetrySession()
        self.StopTask = actions.EcsStopTask()
        self.SubmitContainerStateChange = actions.EcsSubmitContainerStateChange()
        self.SubmitTaskStateChange = actions.EcsSubmitTaskStateChange()
        self.UpdateContainerAgent = actions.EcsUpdateContainerAgent()
        self.UpdateContainerInstancesState = actions.EcsUpdateContainerInstancesState()
        self.UpdateService = actions.EcsUpdateService()


class Elasticache:
    def __init__(self):
        self.all = IamAction("elasticache", all=True)
        self.AddTagsToResource = actions.ElasticacheAddTagsToResource()
        self.AuthorizeCacheSecurityGroupIngress = actions.ElasticacheAuthorizeCacheSecurityGroupIngress()
        self.CopySnapshot = actions.ElasticacheCopySnapshot()
        self.CreateCacheCluster = actions.ElasticacheCreateCacheCluster()
        self.CreateCacheParameterGroup = actions.ElasticacheCreateCacheParameterGroup()
        self.CreateCacheSecurityGroup = actions.ElasticacheCreateCacheSecurityGroup()
        self.CreateCacheSubnetGroup = actions.ElasticacheCreateCacheSubnetGroup()
        self.CreateReplicationGroup = actions.ElasticacheCreateReplicationGroup()
        self.CreateSnapshot = actions.ElasticacheCreateSnapshot()
        self.DeleteCacheCluster = actions.ElasticacheDeleteCacheCluster()
        self.DeleteCacheParameterGroup = actions.ElasticacheDeleteCacheParameterGroup()
        self.DeleteCacheSecurityGroup = actions.ElasticacheDeleteCacheSecurityGroup()
        self.DeleteCacheSubnetGroup = actions.ElasticacheDeleteCacheSubnetGroup()
        self.DeleteReplicationGroup = actions.ElasticacheDeleteReplicationGroup()
        self.DeleteSnapshot = actions.ElasticacheDeleteSnapshot()
        self.DescribeCacheClusters = actions.ElasticacheDescribeCacheClusters()
        self.DescribeCacheEngineVersions = actions.ElasticacheDescribeCacheEngineVersions()
        self.DescribeCacheParameterGroups = actions.ElasticacheDescribeCacheParameterGroups()
        self.DescribeCacheParameters = actions.ElasticacheDescribeCacheParameters()
        self.DescribeCacheSecurityGroups = actions.ElasticacheDescribeCacheSecurityGroups()
        self.DescribeCacheSubnetGroups = actions.ElasticacheDescribeCacheSubnetGroups()
        self.DescribeEngineDefaultParameters = actions.ElasticacheDescribeEngineDefaultParameters()
        self.DescribeEvents = actions.ElasticacheDescribeEvents()
        self.DescribeReplicationGroups = actions.ElasticacheDescribeReplicationGroups()
        self.DescribeReservedCacheNodes = actions.ElasticacheDescribeReservedCacheNodes()
        self.DescribeReservedCacheNodesOfferings = actions.ElasticacheDescribeReservedCacheNodesOfferings()
        self.DescribeSnapshots = actions.ElasticacheDescribeSnapshots()
        self.ListAllowedNodeTypeModifications = actions.ElasticacheListAllowedNodeTypeModifications()
        self.ListTagsForResource = actions.ElasticacheListTagsForResource()
        self.ModifyCacheCluster = actions.ElasticacheModifyCacheCluster()
        self.ModifyCacheParameterGroup = actions.ElasticacheModifyCacheParameterGroup()
        self.ModifyCacheSubnetGroup = actions.ElasticacheModifyCacheSubnetGroup()
        self.ModifyReplicationGroup = actions.ElasticacheModifyReplicationGroup()
        self.PurchaseReservedCacheNodesOffering = actions.ElasticachePurchaseReservedCacheNodesOffering()
        self.RebootCacheCluster = actions.ElasticacheRebootCacheCluster()
        self.RemoveTagsFromResource = actions.ElasticacheRemoveTagsFromResource()
        self.ResetCacheParameterGroup = actions.ElasticacheResetCacheParameterGroup()
        self.RevokeCacheSecurityGroupIngress = actions.ElasticacheRevokeCacheSecurityGroupIngress()


class ElasticBeanstalk:
    def __init__(self):
        self.all = IamAction("elasticbeanstalk", all=True)
        self.AbortEnvironmentUpdate = actions.ElasticbeanstalkAbortEnvironmentUpdate()
        self.ApplyEnvironmentManagedAction = actions.ElasticbeanstalkApplyEnvironmentManagedAction()
        self.CheckDNSAvailability = actions.ElasticbeanstalkCheckDNSAvailability()
        self.ComposeEnvironments = actions.ElasticbeanstalkComposeEnvironments()
        self.CreateApplication = actions.ElasticbeanstalkCreateApplication()
        self.CreateApplicationVersion = actions.ElasticbeanstalkCreateApplicationVersion()
        self.CreateConfigurationTemplate = actions.ElasticbeanstalkCreateConfigurationTemplate()
        self.CreateEnvironment = actions.ElasticbeanstalkCreateEnvironment()
        self.CreatePlatformVersion = actions.ElasticbeanstalkCreatePlatformVersion()
        self.CreateStorageLocation = actions.ElasticbeanstalkCreateStorageLocation()
        self.DeleteApplication = actions.ElasticbeanstalkDeleteApplication()
        self.DeleteApplicationVersion = actions.ElasticbeanstalkDeleteApplicationVersion()
        self.DeleteConfigurationTemplate = actions.ElasticbeanstalkDeleteConfigurationTemplate()
        self.DeleteEnvironmentConfiguration = actions.ElasticbeanstalkDeleteEnvironmentConfiguration()
        self.DeletePlatformVersion = actions.ElasticbeanstalkDeletePlatformVersion()
        self.DescribeApplicationVersions = actions.ElasticbeanstalkDescribeApplicationVersions()
        self.DescribeApplications = actions.ElasticbeanstalkDescribeApplications()
        self.DescribeConfigurationOptions = actions.ElasticbeanstalkDescribeConfigurationOptions()
        self.DescribeConfigurationSettings = actions.ElasticbeanstalkDescribeConfigurationSettings()
        self.DescribeEnvironmentHealth = actions.ElasticbeanstalkDescribeEnvironmentHealth()
        self.DescribeEnvironmentManagedActionHistory = actions.ElasticbeanstalkDescribeEnvironmentManagedActionHistory()
        self.DescribeEnvironmentManagedActions = actions.ElasticbeanstalkDescribeEnvironmentManagedActions()
        self.DescribeEnvironmentResources = actions.ElasticbeanstalkDescribeEnvironmentResources()
        self.DescribeEnvironments = actions.ElasticbeanstalkDescribeEnvironments()
        self.DescribeEvents = actions.ElasticbeanstalkDescribeEvents()
        self.DescribeInstancesHealth = actions.ElasticbeanstalkDescribeInstancesHealth()
        self.DescribePlatformVersion = actions.ElasticbeanstalkDescribePlatformVersion()
        self.ListAvailableSolutionStacks = actions.ElasticbeanstalkListAvailableSolutionStacks()
        self.ListPlatformVersions = actions.ElasticbeanstalkListPlatformVersions()
        self.RebuildEnvironment = actions.ElasticbeanstalkRebuildEnvironment()
        self.RequestEnvironmentInfo = actions.ElasticbeanstalkRequestEnvironmentInfo()
        self.RestartAppServer = actions.ElasticbeanstalkRestartAppServer()
        self.RetrieveEnvironmentInfo = actions.ElasticbeanstalkRetrieveEnvironmentInfo()
        self.SwapEnvironmentCNAMEs = actions.ElasticbeanstalkSwapEnvironmentCNAMEs()
        self.TerminateEnvironment = actions.ElasticbeanstalkTerminateEnvironment()
        self.UpdateApplication = actions.ElasticbeanstalkUpdateApplication()
        self.UpdateApplicationResourceLifecycle = actions.ElasticbeanstalkUpdateApplicationResourceLifecycle()
        self.UpdateApplicationVersion = actions.ElasticbeanstalkUpdateApplicationVersion()
        self.UpdateConfigurationTemplate = actions.ElasticbeanstalkUpdateConfigurationTemplate()
        self.UpdateEnvironment = actions.ElasticbeanstalkUpdateEnvironment()
        self.ValidateConfigurationSettings = actions.ElasticbeanstalkValidateConfigurationSettings()


class ElasticFileSystem:
    def __init__(self):
        self.all = IamAction("elasticfilesystem", all=True)
        self.CreateFileSystem = actions.ElasticfilesystemCreateFileSystem()
        self.CreateMountTarget = actions.ElasticfilesystemCreateMountTarget()
        self.CreateTags = actions.ElasticfilesystemCreateTags()
        self.DeleteFileSystem = actions.ElasticfilesystemDeleteFileSystem()
        self.DeleteMountTarget = actions.ElasticfilesystemDeleteMountTarget()
        self.DeleteTags = actions.ElasticfilesystemDeleteTags()
        self.DescribeFileSystems = actions.ElasticfilesystemDescribeFileSystems()
        self.DescribeMountTargetSecurityGroups = actions.ElasticfilesystemDescribeMountTargetSecurityGroups()
        self.DescribeMountTargets = actions.ElasticfilesystemDescribeMountTargets()
        self.DescribeTags = actions.ElasticfilesystemDescribeTags()
        self.ModifyMountTargetSecurityGroups = actions.ElasticfilesystemModifyMountTargetSecurityGroups()


class ElasticLoadBalancing:
    def __init__(self):
        self.all = IamAction("elasticloadbalancing", all=True)
        self.AddTags = actions.ElasticloadbalancingAddTags()
        self.ApplySecurityGroupsToLoadBalancer = actions.ElasticloadbalancingApplySecurityGroupsToLoadBalancer()
        self.AttachLoadBalancerToSubnets = actions.ElasticloadbalancingAttachLoadBalancerToSubnets()
        self.ConfigureHealthCheck = actions.ElasticloadbalancingConfigureHealthCheck()
        self.CreateAppCookieStickinessPolicy = actions.ElasticloadbalancingCreateAppCookieStickinessPolicy()
        self.CreateLBCookieStickinessPolicy = actions.ElasticloadbalancingCreateLBCookieStickinessPolicy()
        self.CreateListener = actions.ElasticloadbalancingCreateListener()
        self.CreateLoadBalancer = actions.ElasticloadbalancingCreateLoadBalancer()
        self.CreateLoadBalancerListeners = actions.ElasticloadbalancingCreateLoadBalancerListeners()
        self.CreateLoadBalancerPolicy = actions.ElasticloadbalancingCreateLoadBalancerPolicy()
        self.CreateRule = actions.ElasticloadbalancingCreateRule()
        self.CreateTargetGroup = actions.ElasticloadbalancingCreateTargetGroup()
        self.DeleteListener = actions.ElasticloadbalancingDeleteListener()
        self.DeleteLoadBalancer = actions.ElasticloadbalancingDeleteLoadBalancer()
        self.DeleteLoadBalancerListeners = actions.ElasticloadbalancingDeleteLoadBalancerListeners()
        self.DeleteLoadBalancerPolicy = actions.ElasticloadbalancingDeleteLoadBalancerPolicy()
        self.DeleteRule = actions.ElasticloadbalancingDeleteRule()
        self.DeleteTargetGroup = actions.ElasticloadbalancingDeleteTargetGroup()
        self.DeregisterInstancesFromLoadBalancer = actions.ElasticloadbalancingDeregisterInstancesFromLoadBalancer()
        self.DeregisterTargets = actions.ElasticloadbalancingDeregisterTargets()
        self.DescribeInstanceHealth = actions.ElasticloadbalancingDescribeInstanceHealth()
        self.DescribeListeners = actions.ElasticloadbalancingDescribeListeners()
        self.DescribeLoadBalancerAttributes = actions.ElasticloadbalancingDescribeLoadBalancerAttributes()
        self.DescribeLoadBalancerPolicies = actions.ElasticloadbalancingDescribeLoadBalancerPolicies()
        self.DescribeLoadBalancerPolicyTypes = actions.ElasticloadbalancingDescribeLoadBalancerPolicyTypes()
        self.DescribeLoadBalancers = actions.ElasticloadbalancingDescribeLoadBalancers()
        self.DescribeRules = actions.ElasticloadbalancingDescribeRules()
        self.DescribeSSLPolicies = actions.ElasticloadbalancingDescribeSSLPolicies()
        self.DescribeTags = actions.ElasticloadbalancingDescribeTags()
        self.DescribeTargetGroupAttributes = actions.ElasticloadbalancingDescribeTargetGroupAttributes()
        self.DescribeTargetGroups = actions.ElasticloadbalancingDescribeTargetGroups()
        self.DescribeTargetHealth = actions.ElasticloadbalancingDescribeTargetHealth()
        self.DetachLoadBalancerFromSubnets = actions.ElasticloadbalancingDetachLoadBalancerFromSubnets()
        self.DisableAvailabilityZonesForLoadBalancer = actions.ElasticloadbalancingDisableAvailabilityZonesForLoadBalancer()
        self.EnableAvailabilityZonesForLoadBalancer = actions.ElasticloadbalancingEnableAvailabilityZonesForLoadBalancer()
        self.ModifyListener = actions.ElasticloadbalancingModifyListener()
        self.ModifyLoadBalancerAttributes = actions.ElasticloadbalancingModifyLoadBalancerAttributes()
        self.ModifyRule = actions.ElasticloadbalancingModifyRule()
        self.ModifyTargetGroup = actions.ElasticloadbalancingModifyTargetGroup()
        self.ModifyTargetGroupAttributes = actions.ElasticloadbalancingModifyTargetGroupAttributes()
        self.RegisterInstancesWithLoadBalancer = actions.ElasticloadbalancingRegisterInstancesWithLoadBalancer()
        self.RegisterTargets = actions.ElasticloadbalancingRegisterTargets()
        self.RemoveTags = actions.ElasticloadbalancingRemoveTags()
        self.SetIpAddressType = actions.ElasticloadbalancingSetIpAddressType()
        self.SetLoadBalancerListenerSSLCertificate = actions.ElasticloadbalancingSetLoadBalancerListenerSSLCertificate()
        self.SetLoadBalancerPoliciesForBackendServer = actions.ElasticloadbalancingSetLoadBalancerPoliciesForBackendServer()
        self.SetLoadBalancerPoliciesOfListener = actions.ElasticloadbalancingSetLoadBalancerPoliciesOfListener()
        self.SetRulePriorities = actions.ElasticloadbalancingSetRulePriorities()
        self.SetSecurityGroups = actions.ElasticloadbalancingSetSecurityGroups()
        self.SetSubnets = actions.ElasticloadbalancingSetSubnets()


class ElasticMapReduce:
    def __init__(self):
        self.all = IamAction("elasticmapreduce", all=True)
        self.AddInstanceGroups = actions.ElasticmapreduceAddInstanceGroups()
        self.AddJobFlowSteps = actions.ElasticmapreduceAddJobFlowSteps()
        self.AddTags = actions.ElasticmapreduceAddTags()
        self.CancelSteps = actions.ElasticmapreduceCancelSteps()
        self.CreateSecurityConfiguration = actions.ElasticmapreduceCreateSecurityConfiguration()
        self.DeleteSecurityConfiguration = actions.ElasticmapreduceDeleteSecurityConfiguration()
        self.DescribeCluster = actions.ElasticmapreduceDescribeCluster()
        self.DescribeJobFlows = actions.ElasticmapreduceDescribeJobFlows()
        self.DescribeSecurityConfiguration = actions.ElasticmapreduceDescribeSecurityConfiguration()
        self.DescribeStep = actions.ElasticmapreduceDescribeStep()
        self.ListBootstrapActions = actions.ElasticmapreduceListBootstrapActions()
        self.ListClusters = actions.ElasticmapreduceListClusters()
        self.ListInstanceGroups = actions.ElasticmapreduceListInstanceGroups()
        self.ListInstances = actions.ElasticmapreduceListInstances()
        self.ListSecurityConfigurations = actions.ElasticmapreduceListSecurityConfigurations()
        self.ListSteps = actions.ElasticmapreduceListSteps()
        self.ModifyInstanceGroups = actions.ElasticmapreduceModifyInstanceGroups()
        self.PutAutoScalingPolicy = actions.ElasticmapreducePutAutoScalingPolicy()
        self.RemoveAutoScalingPolicy = actions.ElasticmapreduceRemoveAutoScalingPolicy()
        self.RemoveTags = actions.ElasticmapreduceRemoveTags()
        self.RunJobFlow = actions.ElasticmapreduceRunJobFlow()
        self.SetTerminationProtection = actions.ElasticmapreduceSetTerminationProtection()
        self.SetVisibleToAllUsers = actions.ElasticmapreduceSetVisibleToAllUsers()
        self.TerminateJobFlows = actions.ElasticmapreduceTerminateJobFlows()
        self.ViewEventsFromAllClustersInConsole = actions.ElasticmapreduceViewEventsFromAllClustersInConsole()


class ElasticTranscoder:
    def __init__(self):
        self.all = IamAction("elastictranscoder", all=True)
        self.CancelJob = actions.ElastictranscoderCancelJob()
        self.CreateJob = actions.ElastictranscoderCreateJob()
        self.CreatePipeline = actions.ElastictranscoderCreatePipeline()
        self.CreatePreset = actions.ElastictranscoderCreatePreset()
        self.DeletePipeline = actions.ElastictranscoderDeletePipeline()
        self.DeletePreset = actions.ElastictranscoderDeletePreset()
        self.ListJobsByPipeline = actions.ElastictranscoderListJobsByPipeline()
        self.ListJobsByStatus = actions.ElastictranscoderListJobsByStatus()
        self.ListPipelines = actions.ElastictranscoderListPipelines()
        self.ListPresets = actions.ElastictranscoderListPresets()
        self.ReadJob = actions.ElastictranscoderReadJob()
        self.ReadPipeline = actions.ElastictranscoderReadPipeline()
        self.ReadPreset = actions.ElastictranscoderReadPreset()
        self.TestRole = actions.ElastictranscoderTestRole()
        self.UpdatePipeline = actions.ElastictranscoderUpdatePipeline()
        self.UpdatePipelineNotifications = actions.ElastictranscoderUpdatePipelineNotifications()
        self.UpdatePipelineStatus = actions.ElastictranscoderUpdatePipelineStatus()


class Es:
    def __init__(self):
        self.all = IamAction("es", all=True)
        self.AddTags = actions.EsAddTags()
        self.CreateElasticsearchDomain = actions.EsCreateElasticsearchDomain()
        self.DeleteElasticsearchDomain = actions.EsDeleteElasticsearchDomain()
        self.DescribeElasticsearchDomain = actions.EsDescribeElasticsearchDomain()
        self.DescribeElasticsearchDomainConfig = actions.EsDescribeElasticsearchDomainConfig()
        self.DescribeElasticsearchDomains = actions.EsDescribeElasticsearchDomains()
        self.ESHttpDelete = actions.EsESHttpDelete()
        self.ESHttpGet = actions.EsESHttpGet()
        self.ESHttpHead = actions.EsESHttpHead()
        self.ESHttpPost = actions.EsESHttpPost()
        self.ESHttpPut = actions.EsESHttpPut()
        self.ListDomainNames = actions.EsListDomainNames()
        self.ListTags = actions.EsListTags()
        self.RemoveTags = actions.EsRemoveTags()
        self.UpdateElasticsearchDomainConfig = actions.EsUpdateElasticsearchDomainConfig()


class Events:
    def __init__(self):
        self.all = IamAction("events", all=True)
        self.DeleteRule = actions.EventsDeleteRule()
        self.DescribeRule = actions.EventsDescribeRule()
        self.DisableRule = actions.EventsDisableRule()
        self.EnableRule = actions.EventsEnableRule()
        self.ListRuleNamesByTarget = actions.EventsListRuleNamesByTarget()
        self.ListRules = actions.EventsListRules()
        self.ListTargetsByRule = actions.EventsListTargetsByRule()
        self.PutEvents = actions.EventsPutEvents()
        self.PutRule = actions.EventsPutRule()
        self.PutTargets = actions.EventsPutTargets()
        self.RemoveTargets = actions.EventsRemoveTargets()
        self.TestEventPattern = actions.EventsTestEventPattern()


class ExecuteApi:
    def __init__(self):
        self.all = IamAction("execute-api", all=True)
        self.InvalidateCache = actions.ExecuteApiInvalidateCache()
        self.Invoke = actions.ExecuteApiInvoke()


class Firehose:
    def __init__(self):
        self.all = IamAction("firehose", all=True)
        self.CreateDeliveryStream = actions.FirehoseCreateDeliveryStream()
        self.DeleteDeliveryStream = actions.FirehoseDeleteDeliveryStream()
        self.DescribeDeliveryStream = actions.FirehoseDescribeDeliveryStream()
        self.ListDeliveryStreams = actions.FirehoseListDeliveryStreams()
        self.PutRecord = actions.FirehosePutRecord()
        self.PutRecordBatch = actions.FirehosePutRecordBatch()
        self.UpdateDestination = actions.FirehoseUpdateDestination()


class Freertos:
    def __init__(self):
        self.all = IamAction("freertos", all=True)
        self.CreateSoftwareConfiguration = actions.FreertosCreateSoftwareConfiguration()
        self.DeleteSoftwareConfiguration = actions.FreertosDeleteSoftwareConfiguration()
        self.DescribeHardwarePlatform = actions.FreertosDescribeHardwarePlatform()
        self.DescribeSoftwareConfiguration = actions.FreertosDescribeSoftwareConfiguration()
        self.GetSoftwareURL = actions.FreertosGetSoftwareURL()
        self.GetSoftwareURLForConfiguration = actions.FreertosGetSoftwareURLForConfiguration()
        self.ListFreeRTOSVersions = actions.FreertosListFreeRTOSVersions()
        self.ListHardwarePlatforms = actions.FreertosListHardwarePlatforms()
        self.ListHardwareVendors = actions.FreertosListHardwareVendors()
        self.ListSoftwareConfigurations = actions.FreertosListSoftwareConfigurations()
        self.UpdateSoftwareConfiguration = actions.FreertosUpdateSoftwareConfiguration()


class GameLift:
    def __init__(self):
        self.all = IamAction("gamelift", all=True)
        self.CreateAlias = actions.GameliftCreateAlias()
        self.CreateBuild = actions.GameliftCreateBuild()
        self.CreateFleet = actions.GameliftCreateFleet()
        self.CreateGameSession = actions.GameliftCreateGameSession()
        self.CreatePlayerSession = actions.GameliftCreatePlayerSession()
        self.CreatePlayerSessions = actions.GameliftCreatePlayerSessions()
        self.DeleteAlias = actions.GameliftDeleteAlias()
        self.DeleteBuild = actions.GameliftDeleteBuild()
        self.DeleteFleet = actions.GameliftDeleteFleet()
        self.DeleteScalingPolicy = actions.GameliftDeleteScalingPolicy()
        self.DescribeAlias = actions.GameliftDescribeAlias()
        self.DescribeBuild = actions.GameliftDescribeBuild()
        self.DescribeEC2InstanceLimits = actions.GameliftDescribeEC2InstanceLimits()
        self.DescribeFleetAttributes = actions.GameliftDescribeFleetAttributes()
        self.DescribeFleetCapacity = actions.GameliftDescribeFleetCapacity()
        self.DescribeFleetEvents = actions.GameliftDescribeFleetEvents()
        self.DescribeFleetPortSettings = actions.GameliftDescribeFleetPortSettings()
        self.DescribeFleetUtilization = actions.GameliftDescribeFleetUtilization()
        self.DescribeGameSessionDetails = actions.GameliftDescribeGameSessionDetails()
        self.DescribeGameSessions = actions.GameliftDescribeGameSessions()
        self.DescribeInstances = actions.GameliftDescribeInstances()
        self.DescribePlayerSessions = actions.GameliftDescribePlayerSessions()
        self.DescribeRuntimeConfiguration = actions.GameliftDescribeRuntimeConfiguration()
        self.DescribeScalingPolicies = actions.GameliftDescribeScalingPolicies()
        self.GetGameSessionLogUrl = actions.GameliftGetGameSessionLogUrl()
        self.GetInstanceAccess = actions.GameliftGetInstanceAccess()
        self.ListAliases = actions.GameliftListAliases()
        self.ListBuilds = actions.GameliftListBuilds()
        self.ListFleets = actions.GameliftListFleets()
        self.PutScalingPolicy = actions.GameliftPutScalingPolicy()
        self.RequestUploadCredentials = actions.GameliftRequestUploadCredentials()
        self.ResolveAlias = actions.GameliftResolveAlias()
        self.SearchGameSessions = actions.GameliftSearchGameSessions()
        self.UpdateAlias = actions.GameliftUpdateAlias()
        self.UpdateBuild = actions.GameliftUpdateBuild()
        self.UpdateFleetAttributes = actions.GameliftUpdateFleetAttributes()
        self.UpdateFleetCapacity = actions.GameliftUpdateFleetCapacity()
        self.UpdateFleetPortSettings = actions.GameliftUpdateFleetPortSettings()
        self.UpdateGameSession = actions.GameliftUpdateGameSession()
        self.UpdateRuntimeConfiguration = actions.GameliftUpdateRuntimeConfiguration()


class Glacier:
    def __init__(self):
        self.all = IamAction("glacier", all=True)
        self.AbortMultipartUpload = actions.GlacierAbortMultipartUpload()
        self.AbortVaultLock = actions.GlacierAbortVaultLock()
        self.AddTagsToVault = actions.GlacierAddTagsToVault()
        self.CompleteMultipartUpload = actions.GlacierCompleteMultipartUpload()
        self.CompleteVaultLock = actions.GlacierCompleteVaultLock()
        self.CreateVault = actions.GlacierCreateVault()
        self.DeleteArchive = actions.GlacierDeleteArchive()
        self.DeleteVault = actions.GlacierDeleteVault()
        self.DeleteVaultAccessPolicy = actions.GlacierDeleteVaultAccessPolicy()
        self.DeleteVaultNotifications = actions.GlacierDeleteVaultNotifications()
        self.DescribeJob = actions.GlacierDescribeJob()
        self.DescribeVault = actions.GlacierDescribeVault()
        self.GetDataRetrievalPolicy = actions.GlacierGetDataRetrievalPolicy()
        self.GetJobOutput = actions.GlacierGetJobOutput()
        self.GetVaultAccessPolicy = actions.GlacierGetVaultAccessPolicy()
        self.GetVaultLock = actions.GlacierGetVaultLock()
        self.GetVaultNotifications = actions.GlacierGetVaultNotifications()
        self.InitiateJob = actions.GlacierInitiateJob()
        self.InitiateMultipartUpload = actions.GlacierInitiateMultipartUpload()
        self.InitiateVaultLock = actions.GlacierInitiateVaultLock()
        self.ListJobs = actions.GlacierListJobs()
        self.ListMultipartUploads = actions.GlacierListMultipartUploads()
        self.ListParts = actions.GlacierListParts()
        self.ListProvisionedCapacity = actions.GlacierListProvisionedCapacity()
        self.ListTagsForVault = actions.GlacierListTagsForVault()
        self.ListVaults = actions.GlacierListVaults()
        self.PurchaseProvisionedCapacity = actions.GlacierPurchaseProvisionedCapacity()
        self.RemoveTagsFromVault = actions.GlacierRemoveTagsFromVault()
        self.SetDataRetrievalPolicy = actions.GlacierSetDataRetrievalPolicy()
        self.SetVaultAccessPolicy = actions.GlacierSetVaultAccessPolicy()
        self.SetVaultNotifications = actions.GlacierSetVaultNotifications()
        self.UploadArchive = actions.GlacierUploadArchive()
        self.UploadMultipartPart = actions.GlacierUploadMultipartPart()


class Glue:
    def __init__(self):
        self.all = IamAction("glue", all=True)
        self.BatchCreatePartition = actions.GlueBatchCreatePartition()
        self.BatchDeleteConnection = actions.GlueBatchDeleteConnection()
        self.BatchDeletePartition = actions.GlueBatchDeletePartition()
        self.BatchDeleteTable = actions.GlueBatchDeleteTable()
        self.BatchGetPartition = actions.GlueBatchGetPartition()
        self.CreateClassifier = actions.GlueCreateClassifier()
        self.CreateConnection = actions.GlueCreateConnection()
        self.CreateCrawler = actions.GlueCreateCrawler()
        self.CreateDatabase = actions.GlueCreateDatabase()
        self.CreateDevEndpoint = actions.GlueCreateDevEndpoint()
        self.CreateJob = actions.GlueCreateJob()
        self.CreatePartition = actions.GlueCreatePartition()
        self.CreateScript = actions.GlueCreateScript()
        self.CreateTable = actions.GlueCreateTable()
        self.CreateTrigger = actions.GlueCreateTrigger()
        self.CreateUserDefinedFunction = actions.GlueCreateUserDefinedFunction()
        self.DeleteClassifier = actions.GlueDeleteClassifier()
        self.DeleteConnection = actions.GlueDeleteConnection()
        self.DeleteCrawler = actions.GlueDeleteCrawler()
        self.DeleteDatabase = actions.GlueDeleteDatabase()
        self.DeleteDevEndpoint = actions.GlueDeleteDevEndpoint()
        self.DeleteJob = actions.GlueDeleteJob()
        self.DeletePartition = actions.GlueDeletePartition()
        self.DeleteTable = actions.GlueDeleteTable()
        self.DeleteTrigger = actions.GlueDeleteTrigger()
        self.DeleteUserDefinedFunction = actions.GlueDeleteUserDefinedFunction()
        self.GetCatalogImportStatus = actions.GlueGetCatalogImportStatus()
        self.GetClassifier = actions.GlueGetClassifier()
        self.GetClassifiers = actions.GlueGetClassifiers()
        self.GetConnection = actions.GlueGetConnection()
        self.GetConnections = actions.GlueGetConnections()
        self.GetCrawler = actions.GlueGetCrawler()
        self.GetCrawlerMetrics = actions.GlueGetCrawlerMetrics()
        self.GetCrawlers = actions.GlueGetCrawlers()
        self.GetDatabase = actions.GlueGetDatabase()
        self.GetDatabases = actions.GlueGetDatabases()
        self.GetDataflowGraph = actions.GlueGetDataflowGraph()
        self.GetDevEndpoint = actions.GlueGetDevEndpoint()
        self.GetDevEndpoints = actions.GlueGetDevEndpoints()
        self.GetJob = actions.GlueGetJob()
        self.GetJobRun = actions.GlueGetJobRun()
        self.GetJobRuns = actions.GlueGetJobRuns()
        self.GetJobs = actions.GlueGetJobs()
        self.GetMapping = actions.GlueGetMapping()
        self.GetPartition = actions.GlueGetPartition()
        self.GetPartitions = actions.GlueGetPartitions()
        self.GetPlan = actions.GlueGetPlan()
        self.GetTable = actions.GlueGetTable()
        self.GetTableVersions = actions.GlueGetTableVersions()
        self.GetTables = actions.GlueGetTables()
        self.GetTrigger = actions.GlueGetTrigger()
        self.GetTriggers = actions.GlueGetTriggers()
        self.GetUserDefinedFunction = actions.GlueGetUserDefinedFunction()
        self.GetUserDefinedFunctions = actions.GlueGetUserDefinedFunctions()
        self.ImportCatalogToGlue = actions.GlueImportCatalogToGlue()
        self.ResetJobBookmark = actions.GlueResetJobBookmark()
        self.StartCrawler = actions.GlueStartCrawler()
        self.StartCrawlerSchedule = actions.GlueStartCrawlerSchedule()
        self.StartJobRun = actions.GlueStartJobRun()
        self.StartTrigger = actions.GlueStartTrigger()
        self.StopCrawler = actions.GlueStopCrawler()
        self.StopCrawlerSchedule = actions.GlueStopCrawlerSchedule()
        self.StopTrigger = actions.GlueStopTrigger()
        self.UpdateClassifier = actions.GlueUpdateClassifier()
        self.UpdateConnection = actions.GlueUpdateConnection()
        self.UpdateCrawler = actions.GlueUpdateCrawler()
        self.UpdateDatabase = actions.GlueUpdateDatabase()
        self.UpdateDevEndpoint = actions.GlueUpdateDevEndpoint()
        self.UpdateJob = actions.GlueUpdateJob()
        self.UpdatePartition = actions.GlueUpdatePartition()
        self.UpdateTable = actions.GlueUpdateTable()
        self.UpdateTrigger = actions.GlueUpdateTrigger()
        self.UpdateUserDefinedFunction = actions.GlueUpdateUserDefinedFunction()


class Greengrass:
    def __init__(self):
        self.all = IamAction("greengrass", all=True)
        self.AssociateRoleToGroup = actions.GreengrassAssociateRoleToGroup()
        self.AssociateServiceRoleToAccount = actions.GreengrassAssociateServiceRoleToAccount()
        self.CreateCoreDefinition = actions.GreengrassCreateCoreDefinition()
        self.CreateCoreDefinitionVersion = actions.GreengrassCreateCoreDefinitionVersion()
        self.CreateDeployment = actions.GreengrassCreateDeployment()
        self.CreateDeviceDefinition = actions.GreengrassCreateDeviceDefinition()
        self.CreateDeviceDefinitionVersion = actions.GreengrassCreateDeviceDefinitionVersion()
        self.CreateFunctionDefinition = actions.GreengrassCreateFunctionDefinition()
        self.CreateFunctionDefinitionVersion = actions.GreengrassCreateFunctionDefinitionVersion()
        self.CreateGroup = actions.GreengrassCreateGroup()
        self.CreateGroupCertificateAuthority = actions.GreengrassCreateGroupCertificateAuthority()
        self.CreateGroupVersion = actions.GreengrassCreateGroupVersion()
        self.CreateLoggerDefinition = actions.GreengrassCreateLoggerDefinition()
        self.CreateLoggerDefinitionVersion = actions.GreengrassCreateLoggerDefinitionVersion()
        self.CreateResourceDefinition = actions.GreengrassCreateResourceDefinition()
        self.CreateResourceDefinitionVersion = actions.GreengrassCreateResourceDefinitionVersion()
        self.CreateSoftwareUpdateJob = actions.GreengrassCreateSoftwareUpdateJob()
        self.CreateSubscriptionDefinition = actions.GreengrassCreateSubscriptionDefinition()
        self.CreateSubscriptionDefinitionVersion = actions.GreengrassCreateSubscriptionDefinitionVersion()
        self.DeleteCoreDefinition = actions.GreengrassDeleteCoreDefinition()
        self.DeleteDeviceDefinition = actions.GreengrassDeleteDeviceDefinition()
        self.DeleteFunctionDefinition = actions.GreengrassDeleteFunctionDefinition()
        self.DeleteGroup = actions.GreengrassDeleteGroup()
        self.DeleteLoggerDefinition = actions.GreengrassDeleteLoggerDefinition()
        self.DeleteResourceDefinition = actions.GreengrassDeleteResourceDefinition()
        self.DeleteSubscriptionDefinition = actions.GreengrassDeleteSubscriptionDefinition()
        self.DisassociateRoleFromGroup = actions.GreengrassDisassociateRoleFromGroup()
        self.DisassociateServiceRoleFromAccount = actions.GreengrassDisassociateServiceRoleFromAccount()
        self.GetAssociatedRole = actions.GreengrassGetAssociatedRole()
        self.GetConnectivityInfo = actions.GreengrassGetConnectivityInfo()
        self.GetCoreDefinition = actions.GreengrassGetCoreDefinition()
        self.GetCoreDefinitionVersion = actions.GreengrassGetCoreDefinitionVersion()
        self.GetDeploymentStatus = actions.GreengrassGetDeploymentStatus()
        self.GetDeviceDefinition = actions.GreengrassGetDeviceDefinition()
        self.GetDeviceDefinitionVersion = actions.GreengrassGetDeviceDefinitionVersion()
        self.GetFunctionDefinition = actions.GreengrassGetFunctionDefinition()
        self.GetFunctionDefinitionVersion = actions.GreengrassGetFunctionDefinitionVersion()
        self.GetGroup = actions.GreengrassGetGroup()
        self.GetGroupCertificateAuthority = actions.GreengrassGetGroupCertificateAuthority()
        self.GetGroupCertificateConfiguration = actions.GreengrassGetGroupCertificateConfiguration()
        self.GetGroupVersion = actions.GreengrassGetGroupVersion()
        self.GetLoggerDefinition = actions.GreengrassGetLoggerDefinition()
        self.GetLoggerDefinitionVersion = actions.GreengrassGetLoggerDefinitionVersion()
        self.GetResourceDefinition = actions.GreengrassGetResourceDefinition()
        self.GetResourceDefinitionVersion = actions.GreengrassGetResourceDefinitionVersion()
        self.GetServiceRoleForAccount = actions.GreengrassGetServiceRoleForAccount()
        self.GetSubscriptionDefinition = actions.GreengrassGetSubscriptionDefinition()
        self.GetSubscriptionDefinitionVersion = actions.GreengrassGetSubscriptionDefinitionVersion()
        self.ListCoreDefinitionVersions = actions.GreengrassListCoreDefinitionVersions()
        self.ListCoreDefinitions = actions.GreengrassListCoreDefinitions()
        self.ListDeployments = actions.GreengrassListDeployments()
        self.ListDeviceDefinitionVersions = actions.GreengrassListDeviceDefinitionVersions()
        self.ListDeviceDefinitions = actions.GreengrassListDeviceDefinitions()
        self.ListFunctionDefinitionVersions = actions.GreengrassListFunctionDefinitionVersions()
        self.ListFunctionDefinitions = actions.GreengrassListFunctionDefinitions()
        self.ListGroupCertificateAuthorities = actions.GreengrassListGroupCertificateAuthorities()
        self.ListGroupVersions = actions.GreengrassListGroupVersions()
        self.ListGroups = actions.GreengrassListGroups()
        self.ListLoggerDefinitionVersions = actions.GreengrassListLoggerDefinitionVersions()
        self.ListLoggerDefinitions = actions.GreengrassListLoggerDefinitions()
        self.ListResourceDefinitionVersions = actions.GreengrassListResourceDefinitionVersions()
        self.ListResourceDefinitions = actions.GreengrassListResourceDefinitions()
        self.ListSubscriptionDefinitionVersions = actions.GreengrassListSubscriptionDefinitionVersions()
        self.ListSubscriptionDefinitions = actions.GreengrassListSubscriptionDefinitions()
        self.ResetDeployments = actions.GreengrassResetDeployments()
        self.UpdateConnectivityInfo = actions.GreengrassUpdateConnectivityInfo()
        self.UpdateCoreDefinition = actions.GreengrassUpdateCoreDefinition()
        self.UpdateDeviceDefinition = actions.GreengrassUpdateDeviceDefinition()
        self.UpdateFunctionDefinition = actions.GreengrassUpdateFunctionDefinition()
        self.UpdateGroup = actions.GreengrassUpdateGroup()
        self.UpdateGroupCertificateConfiguration = actions.GreengrassUpdateGroupCertificateConfiguration()
        self.UpdateLoggerDefinition = actions.GreengrassUpdateLoggerDefinition()
        self.UpdateResourceDefinition = actions.GreengrassUpdateResourceDefinition()
        self.UpdateSubscriptionDefinition = actions.GreengrassUpdateSubscriptionDefinition()


class GuardDuty:
    def __init__(self):
        self.all = IamAction("guardduty", all=True)
        self.AcceptInvitation = actions.GuarddutyAcceptInvitation()
        self.ArchiveFindings = actions.GuarddutyArchiveFindings()
        self.CreateDetector = actions.GuarddutyCreateDetector()
        self.CreateIPSet = actions.GuarddutyCreateIPSet()
        self.CreateMembers = actions.GuarddutyCreateMembers()
        self.CreateSampleFindings = actions.GuarddutyCreateSampleFindings()
        self.CreateThreatIntelSet = actions.GuarddutyCreateThreatIntelSet()
        self.DeclineInvitations = actions.GuarddutyDeclineInvitations()
        self.DeleteDetector = actions.GuarddutyDeleteDetector()
        self.DeleteIPSet = actions.GuarddutyDeleteIPSet()
        self.DeleteInvitations = actions.GuarddutyDeleteInvitations()
        self.DeleteMembers = actions.GuarddutyDeleteMembers()
        self.DeleteThreatIntelSet = actions.GuarddutyDeleteThreatIntelSet()
        self.DisassociateFromMasterAccount = actions.GuarddutyDisassociateFromMasterAccount()
        self.DisassociateMembers = actions.GuarddutyDisassociateMembers()
        self.GetDetector = actions.GuarddutyGetDetector()
        self.GetFindings = actions.GuarddutyGetFindings()
        self.GetFindingsStatistics = actions.GuarddutyGetFindingsStatistics()
        self.GetIPSet = actions.GuarddutyGetIPSet()
        self.GetInvitationsCount = actions.GuarddutyGetInvitationsCount()
        self.GetMasterAccount = actions.GuarddutyGetMasterAccount()
        self.GetMembers = actions.GuarddutyGetMembers()
        self.GetThreatIntelSet = actions.GuarddutyGetThreatIntelSet()
        self.InviteMembers = actions.GuarddutyInviteMembers()
        self.ListDetectors = actions.GuarddutyListDetectors()
        self.ListFindings = actions.GuarddutyListFindings()
        self.ListIPSets = actions.GuarddutyListIPSets()
        self.ListInvitations = actions.GuarddutyListInvitations()
        self.ListMembers = actions.GuarddutyListMembers()
        self.ListThreatIntelSets = actions.GuarddutyListThreatIntelSets()
        self.StartMonitoringMembers = actions.GuarddutyStartMonitoringMembers()
        self.StopMonitoringMembers = actions.GuarddutyStopMonitoringMembers()
        self.UnarchiveFindings = actions.GuarddutyUnarchiveFindings()
        self.UpdateDetector = actions.GuarddutyUpdateDetector()
        self.UpdateFindingsFeedback = actions.GuarddutyUpdateFindingsFeedback()
        self.UpdateIPSet = actions.GuarddutyUpdateIPSet()
        self.UpdateThreatIntelSet = actions.GuarddutyUpdateThreatIntelSet()


class Health:
    def __init__(self):
        self.all = IamAction("health", all=True)
        self.DescribeAffectedEntities = actions.HealthDescribeAffectedEntities()
        self.DescribeEntityAggregates = actions.HealthDescribeEntityAggregates()
        self.DescribeEventAggregates = actions.HealthDescribeEventAggregates()
        self.DescribeEventDetails = actions.HealthDescribeEventDetails()
        self.DescribeEventTypes = actions.HealthDescribeEventTypes()
        self.DescribeEvents = actions.HealthDescribeEvents()


class Iam:
    def __init__(self):
        self.all = IamAction("iam", all=True)
        self.AddClientIDToOpenIDConnectProvider = actions.IamAddClientIDToOpenIDConnectProvider()
        self.AddRoleToInstanceProfile = actions.IamAddRoleToInstanceProfile()
        self.AddUserToGroup = actions.IamAddUserToGroup()
        self.AttachGroupPolicy = actions.IamAttachGroupPolicy()
        self.AttachRolePolicy = actions.IamAttachRolePolicy()
        self.AttachUserPolicy = actions.IamAttachUserPolicy()
        self.ChangePassword = actions.IamChangePassword()
        self.CreateAccessKey = actions.IamCreateAccessKey()
        self.CreateAccountAlias = actions.IamCreateAccountAlias()
        self.CreateGroup = actions.IamCreateGroup()
        self.CreateInstanceProfile = actions.IamCreateInstanceProfile()
        self.CreateLoginProfile = actions.IamCreateLoginProfile()
        self.CreateOpenIDConnectProvider = actions.IamCreateOpenIDConnectProvider()
        self.CreatePolicy = actions.IamCreatePolicy()
        self.CreatePolicyVersion = actions.IamCreatePolicyVersion()
        self.CreateRole = actions.IamCreateRole()
        self.CreateSAMLProvider = actions.IamCreateSAMLProvider()
        self.CreateServiceLinkedRole = actions.IamCreateServiceLinkedRole()
        self.CreateServiceSpecificCredential = actions.IamCreateServiceSpecificCredential()
        self.CreateUser = actions.IamCreateUser()
        self.CreateVirtualMFADevice = actions.IamCreateVirtualMFADevice()
        self.DeactivateMFADevice = actions.IamDeactivateMFADevice()
        self.DeleteAccessKey = actions.IamDeleteAccessKey()
        self.DeleteAccountAlias = actions.IamDeleteAccountAlias()
        self.DeleteAccountPasswordPolicy = actions.IamDeleteAccountPasswordPolicy()
        self.DeleteGroup = actions.IamDeleteGroup()
        self.DeleteGroupPolicy = actions.IamDeleteGroupPolicy()
        self.DeleteInstanceProfile = actions.IamDeleteInstanceProfile()
        self.DeleteLoginProfile = actions.IamDeleteLoginProfile()
        self.DeleteOpenIDConnectProvider = actions.IamDeleteOpenIDConnectProvider()
        self.DeletePolicy = actions.IamDeletePolicy()
        self.DeletePolicyVersion = actions.IamDeletePolicyVersion()
        self.DeleteRole = actions.IamDeleteRole()
        self.DeleteRolePolicy = actions.IamDeleteRolePolicy()
        self.DeleteSAMLProvider = actions.IamDeleteSAMLProvider()
        self.DeleteSSHPublicKey = actions.IamDeleteSSHPublicKey()
        self.DeleteServerCertificate = actions.IamDeleteServerCertificate()
        self.DeleteServiceLinkedRole = actions.IamDeleteServiceLinkedRole()
        self.DeleteServiceSpecificCredential = actions.IamDeleteServiceSpecificCredential()
        self.DeleteSigningCertificate = actions.IamDeleteSigningCertificate()
        self.DeleteUser = actions.IamDeleteUser()
        self.DeleteUserPolicy = actions.IamDeleteUserPolicy()
        self.DeleteVirtualMFADevice = actions.IamDeleteVirtualMFADevice()
        self.DetachGroupPolicy = actions.IamDetachGroupPolicy()
        self.DetachRolePolicy = actions.IamDetachRolePolicy()
        self.DetachUserPolicy = actions.IamDetachUserPolicy()
        self.EnableMFADevice = actions.IamEnableMFADevice()
        self.GenerateCredentialReport = actions.IamGenerateCredentialReport()
        self.GenerateServiceLastAccessedDetails = actions.IamGenerateServiceLastAccessedDetails()
        self.GetAccessKeyLastUsed = actions.IamGetAccessKeyLastUsed()
        self.GetAccountAuthorizationDetails = actions.IamGetAccountAuthorizationDetails()
        self.GetAccountPasswordPolicy = actions.IamGetAccountPasswordPolicy()
        self.GetAccountSummary = actions.IamGetAccountSummary()
        self.GetContextKeysForCustomPolicy = actions.IamGetContextKeysForCustomPolicy()
        self.GetContextKeysForPrincipalPolicy = actions.IamGetContextKeysForPrincipalPolicy()
        self.GetCredentialReport = actions.IamGetCredentialReport()
        self.GetGroup = actions.IamGetGroup()
        self.GetGroupPolicy = actions.IamGetGroupPolicy()
        self.GetInstanceProfile = actions.IamGetInstanceProfile()
        self.GetLoginProfile = actions.IamGetLoginProfile()
        self.GetOpenIDConnectProvider = actions.IamGetOpenIDConnectProvider()
        self.GetPolicy = actions.IamGetPolicy()
        self.GetPolicyVersion = actions.IamGetPolicyVersion()
        self.GetRole = actions.IamGetRole()
        self.GetRolePolicy = actions.IamGetRolePolicy()
        self.GetSAMLProvider = actions.IamGetSAMLProvider()
        self.GetSSHPublicKey = actions.IamGetSSHPublicKey()
        self.GetServerCertificate = actions.IamGetServerCertificate()
        self.GetServiceLastAccessedDetails = actions.IamGetServiceLastAccessedDetails()
        self.GetServiceLastAccessedDetailsWithEntities = actions.IamGetServiceLastAccessedDetailsWithEntities()
        self.GetServiceLinkedRoleDeletionStatus = actions.IamGetServiceLinkedRoleDeletionStatus()
        self.GetUser = actions.IamGetUser()
        self.GetUserPolicy = actions.IamGetUserPolicy()
        self.ListAccessKeys = actions.IamListAccessKeys()
        self.ListAccountAliases = actions.IamListAccountAliases()
        self.ListAttachedGroupPolicies = actions.IamListAttachedGroupPolicies()
        self.ListAttachedRolePolicies = actions.IamListAttachedRolePolicies()
        self.ListAttachedUserPolicies = actions.IamListAttachedUserPolicies()
        self.ListEntitiesForPolicy = actions.IamListEntitiesForPolicy()
        self.ListGroupPolicies = actions.IamListGroupPolicies()
        self.ListGroups = actions.IamListGroups()
        self.ListGroupsForUser = actions.IamListGroupsForUser()
        self.ListInstanceProfiles = actions.IamListInstanceProfiles()
        self.ListInstanceProfilesForRole = actions.IamListInstanceProfilesForRole()
        self.ListMFADevices = actions.IamListMFADevices()
        self.ListOpenIDConnectProviders = actions.IamListOpenIDConnectProviders()
        self.ListPolicies = actions.IamListPolicies()
        self.ListPoliciesGrantingServiceAccess = actions.IamListPoliciesGrantingServiceAccess()
        self.ListPolicyVersions = actions.IamListPolicyVersions()
        self.ListRolePolicies = actions.IamListRolePolicies()
        self.ListRoles = actions.IamListRoles()
        self.ListSAMLProviders = actions.IamListSAMLProviders()
        self.ListSSHPublicKeys = actions.IamListSSHPublicKeys()
        self.ListServerCertificates = actions.IamListServerCertificates()
        self.ListServiceSpecificCredentials = actions.IamListServiceSpecificCredentials()
        self.ListSigningCertificates = actions.IamListSigningCertificates()
        self.ListUserPolicies = actions.IamListUserPolicies()
        self.ListUsers = actions.IamListUsers()
        self.ListVirtualMFADevices = actions.IamListVirtualMFADevices()
        self.PassRole = actions.IamPassRole()
        self.PutGroupPolicy = actions.IamPutGroupPolicy()
        self.PutRolePolicy = actions.IamPutRolePolicy()
        self.PutUserPolicy = actions.IamPutUserPolicy()
        self.RemoveClientIDFromOpenIDConnectProvider = actions.IamRemoveClientIDFromOpenIDConnectProvider()
        self.RemoveRoleFromInstanceProfile = actions.IamRemoveRoleFromInstanceProfile()
        self.RemoveUserFromGroup = actions.IamRemoveUserFromGroup()
        self.ResetServiceSpecificCredential = actions.IamResetServiceSpecificCredential()
        self.ResyncMFADevice = actions.IamResyncMFADevice()
        self.SetDefaultPolicyVersion = actions.IamSetDefaultPolicyVersion()
        self.SimulateCustomPolicy = actions.IamSimulateCustomPolicy()
        self.SimulatePrincipalPolicy = actions.IamSimulatePrincipalPolicy()
        self.UpdateAccessKey = actions.IamUpdateAccessKey()
        self.UpdateAccountPasswordPolicy = actions.IamUpdateAccountPasswordPolicy()
        self.UpdateAssumeRolePolicy = actions.IamUpdateAssumeRolePolicy()
        self.UpdateGroup = actions.IamUpdateGroup()
        self.UpdateLoginProfile = actions.IamUpdateLoginProfile()
        self.UpdateOpenIDConnectProviderThumbprint = actions.IamUpdateOpenIDConnectProviderThumbprint()
        self.UpdateRoleDescription = actions.IamUpdateRoleDescription()
        self.UpdateSAMLProvider = actions.IamUpdateSAMLProvider()
        self.UpdateSSHPublicKey = actions.IamUpdateSSHPublicKey()
        self.UpdateServerCertificate = actions.IamUpdateServerCertificate()
        self.UpdateServiceSpecificCredential = actions.IamUpdateServiceSpecificCredential()
        self.UpdateSigningCertificate = actions.IamUpdateSigningCertificate()
        self.UpdateUser = actions.IamUpdateUser()
        self.UploadSSHPublicKey = actions.IamUploadSSHPublicKey()
        self.UploadServerCertificate = actions.IamUploadServerCertificate()
        self.UploadSigningCertificate = actions.IamUploadSigningCertificate()


class ImportExport:
    def __init__(self):
        self.all = IamAction("importexport", all=True)
        self.CancelJob = actions.ImportexportCancelJob()
        self.CreateJob = actions.ImportexportCreateJob()
        self.GetShippingLabel = actions.ImportexportGetShippingLabel()
        self.GetStatus = actions.ImportexportGetStatus()
        self.ListJobs = actions.ImportexportListJobs()
        self.UpdateJob = actions.ImportexportUpdateJob()


class Inspector:
    def __init__(self):
        self.all = IamAction("inspector", all=True)
        self.AddAttributesToFindings = actions.InspectorAddAttributesToFindings()
        self.CreateAssessmentTarget = actions.InspectorCreateAssessmentTarget()
        self.CreateAssessmentTemplate = actions.InspectorCreateAssessmentTemplate()
        self.CreateResourceGroup = actions.InspectorCreateResourceGroup()
        self.DeleteAssessmentRun = actions.InspectorDeleteAssessmentRun()
        self.DeleteAssessmentTarget = actions.InspectorDeleteAssessmentTarget()
        self.DeleteAssessmentTemplate = actions.InspectorDeleteAssessmentTemplate()
        self.DescribeAssessmentRuns = actions.InspectorDescribeAssessmentRuns()
        self.DescribeAssessmentTargets = actions.InspectorDescribeAssessmentTargets()
        self.DescribeAssessmentTemplates = actions.InspectorDescribeAssessmentTemplates()
        self.DescribeCrossAccountAccessRole = actions.InspectorDescribeCrossAccountAccessRole()
        self.DescribeFindings = actions.InspectorDescribeFindings()
        self.DescribeResourceGroups = actions.InspectorDescribeResourceGroups()
        self.DescribeRulesPackages = actions.InspectorDescribeRulesPackages()
        self.GetTelemetryMetadata = actions.InspectorGetTelemetryMetadata()
        self.ListAssessmentRunAgents = actions.InspectorListAssessmentRunAgents()
        self.ListAssessmentRuns = actions.InspectorListAssessmentRuns()
        self.ListAssessmentTargets = actions.InspectorListAssessmentTargets()
        self.ListAssessmentTemplates = actions.InspectorListAssessmentTemplates()
        self.ListEventSubscriptions = actions.InspectorListEventSubscriptions()
        self.ListFindings = actions.InspectorListFindings()
        self.ListRulesPackages = actions.InspectorListRulesPackages()
        self.ListTagsForResource = actions.InspectorListTagsForResource()
        self.PreviewAgents = actions.InspectorPreviewAgents()
        self.RegisterCrossAccountAccessRole = actions.InspectorRegisterCrossAccountAccessRole()
        self.RemoveAttributesFromFindings = actions.InspectorRemoveAttributesFromFindings()
        self.SetTagsForResource = actions.InspectorSetTagsForResource()
        self.StartAssessmentRun = actions.InspectorStartAssessmentRun()
        self.StopAssessmentRun = actions.InspectorStopAssessmentRun()
        self.SubscribeToEvent = actions.InspectorSubscribeToEvent()
        self.UnsubscribeFromEvent = actions.InspectorUnsubscribeFromEvent()
        self.UpdateAssessmentTarget = actions.InspectorUpdateAssessmentTarget()


class Iot:
    def __init__(self):
        self.all = IamAction("iot", all=True)
        self.AcceptCertificateTransfer = actions.IotAcceptCertificateTransfer()
        self.AssociateTargetsWithJob = actions.IotAssociateTargetsWithJob()
        self.AttachPolicy = actions.IotAttachPolicy()
        self.AttachPrincipalPolicy = actions.IotAttachPrincipalPolicy()
        self.AttachThingPrincipal = actions.IotAttachThingPrincipal()
        self.CancelCertificateTransfer = actions.IotCancelCertificateTransfer()
        self.CancelJob = actions.IotCancelJob()
        self.ClearDefaultAuthorizer = actions.IotClearDefaultAuthorizer()
        self.Connect = actions.IotConnect()
        self.CreateAuthorizer = actions.IotCreateAuthorizer()
        self.CreateCertificateFromCsr = actions.IotCreateCertificateFromCsr()
        self.CreateJob = actions.IotCreateJob()
        self.CreateKeysAndCertificate = actions.IotCreateKeysAndCertificate()
        self.CreateOTAUpdateJob = actions.IotCreateOTAUpdateJob()
        self.CreatePolicy = actions.IotCreatePolicy()
        self.CreatePolicyVersion = actions.IotCreatePolicyVersion()
        self.CreateRoleAlias = actions.IotCreateRoleAlias()
        self.CreateStream = actions.IotCreateStream()
        self.CreateThing = actions.IotCreateThing()
        self.CreateThingType = actions.IotCreateThingType()
        self.CreateTopicRule = actions.IotCreateTopicRule()
        self.DeleteAuthorizer = actions.IotDeleteAuthorizer()
        self.DeleteCACertificate = actions.IotDeleteCACertificate()
        self.DeleteCertificate = actions.IotDeleteCertificate()
        self.DeleteOTAUpdateJob = actions.IotDeleteOTAUpdateJob()
        self.DeletePolicy = actions.IotDeletePolicy()
        self.DeletePolicyVersion = actions.IotDeletePolicyVersion()
        self.DeleteRegistrationCode = actions.IotDeleteRegistrationCode()
        self.DeleteRoleAlias = actions.IotDeleteRoleAlias()
        self.DeleteStream = actions.IotDeleteStream()
        self.DeleteThing = actions.IotDeleteThing()
        self.DeleteThingShadow = actions.IotDeleteThingShadow()
        self.DeleteThingType = actions.IotDeleteThingType()
        self.DeleteTopicRule = actions.IotDeleteTopicRule()
        self.DeprecateThingType = actions.IotDeprecateThingType()
        self.DescribeAuthorizer = actions.IotDescribeAuthorizer()
        self.DescribeCACertificate = actions.IotDescribeCACertificate()
        self.DescribeCertificate = actions.IotDescribeCertificate()
        self.DescribeDefaultAuthorizer = actions.IotDescribeDefaultAuthorizer()
        self.DescribeEndpoint = actions.IotDescribeEndpoint()
        self.DescribeIndex = actions.IotDescribeIndex()
        self.DescribeJob = actions.IotDescribeJob()
        self.DescribeJobExecution = actions.IotDescribeJobExecution()
        self.DescribeRoleAlias = actions.IotDescribeRoleAlias()
        self.DescribeStream = actions.IotDescribeStream()
        self.DescribeThing = actions.IotDescribeThing()
        self.DescribeThingType = actions.IotDescribeThingType()
        self.DetachPolicy = actions.IotDetachPolicy()
        self.DetachPrincipalPolicy = actions.IotDetachPrincipalPolicy()
        self.DetachThingPrincipal = actions.IotDetachThingPrincipal()
        self.DisableTopicRule = actions.IotDisableTopicRule()
        self.EnableTopicRule = actions.IotEnableTopicRule()
        self.GetEffectivePolicies = actions.IotGetEffectivePolicies()
        self.GetIndexingConfiguration = actions.IotGetIndexingConfiguration()
        self.GetJobDocument = actions.IotGetJobDocument()
        self.GetLoggingOptions = actions.IotGetLoggingOptions()
        self.GetOTAUpdateJob = actions.IotGetOTAUpdateJob()
        self.GetPolicy = actions.IotGetPolicy()
        self.GetPolicyVersion = actions.IotGetPolicyVersion()
        self.GetRegistrationCode = actions.IotGetRegistrationCode()
        self.GetThingShadow = actions.IotGetThingShadow()
        self.GetTopicRule = actions.IotGetTopicRule()
        self.ListAttachedPolicies = actions.IotListAttachedPolicies()
        self.ListAuthorizers = actions.IotListAuthorizers()
        self.ListCACertificates = actions.IotListCACertificates()
        self.ListCertificates = actions.IotListCertificates()
        self.ListCertificatesByCA = actions.IotListCertificatesByCA()
        self.ListIndices = actions.IotListIndices()
        self.ListJobExecutionsForJob = actions.IotListJobExecutionsForJob()
        self.ListJobExecutionsForThing = actions.IotListJobExecutionsForThing()
        self.ListJobs = actions.IotListJobs()
        self.ListOTAUpdateJobs = actions.IotListOTAUpdateJobs()
        self.ListOutgoingCertificates = actions.IotListOutgoingCertificates()
        self.ListPolicies = actions.IotListPolicies()
        self.ListPolicyPrincipals = actions.IotListPolicyPrincipals()
        self.ListPolicyVersions = actions.IotListPolicyVersions()
        self.ListPrincipalPolicies = actions.IotListPrincipalPolicies()
        self.ListPrincipalThings = actions.IotListPrincipalThings()
        self.ListRoleAliases = actions.IotListRoleAliases()
        self.ListStreams = actions.IotListStreams()
        self.ListTargetsForPolicy = actions.IotListTargetsForPolicy()
        self.ListThingPrincipals = actions.IotListThingPrincipals()
        self.ListThingTypes = actions.IotListThingTypes()
        self.ListThings = actions.IotListThings()
        self.ListTopicRules = actions.IotListTopicRules()
        self.Publish = actions.IotPublish()
        self.Receive = actions.IotReceive()
        self.RegisterCACertificate = actions.IotRegisterCACertificate()
        self.RegisterCertificate = actions.IotRegisterCertificate()
        self.RejectCertificateTransfer = actions.IotRejectCertificateTransfer()
        self.ReplaceTopicRule = actions.IotReplaceTopicRule()
        self.SearchIndex = actions.IotSearchIndex()
        self.SetDefaultAuthorizer = actions.IotSetDefaultAuthorizer()
        self.SetDefaultPolicyVersion = actions.IotSetDefaultPolicyVersion()
        self.SetLoggingOptions = actions.IotSetLoggingOptions()
        self.Subscribe = actions.IotSubscribe()
        self.TestAuthorization = actions.IotTestAuthorization()
        self.TestInvokeAuthorizer = actions.IotTestInvokeAuthorizer()
        self.TransferCertificate = actions.IotTransferCertificate()
        self.UpdateAuthorizer = actions.IotUpdateAuthorizer()
        self.UpdateCACertificate = actions.IotUpdateCACertificate()
        self.UpdateCertificate = actions.IotUpdateCertificate()
        self.UpdateIndexingConfiguration = actions.IotUpdateIndexingConfiguration()
        self.UpdateRoleAlias = actions.IotUpdateRoleAlias()
        self.UpdateStream = actions.IotUpdateStream()
        self.UpdateThing = actions.IotUpdateThing()
        self.UpdateThingShadow = actions.IotUpdateThingShadow()


class IotAnalytics:
    def __init__(self):
        self.all = IamAction("iotanalytics", all=True)
        self.CreateChannel = actions.IotanalyticsCreateChannel()
        self.CreateDataset = actions.IotanalyticsCreateDataset()
        self.CreateDatasetContent = actions.IotanalyticsCreateDatasetContent()
        self.CreateDatastore = actions.IotanalyticsCreateDatastore()
        self.CreatePipeline = actions.IotanalyticsCreatePipeline()
        self.DeleteChannel = actions.IotanalyticsDeleteChannel()
        self.DeleteDataset = actions.IotanalyticsDeleteDataset()
        self.DeleteDatasetContent = actions.IotanalyticsDeleteDatasetContent()
        self.DeleteDatastore = actions.IotanalyticsDeleteDatastore()
        self.DeletePipeline = actions.IotanalyticsDeletePipeline()
        self.DescribeChannel = actions.IotanalyticsDescribeChannel()
        self.DescribeDataset = actions.IotanalyticsDescribeDataset()
        self.DescribeDatastore = actions.IotanalyticsDescribeDatastore()
        self.DescribePipeline = actions.IotanalyticsDescribePipeline()
        self.GetDatasetContent = actions.IotanalyticsGetDatasetContent()
        self.ListChannels = actions.IotanalyticsListChannels()
        self.ListDatasets = actions.IotanalyticsListDatasets()
        self.ListDatastores = actions.IotanalyticsListDatastores()
        self.ListPipelines = actions.IotanalyticsListPipelines()
        self.UpdateDataset = actions.IotanalyticsUpdateDataset()
        self.UpdatePipeline = actions.IotanalyticsUpdatePipeline()


class Kinesis:
    def __init__(self):
        self.all = IamAction("kinesis", all=True)
        self.AddTagsToStream = actions.KinesisAddTagsToStream()
        self.CreateStream = actions.KinesisCreateStream()
        self.DecreaseStreamRetentionPeriod = actions.KinesisDecreaseStreamRetentionPeriod()
        self.DeleteStream = actions.KinesisDeleteStream()
        self.DescribeLimits = actions.KinesisDescribeLimits()
        self.DescribeStream = actions.KinesisDescribeStream()
        self.DisableEnhancedMonitoring = actions.KinesisDisableEnhancedMonitoring()
        self.EnableEnhancedMonitoring = actions.KinesisEnableEnhancedMonitoring()
        self.GetRecords = actions.KinesisGetRecords()
        self.GetShardIterator = actions.KinesisGetShardIterator()
        self.IncreaseStreamRetentionPeriod = actions.KinesisIncreaseStreamRetentionPeriod()
        self.ListStreams = actions.KinesisListStreams()
        self.ListTagsForStream = actions.KinesisListTagsForStream()
        self.MergeShards = actions.KinesisMergeShards()
        self.PutRecord = actions.KinesisPutRecord()
        self.PutRecords = actions.KinesisPutRecords()
        self.RemoveTagsFromStream = actions.KinesisRemoveTagsFromStream()
        self.SplitShard = actions.KinesisSplitShard()
        self.UpdateShardCount = actions.KinesisUpdateShardCount()


class KinesisAnalytics:
    def __init__(self):
        self.all = IamAction("kinesisanalytics", all=True)
        self.AddApplicationInput = actions.KinesisanalyticsAddApplicationInput()
        self.AddApplicationOutput = actions.KinesisanalyticsAddApplicationOutput()
        self.AddApplicationReferenceDataSource = actions.KinesisanalyticsAddApplicationReferenceDataSource()
        self.CreateApplication = actions.KinesisanalyticsCreateApplication()
        self.DeleteApplication = actions.KinesisanalyticsDeleteApplication()
        self.DeleteApplicationOutput = actions.KinesisanalyticsDeleteApplicationOutput()
        self.DeleteApplicationReferenceDataSource = actions.KinesisanalyticsDeleteApplicationReferenceDataSource()
        self.DescribeApplication = actions.KinesisanalyticsDescribeApplication()
        self.DiscoverInputSchema = actions.KinesisanalyticsDiscoverInputSchema()
        self.ListApplications = actions.KinesisanalyticsListApplications()
        self.StartApplication = actions.KinesisanalyticsStartApplication()
        self.StopApplication = actions.KinesisanalyticsStopApplication()
        self.UpdateApplication = actions.KinesisanalyticsUpdateApplication()


class KinesisVideo:
    def __init__(self):
        self.all = IamAction("kinesisvideo", all=True)
        self.CreateStream = actions.KinesisvideoCreateStream()
        self.DeleteStream = actions.KinesisvideoDeleteStream()
        self.DescribeStream = actions.KinesisvideoDescribeStream()
        self.GetDataEndpoint = actions.KinesisvideoGetDataEndpoint()
        self.GetMedia = actions.KinesisvideoGetMedia()
        self.GetMediaForFragmentList = actions.KinesisvideoGetMediaForFragmentList()
        self.ListFragments = actions.KinesisvideoListFragments()
        self.ListStreams = actions.KinesisvideoListStreams()
        self.ListTagsForStream = actions.KinesisvideoListTagsForStream()
        self.PutMedia = actions.KinesisvideoPutMedia()
        self.TagStream = actions.KinesisvideoTagStream()
        self.UntagStream = actions.KinesisvideoUntagStream()
        self.UpdateDataRetention = actions.KinesisvideoUpdateDataRetention()
        self.UpdateStream = actions.KinesisvideoUpdateStream()


class Kms:
    def __init__(self):
        self.all = IamAction("kms", all=True)
        self.CancelKeyDeletion = actions.KmsCancelKeyDeletion()
        self.CreateAlias = actions.KmsCreateAlias()
        self.CreateGrant = actions.KmsCreateGrant()
        self.CreateKey = actions.KmsCreateKey()
        self.Decrypt = actions.KmsDecrypt()
        self.DeleteAlias = actions.KmsDeleteAlias()
        self.DeleteImportedKeyMaterial = actions.KmsDeleteImportedKeyMaterial()
        self.DescribeKey = actions.KmsDescribeKey()
        self.DisableKey = actions.KmsDisableKey()
        self.DisableKeyRotation = actions.KmsDisableKeyRotation()
        self.EnableKey = actions.KmsEnableKey()
        self.EnableKeyRotation = actions.KmsEnableKeyRotation()
        self.Encrypt = actions.KmsEncrypt()
        self.GenerateDataKey = actions.KmsGenerateDataKey()
        self.GenerateDataKeyWithoutPlaintext = actions.KmsGenerateDataKeyWithoutPlaintext()
        self.GenerateRandom = actions.KmsGenerateRandom()
        self.GetKeyPolicy = actions.KmsGetKeyPolicy()
        self.GetKeyRotationStatus = actions.KmsGetKeyRotationStatus()
        self.GetParametersForImport = actions.KmsGetParametersForImport()
        self.ImportKeyMaterial = actions.KmsImportKeyMaterial()
        self.ListAliases = actions.KmsListAliases()
        self.ListGrants = actions.KmsListGrants()
        self.ListKeyPolicies = actions.KmsListKeyPolicies()
        self.ListKeys = actions.KmsListKeys()
        self.ListResourceTags = actions.KmsListResourceTags()
        self.ListRetirableGrants = actions.KmsListRetirableGrants()
        self.PutKeyPolicy = actions.KmsPutKeyPolicy()
        self.ReEncryptFrom = actions.KmsReEncryptFrom()
        self.ReEncryptTo = actions.KmsReEncryptTo()
        self.RetireGrant = actions.KmsRetireGrant()
        self.RevokeGrant = actions.KmsRevokeGrant()
        self.ScheduleKeyDeletion = actions.KmsScheduleKeyDeletion()
        self.TagResource = actions.KmsTagResource()
        self.UntagResource = actions.KmsUntagResource()
        self.UpdateAlias = actions.KmsUpdateAlias()
        self.UpdateKeyDescription = actions.KmsUpdateKeyDescription()


class Lambda:
    def __init__(self):
        self.all = IamAction("lambda", all=True)
        self.AddPermission = actions.LambdaAddPermission()
        self.CreateAlias = actions.LambdaCreateAlias()
        self.CreateEventSourceMapping = actions.LambdaCreateEventSourceMapping()
        self.CreateFunction = actions.LambdaCreateFunction()
        self.DeleteAlias = actions.LambdaDeleteAlias()
        self.DeleteEventSourceMapping = actions.LambdaDeleteEventSourceMapping()
        self.DeleteFunction = actions.LambdaDeleteFunction()
        self.DeleteFunctionConcurrency = actions.LambdaDeleteFunctionConcurrency()
        self.EnableReplication = actions.LambdaEnableReplication()
        self.GetAccountSettings = actions.LambdaGetAccountSettings()
        self.GetAlias = actions.LambdaGetAlias()
        self.GetEventSourceMapping = actions.LambdaGetEventSourceMapping()
        self.GetFunction = actions.LambdaGetFunction()
        self.GetFunctionConfiguration = actions.LambdaGetFunctionConfiguration()
        self.GetPolicy = actions.LambdaGetPolicy()
        self.InvokeAsync = actions.LambdaInvokeAsync()
        self.InvokeFunction = actions.LambdaInvokeFunction()
        self.ListAliases = actions.LambdaListAliases()
        self.ListEventSourceMappings = actions.LambdaListEventSourceMappings()
        self.ListFunctions = actions.LambdaListFunctions()
        self.ListTags = actions.LambdaListTags()
        self.ListVersionsByFunction = actions.LambdaListVersionsByFunction()
        self.PublishVersion = actions.LambdaPublishVersion()
        self.PutFunctionConcurrency = actions.LambdaPutFunctionConcurrency()
        self.RemovePermission = actions.LambdaRemovePermission()
        self.TagResource = actions.LambdaTagResource()
        self.UntagResource = actions.LambdaUntagResource()
        self.UpdateAlias = actions.LambdaUpdateAlias()
        self.UpdateEventSourceMapping = actions.LambdaUpdateEventSourceMapping()
        self.UpdateFunctionCode = actions.LambdaUpdateFunctionCode()
        self.UpdateFunctionConfiguration = actions.LambdaUpdateFunctionConfiguration()


class Lex:
    def __init__(self):
        self.all = IamAction("lex", all=True)
        self.CreateBotVersion = actions.LexCreateBotVersion()
        self.CreateIntentVersion = actions.LexCreateIntentVersion()
        self.CreateSlotTypeVersion = actions.LexCreateSlotTypeVersion()
        self.DeleteBot = actions.LexDeleteBot()
        self.DeleteBotAlias = actions.LexDeleteBotAlias()
        self.DeleteBotChannelAssociation = actions.LexDeleteBotChannelAssociation()
        self.DeleteBotVersion = actions.LexDeleteBotVersion()
        self.DeleteIntent = actions.LexDeleteIntent()
        self.DeleteIntentVersion = actions.LexDeleteIntentVersion()
        self.DeleteSlotType = actions.LexDeleteSlotType()
        self.DeleteSlotTypeVersion = actions.LexDeleteSlotTypeVersion()
        self.DeleteUtterances = actions.LexDeleteUtterances()
        self.GetBot = actions.LexGetBot()
        self.GetBotAlias = actions.LexGetBotAlias()
        self.GetBotAliases = actions.LexGetBotAliases()
        self.GetBotChannelAssociation = actions.LexGetBotChannelAssociation()
        self.GetBotChannelAssociations = actions.LexGetBotChannelAssociations()
        self.GetBotVersions = actions.LexGetBotVersions()
        self.GetBots = actions.LexGetBots()
        self.GetBuiltinIntent = actions.LexGetBuiltinIntent()
        self.GetBuiltinIntents = actions.LexGetBuiltinIntents()
        self.GetBuiltinSlotTypes = actions.LexGetBuiltinSlotTypes()
        self.GetIntent = actions.LexGetIntent()
        self.GetIntentVersions = actions.LexGetIntentVersions()
        self.GetIntents = actions.LexGetIntents()
        self.GetSlotType = actions.LexGetSlotType()
        self.GetSlotTypeVersions = actions.LexGetSlotTypeVersions()
        self.GetSlotTypes = actions.LexGetSlotTypes()
        self.GetUtterancesView = actions.LexGetUtterancesView()
        self.PostContent = actions.LexPostContent()
        self.PostText = actions.LexPostText()
        self.PutBot = actions.LexPutBot()
        self.PutBotAlias = actions.LexPutBotAlias()
        self.PutIntent = actions.LexPutIntent()
        self.PutSlotType = actions.LexPutSlotType()


class Lightsail:
    def __init__(self):
        self.all = IamAction("lightsail", all=True)
        self.AllocateStaticIp = actions.LightsailAllocateStaticIp()
        self.AttachStaticIp = actions.LightsailAttachStaticIp()
        self.CloseInstancePublicPorts = actions.LightsailCloseInstancePublicPorts()
        self.CreateDomain = actions.LightsailCreateDomain()
        self.CreateDomainEntry = actions.LightsailCreateDomainEntry()
        self.CreateInstanceSnapshot = actions.LightsailCreateInstanceSnapshot()
        self.CreateInstances = actions.LightsailCreateInstances()
        self.CreateInstancesFromSnapshot = actions.LightsailCreateInstancesFromSnapshot()
        self.CreateKeyPair = actions.LightsailCreateKeyPair()
        self.DeleteDomain = actions.LightsailDeleteDomain()
        self.DeleteDomainEntry = actions.LightsailDeleteDomainEntry()
        self.DeleteInstance = actions.LightsailDeleteInstance()
        self.DeleteInstanceSnapshot = actions.LightsailDeleteInstanceSnapshot()
        self.DeleteKeyPair = actions.LightsailDeleteKeyPair()
        self.DetachStaticIp = actions.LightsailDetachStaticIp()
        self.DownloadDefaultKeyPair = actions.LightsailDownloadDefaultKeyPair()
        self.GetActiveNames = actions.LightsailGetActiveNames()
        self.GetBlueprints = actions.LightsailGetBlueprints()
        self.GetBundles = actions.LightsailGetBundles()
        self.GetDomain = actions.LightsailGetDomain()
        self.GetDomains = actions.LightsailGetDomains()
        self.GetInstance = actions.LightsailGetInstance()
        self.GetInstanceAccessDetails = actions.LightsailGetInstanceAccessDetails()
        self.GetInstanceMetricData = actions.LightsailGetInstanceMetricData()
        self.GetInstancePortStates = actions.LightsailGetInstancePortStates()
        self.GetInstanceSnapshot = actions.LightsailGetInstanceSnapshot()
        self.GetInstanceSnapshots = actions.LightsailGetInstanceSnapshots()
        self.GetInstanceState = actions.LightsailGetInstanceState()
        self.GetInstances = actions.LightsailGetInstances()
        self.GetKeyPair = actions.LightsailGetKeyPair()
        self.GetKeyPairs = actions.LightsailGetKeyPairs()
        self.GetOperation = actions.LightsailGetOperation()
        self.GetOperations = actions.LightsailGetOperations()
        self.GetOperationsForResource = actions.LightsailGetOperationsForResource()
        self.GetRegions = actions.LightsailGetRegions()
        self.GetStaticIp = actions.LightsailGetStaticIp()
        self.GetStaticIps = actions.LightsailGetStaticIps()
        self.ImportKeyPair = actions.LightsailImportKeyPair()
        self.IsVpcPeered = actions.LightsailIsVpcPeered()
        self.OpenInstancePublicPorts = actions.LightsailOpenInstancePublicPorts()
        self.PeerVpc = actions.LightsailPeerVpc()
        self.RebootInstance = actions.LightsailRebootInstance()
        self.ReleaseStaticIp = actions.LightsailReleaseStaticIp()
        self.StartInstance = actions.LightsailStartInstance()
        self.StopInstance = actions.LightsailStopInstance()
        self.UnpeerVpc = actions.LightsailUnpeerVpc()
        self.UpdateDomainEntry = actions.LightsailUpdateDomainEntry()


class Logs:
    def __init__(self):
        self.all = IamAction("logs", all=True)
        self.AssociateKmsKey = actions.LogsAssociateKmsKey()
        self.CancelExportTask = actions.LogsCancelExportTask()
        self.CreateExportTask = actions.LogsCreateExportTask()
        self.CreateLogGroup = actions.LogsCreateLogGroup()
        self.CreateLogStream = actions.LogsCreateLogStream()
        self.DeleteDestination = actions.LogsDeleteDestination()
        self.DeleteLogGroup = actions.LogsDeleteLogGroup()
        self.DeleteLogStream = actions.LogsDeleteLogStream()
        self.DeleteMetricFilter = actions.LogsDeleteMetricFilter()
        self.DeleteResourcePolicy = actions.LogsDeleteResourcePolicy()
        self.DeleteRetentionPolicy = actions.LogsDeleteRetentionPolicy()
        self.DeleteSubscriptionFilter = actions.LogsDeleteSubscriptionFilter()
        self.DescribeDestinations = actions.LogsDescribeDestinations()
        self.DescribeExportTasks = actions.LogsDescribeExportTasks()
        self.DescribeLogGroups = actions.LogsDescribeLogGroups()
        self.DescribeLogStreams = actions.LogsDescribeLogStreams()
        self.DescribeMetricFilters = actions.LogsDescribeMetricFilters()
        self.DescribeResourcePolicies = actions.LogsDescribeResourcePolicies()
        self.DescribeSubscriptionFilters = actions.LogsDescribeSubscriptionFilters()
        self.DisassociateKmsKey = actions.LogsDisassociateKmsKey()
        self.FilterLogEvents = actions.LogsFilterLogEvents()
        self.GetLogEvents = actions.LogsGetLogEvents()
        self.ListTagsLogGroup = actions.LogsListTagsLogGroup()
        self.PutDestination = actions.LogsPutDestination()
        self.PutDestinationPolicy = actions.LogsPutDestinationPolicy()
        self.PutLogEvents = actions.LogsPutLogEvents()
        self.PutMetricFilter = actions.LogsPutMetricFilter()
        self.PutResourcePolicy = actions.LogsPutResourcePolicy()
        self.PutRetentionPolicy = actions.LogsPutRetentionPolicy()
        self.PutSubscriptionFilter = actions.LogsPutSubscriptionFilter()
        self.TagLogGroup = actions.LogsTagLogGroup()
        self.TestMetricFilter = actions.LogsTestMetricFilter()
        self.UntagLogGroup = actions.LogsUntagLogGroup()


class Machinelearning:
    def __init__(self):
        self.all = IamAction("machinelearning",  all=True)
        self.AddTags = actions.MachinelearningAddTags()
        self.CreateBatchPrediction = actions.MachinelearningCreateBatchPrediction()
        self.CreateDataSourceFromRDS = actions.MachinelearningCreateDataSourceFromRDS()
        self.CreateDataSourceFromRedshift = actions.MachinelearningCreateDataSourceFromRedshift()
        self.CreateDataSourceFromS3 = actions.MachinelearningCreateDataSourceFromS3()
        self.CreateEvaluation = actions.MachinelearningCreateEvaluation()
        self.CreateMLModel = actions.MachinelearningCreateMLModel()
        self.CreateRealtimeEndpoint = actions.MachinelearningCreateRealtimeEndpoint()
        self.DeleteBatchPrediction = actions.MachinelearningDeleteBatchPrediction()
        self.DeleteDataSource = actions.MachinelearningDeleteDataSource()
        self.DeleteEvaluation = actions.MachinelearningDeleteEvaluation()
        self.DeleteMLModel = actions.MachinelearningDeleteMLModel()
        self.DeleteRealtimeEndpoint = actions.MachinelearningDeleteRealtimeEndpoint()
        self.DeleteTags = actions.MachinelearningDeleteTags()
        self.DescribeBatchPredictions = actions.MachinelearningDescribeBatchPredictions()
        self.DescribeDataSources = actions.MachinelearningDescribeDataSources()
        self.DescribeEvaluations = actions.MachinelearningDescribeEvaluations()
        self.DescribeMLModels = actions.MachinelearningDescribeMLModels()
        self.DescribeTags = actions.MachinelearningDescribeTags()
        self.GetBatchPrediction = actions.MachinelearningGetBatchPrediction()
        self.GetDataSource = actions.MachinelearningGetDataSource()
        self.GetEvaluation = actions.MachinelearningGetEvaluation()
        self.GetMLModel = actions.MachinelearningGetMLModel()
        self.Predict = actions.MachinelearningPredict()
        self.UpdateBatchPrediction = actions.MachinelearningUpdateBatchPrediction()
        self.UpdateDataSource = actions.MachinelearningUpdateDataSource()
        self.UpdateEvaluation = actions.MachinelearningUpdateEvaluation()
        self.UpdateMLModel = actions.MachinelearningUpdateMLModel()


class MechanicalTurk:
    def __init__(self):
        self.all = IamAction("mechanicalturk",  all=True)
        self.ApproveAssignment = actions.MechanicalturkApproveAssignment()
        self.ApproveRejectedAssignment = actions.MechanicalturkApproveRejectedAssignment()
        self.AssignQualification = actions.MechanicalturkAssignQualification()
        self.BlockWorker = actions.MechanicalturkBlockWorker()
        self.ChangeHITTypeOfHIT = actions.MechanicalturkChangeHITTypeOfHIT()
        self.CreateHIT = actions.MechanicalturkCreateHIT()
        self.CreateQualificationType = actions.MechanicalturkCreateQualificationType()
        self.DisableHIT = actions.MechanicalturkDisableHIT()
        self.DisposeHIT = actions.MechanicalturkDisposeHIT()
        self.DisposeQualificationType = actions.MechanicalturkDisposeQualificationType()
        self.ExtendHIT = actions.MechanicalturkExtendHIT()
        self.ForceExpireHIT = actions.MechanicalturkForceExpireHIT()
        self.GetAccountBalance = actions.MechanicalturkGetAccountBalance()
        self.GetAssignment = actions.MechanicalturkGetAssignment()
        self.GetAssignmentsForHIT = actions.MechanicalturkGetAssignmentsForHIT()
        self.GetBlockedWorkers = actions.MechanicalturkGetBlockedWorkers()
        self.GetBonusPayments = actions.MechanicalturkGetBonusPayments()
        self.GetFileUploadURL = actions.MechanicalturkGetFileUploadURL()
        self.GetHIT = actions.MechanicalturkGetHIT()
        self.GetHITsForQualificationType = actions.MechanicalturkGetHITsForQualificationType()
        self.GetQualificationRequests = actions.MechanicalturkGetQualificationRequests()
        self.GetQualificationScore = actions.MechanicalturkGetQualificationScore()
        self.GetQualificationType = actions.MechanicalturkGetQualificationType()
        self.GetQualificationsForQualificationType = actions.MechanicalturkGetQualificationsForQualificationType()
        self.GetRequesterStatistic = actions.MechanicalturkGetRequesterStatistic()
        self.GetRequesterWorkerStatistic = actions.MechanicalturkGetRequesterWorkerStatistic()
        self.GetReviewResultsForHIT = actions.MechanicalturkGetReviewResultsForHIT()
        self.GetReviewableHITs = actions.MechanicalturkGetReviewableHITs()
        self.GrantBonus = actions.MechanicalturkGrantBonus()
        self.GrantQualification = actions.MechanicalturkGrantQualification()
        self.NotifyWorkers = actions.MechanicalturkNotifyWorkers()
        self.RegisterHITType = actions.MechanicalturkRegisterHITType()
        self.RejectAssignment = actions.MechanicalturkRejectAssignment()
        self.RejectQualificationRequest = actions.MechanicalturkRejectQualificationRequest()
        self.RevokeQualification = actions.MechanicalturkRevokeQualification()
        self.SearchHITs = actions.MechanicalturkSearchHITs()
        self.SearchQualificationTypes = actions.MechanicalturkSearchQualificationTypes()
        self.SendTestEventNotification = actions.MechanicalturkSendTestEventNotification()
        self.SetHITAsReviewing = actions.MechanicalturkSetHITAsReviewing()
        self.SetHITTypeNotification = actions.MechanicalturkSetHITTypeNotification()
        self.UnblockWorker = actions.MechanicalturkUnblockWorker()
        self.UpdateQualificationScore = actions.MechanicalturkUpdateQualificationScore()
        self.UpdateQualificationType = actions.MechanicalturkUpdateQualificationType()


class MediaConvert:
    def __init__(self):
        self.all = IamAction("mediaconvert",  all=True)
        self.CancelJob = actions.MediaconvertCancelJob()
        self.CreateJob = actions.MediaconvertCreateJob()
        self.CreateJobTemplate = actions.MediaconvertCreateJobTemplate()
        self.CreatePreset = actions.MediaconvertCreatePreset()
        self.CreateQueue = actions.MediaconvertCreateQueue()
        self.DeleteJobTemplate = actions.MediaconvertDeleteJobTemplate()
        self.DeletePreset = actions.MediaconvertDeletePreset()
        self.DeleteQueue = actions.MediaconvertDeleteQueue()
        self.DescribeEndpoint = actions.MediaconvertDescribeEndpoint()
        self.GetJob = actions.MediaconvertGetJob()
        self.GetJobTemplate = actions.MediaconvertGetJobTemplate()
        self.GetPreset = actions.MediaconvertGetPreset()
        self.GetQueue = actions.MediaconvertGetQueue()
        self.ListJobTemplates = actions.MediaconvertListJobTemplates()
        self.ListJobs = actions.MediaconvertListJobs()
        self.ListPresets = actions.MediaconvertListPresets()
        self.ListQueues = actions.MediaconvertListQueues()
        self.UpdateJobTemplate = actions.MediaconvertUpdateJobTemplate()
        self.UpdatePreset = actions.MediaconvertUpdatePreset()
        self.UpdateQueue = actions.MediaconvertUpdateQueue()


class MediaLive:
    def __init__(self):
        self.all = IamAction("medialive",  all=True)
        self.CreateChannel = actions.MedialiveCreateChannel()
        self.CreateInput = actions.MedialiveCreateInput()
        self.CreateInputSecurityGroup = actions.MedialiveCreateInputSecurityGroup()
        self.DeleteChannel = actions.MedialiveDeleteChannel()
        self.DeleteInput = actions.MedialiveDeleteInput()
        self.DeleteInputSecurityGroup = actions.MedialiveDeleteInputSecurityGroup()
        self.DescribeChannel = actions.MedialiveDescribeChannel()
        self.DescribeInput = actions.MedialiveDescribeInput()
        self.DescribeInputSecurityGroup = actions.MedialiveDescribeInputSecurityGroup()
        self.ListChannels = actions.MedialiveListChannels()
        self.ListInputSecurityGroups = actions.MedialiveListInputSecurityGroups()
        self.ListInputs = actions.MedialiveListInputs()
        self.StartChannel = actions.MedialiveStartChannel()
        self.StopChannel = actions.MedialiveStopChannel()


class MediaPackage:
    def __init__(self):
        self.all = IamAction("mediapackage",  all=True)
        self.CreateChannel = actions.MediapackageCreateChannel()
        self.CreateOriginEndpoint = actions.MediapackageCreateOriginEndpoint()
        self.DeleteChannel = actions.MediapackageDeleteChannel()
        self.DeleteOriginEndpoint = actions.MediapackageDeleteOriginEndpoint()
        self.DescribeChannel = actions.MediapackageDescribeChannel()
        self.DescribeOriginEndpoint = actions.MediapackageDescribeOriginEndpoint()
        self.ListChannels = actions.MediapackageListChannels()
        self.ListOriginEndpoints = actions.MediapackageListOriginEndpoints()
        self.UpdateChannel = actions.MediapackageUpdateChannel()
        self.UpdateOriginEndpoint = actions.MediapackageUpdateOriginEndpoint()


class MediaStore:
    def __init__(self):
        self.all = IamAction("mediastore",  all=True)
        self.CreateContainer = actions.MediastoreCreateContainer()
        self.DeleteContainer = actions.MediastoreDeleteContainer()
        self.DeleteContainerPolicy = actions.MediastoreDeleteContainerPolicy()
        self.DeleteObject = actions.MediastoreDeleteObject()
        self.DescribeContainer = actions.MediastoreDescribeContainer()
        self.DescribeObject = actions.MediastoreDescribeObject()
        self.GetContainerPolicy = actions.MediastoreGetContainerPolicy()
        self.GetObject = actions.MediastoreGetObject()
        self.ListContainers = actions.MediastoreListContainers()
        self.ListItems = actions.MediastoreListItems()
        self.PutContainerPolicy = actions.MediastorePutContainerPolicy()
        self.PutObject = actions.MediastorePutObject()


class Mgh:
    def __init__(self):
        self.all = IamAction("mgh",  all=True)
        self.AssociateCreatedArtifact = actions.MghAssociateCreatedArtifact()
        self.AssociateDiscoveredResource = actions.MghAssociateDiscoveredResource()
        self.CreateProgressUpdateStream = actions.MghCreateProgressUpdateStream()
        self.DeleteProgressUpdateStream = actions.MghDeleteProgressUpdateStream()
        self.DescribeApplicationState = actions.MghDescribeApplicationState()
        self.DescribeMigrationTask = actions.MghDescribeMigrationTask()
        self.DisassociateCreatedArtifact = actions.MghDisassociateCreatedArtifact()
        self.DisassociateDiscoveredResource = actions.MghDisassociateDiscoveredResource()
        self.ImportMigrationTask = actions.MghImportMigrationTask()
        self.ListCreatedArtifacts = actions.MghListCreatedArtifacts()
        self.ListDiscoveredResources = actions.MghListDiscoveredResources()
        self.ListMigrationTasks = actions.MghListMigrationTasks()
        self.ListProgressUpdateStreams = actions.MghListProgressUpdateStreams()
        self.NotifyApplicationState = actions.MghNotifyApplicationState()
        self.NotifyMigrationTaskState = actions.MghNotifyMigrationTaskState()
        self.PutResourceAttributes = actions.MghPutResourceAttributes()


class MobileAnalytics:
    def __init__(self):
        self.all = IamAction("mobileanalytics",  all=True)
        self.GetFinancialReports = actions.MobileanalyticsGetFinancialReports()
        self.GetReports = actions.MobileanalyticsGetReports()
        self.PutEvents = actions.MobileanalyticsPutEvents()


class MobileHub:
    def __init__(self):
        self.all = IamAction("mobilehub",  all=True)
        self.CreateProject = actions.MobilehubCreateProject()
        self.CreateServiceRole = actions.MobilehubCreateServiceRole()
        self.DeleteProject = actions.MobilehubDeleteProject()
        self.DeployToStage = actions.MobilehubDeployToStage()
        self.DescribeBundle = actions.MobilehubDescribeBundle()
        self.ExportBundle = actions.MobilehubExportBundle()
        self.ExportProject = actions.MobilehubExportProject()
        self.GenerateProjectParameters = actions.MobilehubGenerateProjectParameters()
        self.GetProject = actions.MobilehubGetProject()
        self.GetProjectSnapshot = actions.MobilehubGetProjectSnapshot()
        self.ImportProject = actions.MobilehubImportProject()
        self.ListAvailableConnectors = actions.MobilehubListAvailableConnectors()
        self.ListAvailableFeatures = actions.MobilehubListAvailableFeatures()
        self.ListAvailableRegions = actions.MobilehubListAvailableRegions()
        self.ListBundles = actions.MobilehubListBundles()
        self.ListProjects = actions.MobilehubListProjects()
        self.SynchronizeProject = actions.MobilehubSynchronizeProject()
        self.UpdateProject = actions.MobilehubUpdateProject()
        self.VerifyServiceRole = actions.MobilehubVerifyServiceRole()


class MobileTargeting:
    def __init__(self):
        self.all = IamAction("mobiletargeting",  all=True)
        self.CreateCampaign = actions.MobiletargetingCreateCampaign()
        self.CreateImportJob = actions.MobiletargetingCreateImportJob()
        self.CreateSegment = actions.MobiletargetingCreateSegment()
        self.DeleteApnsChannel = actions.MobiletargetingDeleteApnsChannel()
        self.DeleteCampaign = actions.MobiletargetingDeleteCampaign()
        self.DeleteGcmChannel = actions.MobiletargetingDeleteGcmChannel()
        self.DeleteSegment = actions.MobiletargetingDeleteSegment()
        self.GetApnsChannel = actions.MobiletargetingGetApnsChannel()
        self.GetApplicationSettings = actions.MobiletargetingGetApplicationSettings()
        self.GetCampaign = actions.MobiletargetingGetCampaign()
        self.GetCampaignActivities = actions.MobiletargetingGetCampaignActivities()
        self.GetCampaignVersion = actions.MobiletargetingGetCampaignVersion()
        self.GetCampaignVersions = actions.MobiletargetingGetCampaignVersions()
        self.GetCampaigns = actions.MobiletargetingGetCampaigns()
        self.GetEndpoint = actions.MobiletargetingGetEndpoint()
        self.GetGcmChannel = actions.MobiletargetingGetGcmChannel()
        self.GetImportJob = actions.MobiletargetingGetImportJob()
        self.GetImportJobs = actions.MobiletargetingGetImportJobs()
        self.GetReports = actions.MobiletargetingGetReports()
        self.GetSegment = actions.MobiletargetingGetSegment()
        self.GetSegmentImportJobs = actions.MobiletargetingGetSegmentImportJobs()
        self.GetSegmentVersion = actions.MobiletargetingGetSegmentVersion()
        self.GetSegmentVersions = actions.MobiletargetingGetSegmentVersions()
        self.GetSegments = actions.MobiletargetingGetSegments()
        self.UpdateApnsChannel = actions.MobiletargetingUpdateApnsChannel()
        self.UpdateApplicationSettings = actions.MobiletargetingUpdateApplicationSettings()
        self.UpdateCampaign = actions.MobiletargetingUpdateCampaign()
        self.UpdateEndpoint = actions.MobiletargetingUpdateEndpoint()
        self.UpdateEndpointsBatch = actions.MobiletargetingUpdateEndpointsBatch()
        self.UpdateGcmChannel = actions.MobiletargetingUpdateGcmChannel()
        self.UpdateSegment = actions.MobiletargetingUpdateSegment()


class Mq:
    def __init__(self):
        self.all = IamAction("mq",  all=True)
        self.CreateBroker = actions.MqCreateBroker()
        self.CreateConfiguration = actions.MqCreateConfiguration()
        self.CreateUser = actions.MqCreateUser()
        self.DeleteBroker = actions.MqDeleteBroker()
        self.DeleteUser = actions.MqDeleteUser()
        self.DescribeBroker = actions.MqDescribeBroker()
        self.DescribeConfiguration = actions.MqDescribeConfiguration()
        self.DescribeConfigurationRevision = actions.MqDescribeConfigurationRevision()
        self.DescribeUser = actions.MqDescribeUser()
        self.ListBrokers = actions.MqListBrokers()
        self.ListConfigurationRevisions = actions.MqListConfigurationRevisions()
        self.ListConfigurations = actions.MqListConfigurations()
        self.ListUsers = actions.MqListUsers()
        self.RebootBroker = actions.MqRebootBroker()
        self.UpdateBroker = actions.MqUpdateBroker()
        self.UpdateConfiguration = actions.MqUpdateConfiguration()
        self.UpdateUser = actions.MqUpdateUser()


class OpsworksCm:
    def __init__(self):
        self.all = IamAction("opsworks-cm",  all=True)
        self.AssociateNode = actions.OpsworksCmAssociateNode()
        self.CreateBackup = actions.OpsworksCmCreateBackup()
        self.CreateServer = actions.OpsworksCmCreateServer()
        self.DeleteBackup = actions.OpsworksCmDeleteBackup()
        self.DeleteServer = actions.OpsworksCmDeleteServer()
        self.DescribeAccountAttributes = actions.OpsworksCmDescribeAccountAttributes()
        self.DescribeBackups = actions.OpsworksCmDescribeBackups()
        self.DescribeEvents = actions.OpsworksCmDescribeEvents()
        self.DescribeNodeAssociationStatus = actions.OpsworksCmDescribeNodeAssociationStatus()
        self.DescribeServers = actions.OpsworksCmDescribeServers()
        self.DisassociateNode = actions.OpsworksCmDisassociateNode()
        self.RestoreServer = actions.OpsworksCmRestoreServer()
        self.StartMaintenance = actions.OpsworksCmStartMaintenance()
        self.UpdateServer = actions.OpsworksCmUpdateServer()
        self.UpdateServerEngineAttributes = actions.OpsworksCmUpdateServerEngineAttributes()


class Opsworks:
    def __init__(self):
        self.all = IamAction("opsworks",  all=True)
        self.AssignInstance = actions.OpsworksAssignInstance()
        self.AssignVolume = actions.OpsworksAssignVolume()
        self.AssociateElasticIp = actions.OpsworksAssociateElasticIp()
        self.AttachElasticLoadBalancer = actions.OpsworksAttachElasticLoadBalancer()
        self.CloneStack = actions.OpsworksCloneStack()
        self.CreateApp = actions.OpsworksCreateApp()
        self.CreateDeployment = actions.OpsworksCreateDeployment()
        self.CreateInstance = actions.OpsworksCreateInstance()
        self.CreateLayer = actions.OpsworksCreateLayer()
        self.CreateStack = actions.OpsworksCreateStack()
        self.CreateUserProfile = actions.OpsworksCreateUserProfile()
        self.DeleteApp = actions.OpsworksDeleteApp()
        self.DeleteInstance = actions.OpsworksDeleteInstance()
        self.DeleteLayer = actions.OpsworksDeleteLayer()
        self.DeleteStack = actions.OpsworksDeleteStack()
        self.DeleteUserProfile = actions.OpsworksDeleteUserProfile()
        self.DeregisterEcsCluster = actions.OpsworksDeregisterEcsCluster()
        self.DeregisterElasticIp = actions.OpsworksDeregisterElasticIp()
        self.DeregisterInstance = actions.OpsworksDeregisterInstance()
        self.DeregisterRdsDbInstance = actions.OpsworksDeregisterRdsDbInstance()
        self.DeregisterVolume = actions.OpsworksDeregisterVolume()
        self.DescribeAgentVersions = actions.OpsworksDescribeAgentVersions()
        self.DescribeApps = actions.OpsworksDescribeApps()
        self.DescribeCommands = actions.OpsworksDescribeCommands()
        self.DescribeDeployments = actions.OpsworksDescribeDeployments()
        self.DescribeEcsClusters = actions.OpsworksDescribeEcsClusters()
        self.DescribeElasticIps = actions.OpsworksDescribeElasticIps()
        self.DescribeElasticLoadBalancers = actions.OpsworksDescribeElasticLoadBalancers()
        self.DescribeInstances = actions.OpsworksDescribeInstances()
        self.DescribeLayers = actions.OpsworksDescribeLayers()
        self.DescribeLoadBasedAutoScaling = actions.OpsworksDescribeLoadBasedAutoScaling()
        self.DescribeMyUserProfile = actions.OpsworksDescribeMyUserProfile()
        self.DescribePermissions = actions.OpsworksDescribePermissions()
        self.DescribeRaidArrays = actions.OpsworksDescribeRaidArrays()
        self.DescribeRdsDbInstances = actions.OpsworksDescribeRdsDbInstances()
        self.DescribeServiceErrors = actions.OpsworksDescribeServiceErrors()
        self.DescribeStackProvisioningParameters = actions.OpsworksDescribeStackProvisioningParameters()
        self.DescribeStackSummary = actions.OpsworksDescribeStackSummary()
        self.DescribeStacks = actions.OpsworksDescribeStacks()
        self.DescribeTimeBasedAutoScaling = actions.OpsworksDescribeTimeBasedAutoScaling()
        self.DescribeUserProfiles = actions.OpsworksDescribeUserProfiles()
        self.DescribeVolumes = actions.OpsworksDescribeVolumes()
        self.DetachElasticLoadBalancer = actions.OpsworksDetachElasticLoadBalancer()
        self.DisassociateElasticIp = actions.OpsworksDisassociateElasticIp()
        self.GetHostnameSuggestion = actions.OpsworksGetHostnameSuggestion()
        self.GrantAccess = actions.OpsworksGrantAccess()
        self.ListTags = actions.OpsworksListTags()
        self.RebootInstance = actions.OpsworksRebootInstance()
        self.RegisterEcsCluster = actions.OpsworksRegisterEcsCluster()
        self.RegisterElasticIp = actions.OpsworksRegisterElasticIp()
        self.RegisterInstance = actions.OpsworksRegisterInstance()
        self.RegisterRdsDbInstance = actions.OpsworksRegisterRdsDbInstance()
        self.RegisterVolume = actions.OpsworksRegisterVolume()
        self.SetLoadBasedAutoScaling = actions.OpsworksSetLoadBasedAutoScaling()
        self.SetPermission = actions.OpsworksSetPermission()
        self.SetTimeBasedAutoScaling = actions.OpsworksSetTimeBasedAutoScaling()
        self.StartInstance = actions.OpsworksStartInstance()
        self.StartStack = actions.OpsworksStartStack()
        self.StopInstance = actions.OpsworksStopInstance()
        self.StopStack = actions.OpsworksStopStack()
        self.TagResource = actions.OpsworksTagResource()
        self.UnassignInstance = actions.OpsworksUnassignInstance()
        self.UnassignVolume = actions.OpsworksUnassignVolume()
        self.UntagResource = actions.OpsworksUntagResource()
        self.UpdateApp = actions.OpsworksUpdateApp()
        self.UpdateElasticIp = actions.OpsworksUpdateElasticIp()
        self.UpdateInstance = actions.OpsworksUpdateInstance()
        self.UpdateLayer = actions.OpsworksUpdateLayer()
        self.UpdateMyUserProfile = actions.OpsworksUpdateMyUserProfile()
        self.UpdateRdsDbInstance = actions.OpsworksUpdateRdsDbInstance()
        self.UpdateStack = actions.OpsworksUpdateStack()
        self.UpdateUserProfile = actions.OpsworksUpdateUserProfile()
        self.UpdateVolume = actions.OpsworksUpdateVolume()


class Organizations:
    def __init__(self):
        self.all = IamAction("organizations",  all=True)
        self.AcceptHandshake = actions.OrganizationsAcceptHandshake()
        self.AttachPolicy = actions.OrganizationsAttachPolicy()
        self.CancelHandshake = actions.OrganizationsCancelHandshake()
        self.CreateAccount = actions.OrganizationsCreateAccount()
        self.CreateOrganization = actions.OrganizationsCreateOrganization()
        self.CreateOrganizationalUnit = actions.OrganizationsCreateOrganizationalUnit()
        self.CreatePolicy = actions.OrganizationsCreatePolicy()
        self.DeclineHandshake = actions.OrganizationsDeclineHandshake()
        self.DeleteOrganization = actions.OrganizationsDeleteOrganization()
        self.DeleteOrganizationalUnit = actions.OrganizationsDeleteOrganizationalUnit()
        self.DeletePolicy = actions.OrganizationsDeletePolicy()
        self.DescribeAccount = actions.OrganizationsDescribeAccount()
        self.DescribeCreateAccountStatus = actions.OrganizationsDescribeCreateAccountStatus()
        self.DescribeHandshake = actions.OrganizationsDescribeHandshake()
        self.DescribeOrganization = actions.OrganizationsDescribeOrganization()
        self.DescribeOrganizationalUnit = actions.OrganizationsDescribeOrganizationalUnit()
        self.DescribePolicy = actions.OrganizationsDescribePolicy()
        self.DetachPolicy = actions.OrganizationsDetachPolicy()
        self.DisablePolicyType = actions.OrganizationsDisablePolicyType()
        self.EnableAllFeatures = actions.OrganizationsEnableAllFeatures()
        self.EnablePolicyType = actions.OrganizationsEnablePolicyType()
        self.InviteAccountToOrganization = actions.OrganizationsInviteAccountToOrganization()
        self.LeaveOrganization = actions.OrganizationsLeaveOrganization()
        self.ListAccounts = actions.OrganizationsListAccounts()
        self.ListAccountsForParent = actions.OrganizationsListAccountsForParent()
        self.ListChildren = actions.OrganizationsListChildren()
        self.ListCreateAccountStatus = actions.OrganizationsListCreateAccountStatus()
        self.ListHandshakesForAccount = actions.OrganizationsListHandshakesForAccount()
        self.ListHandshakesForOrganization = actions.OrganizationsListHandshakesForOrganization()
        self.ListOrganizationalUnitsForParent = actions.OrganizationsListOrganizationalUnitsForParent()
        self.ListParents = actions.OrganizationsListParents()
        self.ListPolicies = actions.OrganizationsListPolicies()
        self.ListPoliciesForTarget = actions.OrganizationsListPoliciesForTarget()
        self.ListRoots = actions.OrganizationsListRoots()
        self.ListTargetsForPolicy = actions.OrganizationsListTargetsForPolicy()
        self.MoveAccount = actions.OrganizationsMoveAccount()
        self.RemoveAccountFromOrganization = actions.OrganizationsRemoveAccountFromOrganization()
        self.UpdateOrganizationalUnit = actions.OrganizationsUpdateOrganizationalUnit()
        self.UpdatePolicy = actions.OrganizationsUpdatePolicy()


class Polly:
    def __init__(self):
        self.all = IamAction("polly",  all=True)
        self.DeleteLexicon = actions.PollyDeleteLexicon()
        self.DescribeVoices = actions.PollyDescribeVoices()
        self.GetLexicon = actions.PollyGetLexicon()
        self.ListLexicons = actions.PollyListLexicons()
        self.PutLexicon = actions.PollyPutLexicon()
        self.SynthesizeSpeech = actions.PollySynthesizeSpeech()


class Pricing:
    def __init__(self):
        self.all = IamAction("pricing",  all=True)
        self.DescribeServices = actions.PricingDescribeServices()
        self.GetAttributeValues = actions.PricingGetAttributeValues()
        self.GetProducts = actions.PricingGetProducts()


class Rds:
    def __init__(self):
        self.all = IamAction("rds",  all=True)
        self.AddRoleToDBCluster = actions.RdsAddRoleToDBCluster()
        self.AddSourceIdentifierToSubscription = actions.RdsAddSourceIdentifierToSubscription()
        self.AddTagsToResource = actions.RdsAddTagsToResource()
        self.ApplyPendingMaintenanceAction = actions.RdsApplyPendingMaintenanceAction()
        self.AuthorizeDBSecurityGroupIngress = actions.RdsAuthorizeDBSecurityGroupIngress()
        self.CopyDBClusterSnapshot = actions.RdsCopyDBClusterSnapshot()
        self.CopyDBParameterGroup = actions.RdsCopyDBParameterGroup()
        self.CopyDBSnapshot = actions.RdsCopyDBSnapshot()
        self.CopyOptionGroup = actions.RdsCopyOptionGroup()
        self.CreateDBCluster = actions.RdsCreateDBCluster()
        self.CreateDBClusterParameterGroup = actions.RdsCreateDBClusterParameterGroup()
        self.CreateDBClusterSnapshot = actions.RdsCreateDBClusterSnapshot()
        self.CreateDBInstance = actions.RdsCreateDBInstance()
        self.CreateDBInstanceReadReplica = actions.RdsCreateDBInstanceReadReplica()
        self.CreateDBParameterGroup = actions.RdsCreateDBParameterGroup()
        self.CreateDBSecurityGroup = actions.RdsCreateDBSecurityGroup()
        self.CreateDBSnapshot = actions.RdsCreateDBSnapshot()
        self.CreateDBSubnetGroup = actions.RdsCreateDBSubnetGroup()
        self.CreateEventSubscription = actions.RdsCreateEventSubscription()
        self.CreateOptionGroup = actions.RdsCreateOptionGroup()
        self.DeleteDBCluster = actions.RdsDeleteDBCluster()
        self.DeleteDBClusterParameterGroup = actions.RdsDeleteDBClusterParameterGroup()
        self.DeleteDBClusterSnapshot = actions.RdsDeleteDBClusterSnapshot()
        self.DeleteDBInstance = actions.RdsDeleteDBInstance()
        self.DeleteDBParameterGroup = actions.RdsDeleteDBParameterGroup()
        self.DeleteDBSecurityGroup = actions.RdsDeleteDBSecurityGroup()
        self.DeleteDBSnapshot = actions.RdsDeleteDBSnapshot()
        self.DeleteDBSubnetGroup = actions.RdsDeleteDBSubnetGroup()
        self.DeleteEventSubscription = actions.RdsDeleteEventSubscription()
        self.DeleteOptionGroup = actions.RdsDeleteOptionGroup()
        self.DescribeAccountAttributes = actions.RdsDescribeAccountAttributes()
        self.DescribeCertificates = actions.RdsDescribeCertificates()
        self.DescribeDBClusterParameterGroups = actions.RdsDescribeDBClusterParameterGroups()
        self.DescribeDBClusterParameters = actions.RdsDescribeDBClusterParameters()
        self.DescribeDBClusterSnapshotAttributes = actions.RdsDescribeDBClusterSnapshotAttributes()
        self.DescribeDBClusterSnapshots = actions.RdsDescribeDBClusterSnapshots()
        self.DescribeDBClusters = actions.RdsDescribeDBClusters()
        self.DescribeDBEngineVersions = actions.RdsDescribeDBEngineVersions()
        self.DescribeDBInstances = actions.RdsDescribeDBInstances()
        self.DescribeDBLogFiles = actions.RdsDescribeDBLogFiles()
        self.DescribeDBParameterGroups = actions.RdsDescribeDBParameterGroups()
        self.DescribeDBParameters = actions.RdsDescribeDBParameters()
        self.DescribeDBSecurityGroups = actions.RdsDescribeDBSecurityGroups()
        self.DescribeDBSnapshotAttributes = actions.RdsDescribeDBSnapshotAttributes()
        self.DescribeDBSnapshots = actions.RdsDescribeDBSnapshots()
        self.DescribeDBSubnetGroups = actions.RdsDescribeDBSubnetGroups()
        self.DescribeEngineDefaultClusterParameters = actions.RdsDescribeEngineDefaultClusterParameters()
        self.DescribeEngineDefaultParameters = actions.RdsDescribeEngineDefaultParameters()
        self.DescribeEventCategories = actions.RdsDescribeEventCategories()
        self.DescribeEventSubscriptions = actions.RdsDescribeEventSubscriptions()
        self.DescribeEvents = actions.RdsDescribeEvents()
        self.DescribeOptionGroupOptions = actions.RdsDescribeOptionGroupOptions()
        self.DescribeOptionGroups = actions.RdsDescribeOptionGroups()
        self.DescribeOrderableDBInstanceOptions = actions.RdsDescribeOrderableDBInstanceOptions()
        self.DescribePendingMaintenanceActions = actions.RdsDescribePendingMaintenanceActions()
        self.DescribeReservedDBInstances = actions.RdsDescribeReservedDBInstances()
        self.DescribeReservedDBInstancesOfferings = actions.RdsDescribeReservedDBInstancesOfferings()
        self.DownloadCompleteDBLogFile = actions.RdsDownloadCompleteDBLogFile()
        self.DownloadDBLogFilePortion = actions.RdsDownloadDBLogFilePortion()
        self.FailoverDBCluster = actions.RdsFailoverDBCluster()
        self.ListTagsForResource = actions.RdsListTagsForResource()
        self.ModifyDBCluster = actions.RdsModifyDBCluster()
        self.ModifyDBClusterParameterGroup = actions.RdsModifyDBClusterParameterGroup()
        self.ModifyDBClusterSnapshotAttribute = actions.RdsModifyDBClusterSnapshotAttribute()
        self.ModifyDBInstance = actions.RdsModifyDBInstance()
        self.ModifyDBParameterGroup = actions.RdsModifyDBParameterGroup()
        self.ModifyDBSnapshotAttribute = actions.RdsModifyDBSnapshotAttribute()
        self.ModifyDBSubnetGroup = actions.RdsModifyDBSubnetGroup()
        self.ModifyEventSubscription = actions.RdsModifyEventSubscription()
        self.ModifyOptionGroup = actions.RdsModifyOptionGroup()
        self.PromoteReadReplica = actions.RdsPromoteReadReplica()
        self.PurchaseReservedDBInstancesOffering = actions.RdsPurchaseReservedDBInstancesOffering()
        self.RebootDBInstance = actions.RdsRebootDBInstance()
        self.RemoveSourceIdentifierFromSubscription = actions.RdsRemoveSourceIdentifierFromSubscription()
        self.RemoveTagsFromResource = actions.RdsRemoveTagsFromResource()
        self.ResetDBClusterParameterGroup = actions.RdsResetDBClusterParameterGroup()
        self.ResetDBParameterGroup = actions.RdsResetDBParameterGroup()
        self.RestoreDBClusterFromSnapshot = actions.RdsRestoreDBClusterFromSnapshot()
        self.RestoreDBClusterToPointInTime = actions.RdsRestoreDBClusterToPointInTime()
        self.RestoreDBInstanceFromDBSnapshot = actions.RdsRestoreDBInstanceFromDBSnapshot()
        self.RestoreDBInstanceToPointInTime = actions.RdsRestoreDBInstanceToPointInTime()
        self.RevokeDBSecurityGroupIngress = actions.RdsRevokeDBSecurityGroupIngress()
        self.StartDBInstance = actions.RdsStartDBInstance()
        self.StopDBInstance = actions.RdsStopDBInstance()


class Redshift:
    def __init__(self):
        self.all = IamAction("redshift",  all=True)
        self.AuthorizeClusterSecurityGroupIngress = actions.RedshiftAuthorizeClusterSecurityGroupIngress()
        self.AuthorizeSnapshotAccess = actions.RedshiftAuthorizeSnapshotAccess()
        self.CancelQuerySession = actions.RedshiftCancelQuerySession()
        self.CopyClusterSnapshot = actions.RedshiftCopyClusterSnapshot()
        self.CreateCluster = actions.RedshiftCreateCluster()
        self.CreateClusterParameterGroup = actions.RedshiftCreateClusterParameterGroup()
        self.CreateClusterSecurityGroup = actions.RedshiftCreateClusterSecurityGroup()
        self.CreateClusterSnapshot = actions.RedshiftCreateClusterSnapshot()
        self.CreateClusterSubnetGroup = actions.RedshiftCreateClusterSubnetGroup()
        self.CreateClusterUser = actions.RedshiftCreateClusterUser()
        self.CreateEventSubscription = actions.RedshiftCreateEventSubscription()
        self.CreateHsmClientCertificate = actions.RedshiftCreateHsmClientCertificate()
        self.CreateHsmConfiguration = actions.RedshiftCreateHsmConfiguration()
        self.CreateSnapshotCopyGrant = actions.RedshiftCreateSnapshotCopyGrant()
        self.CreateTags = actions.RedshiftCreateTags()
        self.DeleteCluster = actions.RedshiftDeleteCluster()
        self.DeleteClusterParameterGroup = actions.RedshiftDeleteClusterParameterGroup()
        self.DeleteClusterSecurityGroup = actions.RedshiftDeleteClusterSecurityGroup()
        self.DeleteClusterSnapshot = actions.RedshiftDeleteClusterSnapshot()
        self.DeleteClusterSubnetGroup = actions.RedshiftDeleteClusterSubnetGroup()
        self.DeleteEventSubscription = actions.RedshiftDeleteEventSubscription()
        self.DeleteHsmClientCertificate = actions.RedshiftDeleteHsmClientCertificate()
        self.DeleteHsmConfiguration = actions.RedshiftDeleteHsmConfiguration()
        self.DeleteSnapshotCopyGrant = actions.RedshiftDeleteSnapshotCopyGrant()
        self.DeleteTags = actions.RedshiftDeleteTags()
        self.DescribeClusterParameterGroups = actions.RedshiftDescribeClusterParameterGroups()
        self.DescribeClusterParameters = actions.RedshiftDescribeClusterParameters()
        self.DescribeClusterSecurityGroups = actions.RedshiftDescribeClusterSecurityGroups()
        self.DescribeClusterSnapshots = actions.RedshiftDescribeClusterSnapshots()
        self.DescribeClusterSubnetGroups = actions.RedshiftDescribeClusterSubnetGroups()
        self.DescribeClusterVersions = actions.RedshiftDescribeClusterVersions()
        self.DescribeClusters = actions.RedshiftDescribeClusters()
        self.DescribeDefaultClusterParameters = actions.RedshiftDescribeDefaultClusterParameters()
        self.DescribeEventCategories = actions.RedshiftDescribeEventCategories()
        self.DescribeEventSubscriptions = actions.RedshiftDescribeEventSubscriptions()
        self.DescribeEvents = actions.RedshiftDescribeEvents()
        self.DescribeHsmClientCertificates = actions.RedshiftDescribeHsmClientCertificates()
        self.DescribeHsmConfigurations = actions.RedshiftDescribeHsmConfigurations()
        self.DescribeLoggingStatus = actions.RedshiftDescribeLoggingStatus()
        self.DescribeOrderableClusterOptions = actions.RedshiftDescribeOrderableClusterOptions()
        self.DescribeReservedNodeOfferings = actions.RedshiftDescribeReservedNodeOfferings()
        self.DescribeReservedNodes = actions.RedshiftDescribeReservedNodes()
        self.DescribeResize = actions.RedshiftDescribeResize()
        self.DescribeSnapshotCopyGrants = actions.RedshiftDescribeSnapshotCopyGrants()
        self.DescribeTableRestoreStatus = actions.RedshiftDescribeTableRestoreStatus()
        self.DescribeTags = actions.RedshiftDescribeTags()
        self.DisableLogging = actions.RedshiftDisableLogging()
        self.DisableSnapshotCopy = actions.RedshiftDisableSnapshotCopy()
        self.EnableLogging = actions.RedshiftEnableLogging()
        self.EnableSnapshotCopy = actions.RedshiftEnableSnapshotCopy()
        self.GetClusterCredentials = actions.RedshiftGetClusterCredentials()
        self.JoinGroup = actions.RedshiftJoinGroup()
        self.ModifyCluster = actions.RedshiftModifyCluster()
        self.ModifyClusterIamRoles = actions.RedshiftModifyClusterIamRoles()
        self.ModifyClusterParameterGroup = actions.RedshiftModifyClusterParameterGroup()
        self.ModifyClusterSubnetGroup = actions.RedshiftModifyClusterSubnetGroup()
        self.ModifyEventSubscription = actions.RedshiftModifyEventSubscription()
        self.ModifySnapshotCopyRetentionPeriod = actions.RedshiftModifySnapshotCopyRetentionPeriod()
        self.PurchaseReservedNodeOffering = actions.RedshiftPurchaseReservedNodeOffering()
        self.RebootCluster = actions.RedshiftRebootCluster()
        self.ResetClusterParameterGroup = actions.RedshiftResetClusterParameterGroup()
        self.RestoreFromClusterSnapshot = actions.RedshiftRestoreFromClusterSnapshot()
        self.RestoreTableFromClusterSnapshot = actions.RedshiftRestoreTableFromClusterSnapshot()
        self.RevokeClusterSecurityGroupIngress = actions.RedshiftRevokeClusterSecurityGroupIngress()
        self.RevokeSnapshotAccess = actions.RedshiftRevokeSnapshotAccess()
        self.RotateEncryptionKey = actions.RedshiftRotateEncryptionKey()
        self.ViewQueriesInConsole = actions.RedshiftViewQueriesInConsole()


class Rekognition:
    def __init__(self):
        self.all = IamAction("rekognition",  all=True)
        self.CompareFaces = actions.RekognitionCompareFaces()
        self.CreateCollection = actions.RekognitionCreateCollection()
        self.CreateStreamProcessor = actions.RekognitionCreateStreamProcessor()
        self.DeleteCollection = actions.RekognitionDeleteCollection()
        self.DeleteFaces = actions.RekognitionDeleteFaces()
        self.DeleteStreamProcessor = actions.RekognitionDeleteStreamProcessor()
        self.DescribeStreamProcessor = actions.RekognitionDescribeStreamProcessor()
        self.DetectFaces = actions.RekognitionDetectFaces()
        self.DetectLabels = actions.RekognitionDetectLabels()
        self.DetectModerationLabels = actions.RekognitionDetectModerationLabels()
        self.DetectText = actions.RekognitionDetectText()
        self.GetCelebrityInfo = actions.RekognitionGetCelebrityInfo()
        self.GetCelebrityRecognition = actions.RekognitionGetCelebrityRecognition()
        self.GetContentModeration = actions.RekognitionGetContentModeration()
        self.GetFaceDetection = actions.RekognitionGetFaceDetection()
        self.GetFaceSearch = actions.RekognitionGetFaceSearch()
        self.GetLabelDetection = actions.RekognitionGetLabelDetection()
        self.GetPersonTracking = actions.RekognitionGetPersonTracking()
        self.IndexFaces = actions.RekognitionIndexFaces()
        self.ListCollections = actions.RekognitionListCollections()
        self.ListFaces = actions.RekognitionListFaces()
        self.ListStreamProcessors = actions.RekognitionListStreamProcessors()
        self.RecognizeCelebrities = actions.RekognitionRecognizeCelebrities()
        self.SearchFaces = actions.RekognitionSearchFaces()
        self.SearchFacesByImage = actions.RekognitionSearchFacesByImage()
        self.StartCelebrityRecognition = actions.RekognitionStartCelebrityRecognition()
        self.StartContentModeration = actions.RekognitionStartContentModeration()
        self.StartFaceDetection = actions.RekognitionStartFaceDetection()
        self.StartFaceSearch = actions.RekognitionStartFaceSearch()
        self.StartLabelDetection = actions.RekognitionStartLabelDetection()
        self.StartPersonTracking = actions.RekognitionStartPersonTracking()
        self.StartStreamProcessor = actions.RekognitionStartStreamProcessor()
        self.StopStreamProcessor = actions.RekognitionStopStreamProcessor()


class ResourceGroups:
    def __init__(self):
        self.all = IamAction("resource-groups",  all=True)
        self.CreateGroup = actions.ResourceGroupsCreateGroup()
        self.DeleteGroup = actions.ResourceGroupsDeleteGroup()
        self.GetGroup = actions.ResourceGroupsGetGroup()
        self.GetGroupQuery = actions.ResourceGroupsGetGroupQuery()
        self.GetTags = actions.ResourceGroupsGetTags()
        self.ListGroupResources = actions.ResourceGroupsListGroupResources()
        self.ListGroups = actions.ResourceGroupsListGroups()
        self.SearchResources = actions.ResourceGroupsSearchResources()
        self.Tag = actions.ResourceGroupsTag()
        self.Untag = actions.ResourceGroupsUntag()
        self.UpdateGroup = actions.ResourceGroupsUpdateGroup()
        self.UpdateGroupQuery = actions.ResourceGroupsUpdateGroupQuery()


class Route53:
    def __init__(self):
        self.all = IamAction("route53",  all=True)
        self.AssociateVPCWithHostedZone = actions.Route53AssociateVPCWithHostedZone()
        self.ChangeResourceRecordSets = actions.Route53ChangeResourceRecordSets()
        self.ChangeTagsForResource = actions.Route53ChangeTagsForResource()
        self.CreateHealthCheck = actions.Route53CreateHealthCheck()
        self.CreateHostedZone = actions.Route53CreateHostedZone()
        self.CreateReusableDelegationSet = actions.Route53CreateReusableDelegationSet()
        self.CreateTrafficPolicy = actions.Route53CreateTrafficPolicy()
        self.CreateTrafficPolicyInstance = actions.Route53CreateTrafficPolicyInstance()
        self.CreateTrafficPolicyVersion = actions.Route53CreateTrafficPolicyVersion()
        self.DeleteHealthCheck = actions.Route53DeleteHealthCheck()
        self.DeleteHostedZone = actions.Route53DeleteHostedZone()
        self.DeleteReusableDelegationSet = actions.Route53DeleteReusableDelegationSet()
        self.DeleteTrafficPolicy = actions.Route53DeleteTrafficPolicy()
        self.DeleteTrafficPolicyInstance = actions.Route53DeleteTrafficPolicyInstance()
        self.DisableDomainAutoRenew = actions.Route53DisableDomainAutoRenew()
        self.DisassociateVPCFromHostedZone = actions.Route53DisassociateVPCFromHostedZone()
        self.EnableDomainAutoRenew = actions.Route53EnableDomainAutoRenew()
        self.GetChange = actions.Route53GetChange()
        self.GetCheckerIpRanges = actions.Route53GetCheckerIpRanges()
        self.GetGeoLocation = actions.Route53GetGeoLocation()
        self.GetHealthCheck = actions.Route53GetHealthCheck()
        self.GetHealthCheckCount = actions.Route53GetHealthCheckCount()
        self.GetHealthCheckLastFailureReason = actions.Route53GetHealthCheckLastFailureReason()
        self.GetHealthCheckStatus = actions.Route53GetHealthCheckStatus()
        self.GetHostedZone = actions.Route53GetHostedZone()
        self.GetHostedZoneCount = actions.Route53GetHostedZoneCount()
        self.GetReusableDelegationSet = actions.Route53GetReusableDelegationSet()
        self.GetTrafficPolicy = actions.Route53GetTrafficPolicy()
        self.GetTrafficPolicyInstance = actions.Route53GetTrafficPolicyInstance()
        self.GetTrafficPolicyInstanceCount = actions.Route53GetTrafficPolicyInstanceCount()
        self.ListGeoLocations = actions.Route53ListGeoLocations()
        self.ListHealthChecks = actions.Route53ListHealthChecks()
        self.ListHostedZones = actions.Route53ListHostedZones()
        self.ListHostedZonesByName = actions.Route53ListHostedZonesByName()
        self.ListResourceRecordSets = actions.Route53ListResourceRecordSets()
        self.ListReusableDelegationSets = actions.Route53ListReusableDelegationSets()
        self.ListTagsForResource = actions.Route53ListTagsForResource()
        self.ListTagsForResources = actions.Route53ListTagsForResources()
        self.ListTrafficPolicies = actions.Route53ListTrafficPolicies()
        self.ListTrafficPolicyInstances = actions.Route53ListTrafficPolicyInstances()
        self.ListTrafficPolicyInstancesByHostedZone = actions.Route53ListTrafficPolicyInstancesByHostedZone()
        self.ListTrafficPolicyInstancesByPolicy = actions.Route53ListTrafficPolicyInstancesByPolicy()
        self.ListTrafficPolicyVersions = actions.Route53ListTrafficPolicyVersions()
        self.TestDNSAnswer = actions.Route53TestDNSAnswer()
        self.UpdateHealthCheck = actions.Route53UpdateHealthCheck()
        self.UpdateHostedZoneComment = actions.Route53UpdateHostedZoneComment()
        self.UpdateTrafficPolicyComment = actions.Route53UpdateTrafficPolicyComment()
        self.UpdateTrafficPolicyInstance = actions.Route53UpdateTrafficPolicyInstance()


class Route53Domains:
    def __init__(self):
        self.all = IamAction("route53domains",  all=True)
        self.CheckDomainAvailability = actions.Route53DomainsCheckDomainAvailability()
        self.DeleteTagsForDomain = actions.Route53DomainsDeleteTagsForDomain()
        self.DisableDomainAutoRenew = actions.Route53DomainsDisableDomainAutoRenew()
        self.DisableDomainTransferLock = actions.Route53DomainsDisableDomainTransferLock()
        self.EnableDomainAutoRenew = actions.Route53DomainsEnableDomainAutoRenew()
        self.EnableDomainTransferLock = actions.Route53DomainsEnableDomainTransferLock()
        self.GetContactReachabilityStatus = actions.Route53DomainsGetContactReachabilityStatus()
        self.GetDomainDetail = actions.Route53DomainsGetDomainDetail()
        self.GetDomainSuggestions = actions.Route53DomainsGetDomainSuggestions()
        self.GetOperationDetail = actions.Route53DomainsGetOperationDetail()
        self.ListDomains = actions.Route53DomainsListDomains()
        self.ListOperations = actions.Route53DomainsListOperations()
        self.ListTagsForDomain = actions.Route53DomainsListTagsForDomain()
        self.RegisterDomain = actions.Route53DomainsRegisterDomain()
        self.RenewDomain = actions.Route53DomainsRenewDomain()
        self.ResendContactReachabilityEmail = actions.Route53DomainsResendContactReachabilityEmail()
        self.RetrieveDomainAuthCode = actions.Route53DomainsRetrieveDomainAuthCode()
        self.TransferDomain = actions.Route53DomainsTransferDomain()
        self.UpdateDomainContact = actions.Route53DomainsUpdateDomainContact()
        self.UpdateDomainContactPrivacy = actions.Route53DomainsUpdateDomainContactPrivacy()
        self.UpdateDomainNameservers = actions.Route53DomainsUpdateDomainNameservers()
        self.UpdateTagsForDomain = actions.Route53DomainsUpdateTagsForDomain()
        self.ViewBilling = actions.Route53DomainsViewBilling()


class S3:
    def __init__(self):
        self.all = IamAction("s3",  all=True)
        self.AbortMultipartUpload = actions.S3AbortMultipartUpload()
        self.CreateBucket = actions.S3CreateBucket()
        self.DeleteBucket = actions.S3DeleteBucket()
        self.DeleteBucketPolicy = actions.S3DeleteBucketPolicy()
        self.DeleteBucketWebsite = actions.S3DeleteBucketWebsite()
        self.DeleteObject = actions.S3DeleteObject()
        self.DeleteObjectTagging = actions.S3DeleteObjectTagging()
        self.DeleteObjectVersion = actions.S3DeleteObjectVersion()
        self.DeleteObjectVersionTagging = actions.S3DeleteObjectVersionTagging()
        self.GetAccelerateConfiguration = actions.S3GetAccelerateConfiguration()
        self.GetAnalyticsConfiguration = actions.S3GetAnalyticsConfiguration()
        self.GetBucketAcl = actions.S3GetBucketAcl()
        self.GetBucketCORS = actions.S3GetBucketCORS()
        self.GetBucketLocation = actions.S3GetBucketLocation()
        self.GetBucketLogging = actions.S3GetBucketLogging()
        self.GetBucketNotification = actions.S3GetBucketNotification()
        self.GetBucketPolicy = actions.S3GetBucketPolicy()
        self.GetBucketRequestPayment = actions.S3GetBucketRequestPayment()
        self.GetBucketTagging = actions.S3GetBucketTagging()
        self.GetBucketVersioning = actions.S3GetBucketVersioning()
        self.GetBucketWebsite = actions.S3GetBucketWebsite()
        self.GetInventoryConfiguration = actions.S3GetInventoryConfiguration()
        self.GetIpConfiguration = actions.S3GetIpConfiguration()
        self.GetLifecycleConfiguration = actions.S3GetLifecycleConfiguration()
        self.GetMetricsConfiguration = actions.S3GetMetricsConfiguration()
        self.GetObject = actions.S3GetObject()
        self.GetObjectAcl = actions.S3GetObjectAcl()
        self.GetObjectTagging = actions.S3GetObjectTagging()
        self.GetObjectTorrent = actions.S3GetObjectTorrent()
        self.GetObjectVersion = actions.S3GetObjectVersion()
        self.GetObjectVersionAcl = actions.S3GetObjectVersionAcl()
        self.GetObjectVersionForReplication = actions.S3GetObjectVersionForReplication()
        self.GetObjectVersionTagging = actions.S3GetObjectVersionTagging()
        self.GetObjectVersionTorrent = actions.S3GetObjectVersionTorrent()
        self.GetReplicationConfiguration = actions.S3GetReplicationConfiguration()
        self.HeadBucket = actions.S3HeadBucket()
        self.ListAllMyBuckets = actions.S3ListAllMyBuckets()
        self.ListBucket = actions.S3ListBucket()
        self.ListBucketByTags = actions.S3ListBucketByTags()
        self.ListBucketMultipartUploads = actions.S3ListBucketMultipartUploads()
        self.ListBucketVersions = actions.S3ListBucketVersions()
        self.ListMultipartUploadParts = actions.S3ListMultipartUploadParts()
        self.ListObjects = actions.S3ListObjects()
        self.ObjectOwnerOverrideToBucketOwner = actions.S3ObjectOwnerOverrideToBucketOwner()
        self.PutAccelerateConfiguration = actions.S3PutAccelerateConfiguration()
        self.PutAnalyticsConfiguration = actions.S3PutAnalyticsConfiguration()
        self.PutBucketAcl = actions.S3PutBucketAcl()
        self.PutBucketCORS = actions.S3PutBucketCORS()
        self.PutBucketLogging = actions.S3PutBucketLogging()
        self.PutBucketNotification = actions.S3PutBucketNotification()
        self.PutBucketPolicy = actions.S3PutBucketPolicy()
        self.PutBucketRequestPayment = actions.S3PutBucketRequestPayment()
        self.PutBucketTagging = actions.S3PutBucketTagging()
        self.PutBucketVersioning = actions.S3PutBucketVersioning()
        self.PutBucketWebsite = actions.S3PutBucketWebsite()
        self.PutInventoryConfiguration = actions.S3PutInventoryConfiguration()
        self.PutIpConfiguration = actions.S3PutIpConfiguration()
        self.PutLifecycleConfiguration = actions.S3PutLifecycleConfiguration()
        self.PutMetricsConfiguration = actions.S3PutMetricsConfiguration()
        self.PutObject = actions.S3PutObject()
        self.PutObjectAcl = actions.S3PutObjectAcl()
        self.PutObjectTagging = actions.S3PutObjectTagging()
        self.PutObjectVersionAcl = actions.S3PutObjectVersionAcl()
        self.PutObjectVersionTagging = actions.S3PutObjectVersionTagging()
        self.PutReplicationConfiguration = actions.S3PutReplicationConfiguration()
        self.ReplicateDelete = actions.S3ReplicateDelete()
        self.ReplicateObject = actions.S3ReplicateObject()
        self.ReplicateTags = actions.S3ReplicateTags()
        self.RestoreObject = actions.S3RestoreObject()


class Sagemaker:
    def __init__(self):
        self.all = IamAction("sagemaker",  all=True)
        self.AddTags = actions.SagemakerAddTags()
        self.CreateEndpoint = actions.SagemakerCreateEndpoint()
        self.CreateEndpointConfig = actions.SagemakerCreateEndpointConfig()
        self.CreateModel = actions.SagemakerCreateModel()
        self.CreateNotebookInstance = actions.SagemakerCreateNotebookInstance()
        self.CreatePresignedNotebookInstanceUrl = actions.SagemakerCreatePresignedNotebookInstanceUrl()
        self.CreateTrainingJob = actions.SagemakerCreateTrainingJob()
        self.DeleteEndpoint = actions.SagemakerDeleteEndpoint()
        self.DeleteEndpointConfig = actions.SagemakerDeleteEndpointConfig()
        self.DeleteModel = actions.SagemakerDeleteModel()
        self.DeleteNotebookInstance = actions.SagemakerDeleteNotebookInstance()
        self.DeleteTags = actions.SagemakerDeleteTags()
        self.DescribeEndpoint = actions.SagemakerDescribeEndpoint()
        self.DescribeEndpointConfig = actions.SagemakerDescribeEndpointConfig()
        self.DescribeModel = actions.SagemakerDescribeModel()
        self.DescribeNotebookInstance = actions.SagemakerDescribeNotebookInstance()
        self.DescribeTrainingJob = actions.SagemakerDescribeTrainingJob()
        self.InvokeEndpoint = actions.SagemakerInvokeEndpoint()
        self.ListEndpointConfigs = actions.SagemakerListEndpointConfigs()
        self.ListEndpoints = actions.SagemakerListEndpoints()
        self.ListModels = actions.SagemakerListModels()
        self.ListNotebookInstances = actions.SagemakerListNotebookInstances()
        self.ListTags = actions.SagemakerListTags()
        self.ListTrainingJobs = actions.SagemakerListTrainingJobs()
        self.StartNotebookInstance = actions.SagemakerStartNotebookInstance()
        self.StopNotebookInstance = actions.SagemakerStopNotebookInstance()
        self.StopTrainingJob = actions.SagemakerStopTrainingJob()
        self.UpdateEndpoint = actions.SagemakerUpdateEndpoint()
        self.UpdateEndpointWeightsAndCapacities = actions.SagemakerUpdateEndpointWeightsAndCapacities()
        self.UpdateNotebookInstance = actions.SagemakerUpdateNotebookInstance()


class Sdb:
    def __init__(self):
        self.all = IamAction("sdb",  all=True)
        self.BatchDeleteAttributes = actions.SdbBatchDeleteAttributes()
        self.BatchPutAttributes = actions.SdbBatchPutAttributes()
        self.CreateDomain = actions.SdbCreateDomain()
        self.DeleteAttributes = actions.SdbDeleteAttributes()
        self.DeleteDomain = actions.SdbDeleteDomain()
        self.DomainMetadata = actions.SdbDomainMetadata()
        self.GetAttributes = actions.SdbGetAttributes()
        self.ListDomains = actions.SdbListDomains()
        self.PutAttributes = actions.SdbPutAttributes()
        self.Select = actions.SdbSelect()


class Serverlessrepo:
    def __init__(self):
        self.all = IamAction("serverlessrepo",  all=True)
        self.CreateApplication = actions.ServerlessrepoCreateApplication()
        self.CreateApplicationVersion = actions.ServerlessrepoCreateApplicationVersion()
        self.CreateCloudFormationChangeSet = actions.ServerlessrepoCreateCloudFormationChangeSet()
        self.DeleteApplication = actions.ServerlessrepoDeleteApplication()
        self.GetApplication = actions.ServerlessrepoGetApplication()
        self.GetApplicationPolicy = actions.ServerlessrepoGetApplicationPolicy()
        self.ListApplicationVersions = actions.ServerlessrepoListApplicationVersions()
        self.ListApplications = actions.ServerlessrepoListApplications()
        self.PutApplicationPolicy = actions.ServerlessrepoPutApplicationPolicy()
        self.SearchApplications = actions.ServerlessrepoSearchApplications()
        self.UpdateApplication = actions.ServerlessrepoUpdateApplication()


class Servicecatalog:
    def __init__(self):
        self.all = IamAction("servicecatalog",  all=True)
        self.AcceptPortfolioShare = actions.ServicecatalogAcceptPortfolioShare()
        self.AssociatePrincipalWithPortfolio = actions.ServicecatalogAssociatePrincipalWithPortfolio()
        self.AssociateProductWithPortfolio = actions.ServicecatalogAssociateProductWithPortfolio()
        self.CreateConstraint = actions.ServicecatalogCreateConstraint()
        self.CreatePortfolio = actions.ServicecatalogCreatePortfolio()
        self.CreatePortfolioShare = actions.ServicecatalogCreatePortfolioShare()
        self.CreateProduct = actions.ServicecatalogCreateProduct()
        self.CreateProvisioningArtifact = actions.ServicecatalogCreateProvisioningArtifact()
        self.DeleteConstraint = actions.ServicecatalogDeleteConstraint()
        self.DeletePortfolio = actions.ServicecatalogDeletePortfolio()
        self.DeletePortfolioShare = actions.ServicecatalogDeletePortfolioShare()
        self.DeleteProduct = actions.ServicecatalogDeleteProduct()
        self.DeleteProvisioningArtifact = actions.ServicecatalogDeleteProvisioningArtifact()
        self.DescribeConstraint = actions.ServicecatalogDescribeConstraint()
        self.DescribePortfolio = actions.ServicecatalogDescribePortfolio()
        self.DescribeProduct = actions.ServicecatalogDescribeProduct()
        self.DescribeProductAsAdmin = actions.ServicecatalogDescribeProductAsAdmin()
        self.DescribeProductView = actions.ServicecatalogDescribeProductView()
        self.DescribeProvisioningArtifact = actions.ServicecatalogDescribeProvisioningArtifact()
        self.DescribeProvisioningParameters = actions.ServicecatalogDescribeProvisioningParameters()
        self.DescribeRecord = actions.ServicecatalogDescribeRecord()
        self.DisassociatePrincipalFromPortfolio = actions.ServicecatalogDisassociatePrincipalFromPortfolio()
        self.DisassociateProductFromPortfolio = actions.ServicecatalogDisassociateProductFromPortfolio()
        self.ListAcceptedPortfolioShares = actions.ServicecatalogListAcceptedPortfolioShares()
        self.ListConstraintsForPortfolio = actions.ServicecatalogListConstraintsForPortfolio()
        self.ListLaunchPaths = actions.ServicecatalogListLaunchPaths()
        self.ListPortfolioAccess = actions.ServicecatalogListPortfolioAccess()
        self.ListPortfolios = actions.ServicecatalogListPortfolios()
        self.ListPortfoliosForProduct = actions.ServicecatalogListPortfoliosForProduct()
        self.ListPrincipalsForPortfolio = actions.ServicecatalogListPrincipalsForPortfolio()
        self.ListProvisioningArtifacts = actions.ServicecatalogListProvisioningArtifacts()
        self.ListRecordHistory = actions.ServicecatalogListRecordHistory()
        self.ProvisionProduct = actions.ServicecatalogProvisionProduct()
        self.RejectPortfolioShare = actions.ServicecatalogRejectPortfolioShare()
        self.ScanProvisionedProducts = actions.ServicecatalogScanProvisionedProducts()
        self.SearchProducts = actions.ServicecatalogSearchProducts()
        self.SearchProductsAsAdmin = actions.ServicecatalogSearchProductsAsAdmin()
        self.TerminateProvisionedProduct = actions.ServicecatalogTerminateProvisionedProduct()
        self.UpdateConstraint = actions.ServicecatalogUpdateConstraint()
        self.UpdatePortfolio = actions.ServicecatalogUpdatePortfolio()
        self.UpdateProduct = actions.ServicecatalogUpdateProduct()
        self.UpdateProvisionedProduct = actions.ServicecatalogUpdateProvisionedProduct()
        self.UpdateProvisioningArtifact = actions.ServicecatalogUpdateProvisioningArtifact()


class ServiceDiscovery:
    def __init__(self):
        self.all = IamAction("servicediscovery",  all=True)
        self.CreatePrivateDnsNamespace = actions.ServicediscoveryCreatePrivateDnsNamespace()
        self.CreatePublicDnsNamespace = actions.ServicediscoveryCreatePublicDnsNamespace()
        self.CreateService = actions.ServicediscoveryCreateService()
        self.DeleteNamespace = actions.ServicediscoveryDeleteNamespace()
        self.DeleteService = actions.ServicediscoveryDeleteService()
        self.DeregisterInstance = actions.ServicediscoveryDeregisterInstance()
        self.GetInstance = actions.ServicediscoveryGetInstance()
        self.GetInstancesHealthStatus = actions.ServicediscoveryGetInstancesHealthStatus()
        self.GetNamespace = actions.ServicediscoveryGetNamespace()
        self.GetOperation = actions.ServicediscoveryGetOperation()
        self.GetService = actions.ServicediscoveryGetService()
        self.ListInstances = actions.ServicediscoveryListInstances()
        self.ListNamespaces = actions.ServicediscoveryListNamespaces()
        self.ListOperations = actions.ServicediscoveryListOperations()
        self.ListServices = actions.ServicediscoveryListServices()
        self.RegisterInstance = actions.ServicediscoveryRegisterInstance()
        self.UpdateInstanceHeartbeatStatus = actions.ServicediscoveryUpdateInstanceHeartbeatStatus()
        self.UpdateService = actions.ServicediscoveryUpdateService()


class Ses:
    def __init__(self):
        self.all = IamAction("ses",  all=True)
        self.CloneReceiptRuleSet = actions.SesCloneReceiptRuleSet()
        self.CreateConfigurationSet = actions.SesCreateConfigurationSet()
        self.CreateConfigurationSetEventDestination = actions.SesCreateConfigurationSetEventDestination()
        self.CreateConfigurationSetTrackingOptions = actions.SesCreateConfigurationSetTrackingOptions()
        self.CreateCustomVerificationEmailTemplate = actions.SesCreateCustomVerificationEmailTemplate()
        self.CreateReceiptFilter = actions.SesCreateReceiptFilter()
        self.CreateReceiptRule = actions.SesCreateReceiptRule()
        self.CreateReceiptRuleSet = actions.SesCreateReceiptRuleSet()
        self.CreateTemplate = actions.SesCreateTemplate()
        self.DeleteConfigurationSet = actions.SesDeleteConfigurationSet()
        self.DeleteConfigurationSetEventDestination = actions.SesDeleteConfigurationSetEventDestination()
        self.DeleteConfigurationSetTrackingOptions = actions.SesDeleteConfigurationSetTrackingOptions()
        self.DeleteCustomVerificationEmailTemplate = actions.SesDeleteCustomVerificationEmailTemplate()
        self.DeleteIdentity = actions.SesDeleteIdentity()
        self.DeleteIdentityPolicy = actions.SesDeleteIdentityPolicy()
        self.DeleteReceiptFilter = actions.SesDeleteReceiptFilter()
        self.DeleteReceiptRule = actions.SesDeleteReceiptRule()
        self.DeleteReceiptRuleSet = actions.SesDeleteReceiptRuleSet()
        self.DeleteTemplate = actions.SesDeleteTemplate()
        self.DeleteVerifiedEmailAddress = actions.SesDeleteVerifiedEmailAddress()
        self.DescribeActiveReceiptRuleSet = actions.SesDescribeActiveReceiptRuleSet()
        self.DescribeConfigurationSet = actions.SesDescribeConfigurationSet()
        self.DescribeReceiptRule = actions.SesDescribeReceiptRule()
        self.DescribeReceiptRuleSet = actions.SesDescribeReceiptRuleSet()
        self.GetAccountSendingEnabled = actions.SesGetAccountSendingEnabled()
        self.GetCustomVerificationEmailTemplate = actions.SesGetCustomVerificationEmailTemplate()
        self.GetIdentityDkimAttributes = actions.SesGetIdentityDkimAttributes()
        self.GetIdentityMailFromDomainAttributes = actions.SesGetIdentityMailFromDomainAttributes()
        self.GetIdentityNotificationAttributes = actions.SesGetIdentityNotificationAttributes()
        self.GetIdentityPolicies = actions.SesGetIdentityPolicies()
        self.GetIdentityVerificationAttributes = actions.SesGetIdentityVerificationAttributes()
        self.GetSendQuota = actions.SesGetSendQuota()
        self.GetSendStatistics = actions.SesGetSendStatistics()
        self.GetTemplate = actions.SesGetTemplate()
        self.ListConfigurationSets = actions.SesListConfigurationSets()
        self.ListCustomVerificationEmailTemplates = actions.SesListCustomVerificationEmailTemplates()
        self.ListIdentities = actions.SesListIdentities()
        self.ListIdentityPolicies = actions.SesListIdentityPolicies()
        self.ListReceiptFilters = actions.SesListReceiptFilters()
        self.ListReceiptRuleSets = actions.SesListReceiptRuleSets()
        self.ListTemplates = actions.SesListTemplates()
        self.ListVerifiedEmailAddresses = actions.SesListVerifiedEmailAddresses()
        self.PutIdentityPolicy = actions.SesPutIdentityPolicy()
        self.ReorderReceiptRuleSet = actions.SesReorderReceiptRuleSet()
        self.SendBounce = actions.SesSendBounce()
        self.SendBulkTemplatedEmail = actions.SesSendBulkTemplatedEmail()
        self.SendCustomVerificationEmail = actions.SesSendCustomVerificationEmail()
        self.SendEmail = actions.SesSendEmail()
        self.SendRawEmail = actions.SesSendRawEmail()
        self.SendTemplatedEmail = actions.SesSendTemplatedEmail()
        self.SetActiveReceiptRuleSet = actions.SesSetActiveReceiptRuleSet()
        self.SetIdentityDkimEnabled = actions.SesSetIdentityDkimEnabled()
        self.SetIdentityFeedbackForwardingEnabled = actions.SesSetIdentityFeedbackForwardingEnabled()
        self.SetIdentityHeadersInNotificationsEnabled = actions.SesSetIdentityHeadersInNotificationsEnabled()
        self.SetIdentityMailFromDomain = actions.SesSetIdentityMailFromDomain()
        self.SetIdentityNotificationTopic = actions.SesSetIdentityNotificationTopic()
        self.SetReceiptRulePosition = actions.SesSetReceiptRulePosition()
        self.TestRenderTemplate = actions.SesTestRenderTemplate()
        self.UpdateAccountSendingEnabled = actions.SesUpdateAccountSendingEnabled()
        self.UpdateConfigurationSetEventDestination = actions.SesUpdateConfigurationSetEventDestination()
        self.UpdateConfigurationSetReputationMetricsEnabled = actions.SesUpdateConfigurationSetReputationMetricsEnabled()
        self.UpdateConfigurationSetSendingEnabled = actions.SesUpdateConfigurationSetSendingEnabled()
        self.UpdateConfigurationSetTrackingOptions = actions.SesUpdateConfigurationSetTrackingOptions()
        self.UpdateCustomVerificationEmailTemplate = actions.SesUpdateCustomVerificationEmailTemplate()
        self.UpdateReceiptRule = actions.SesUpdateReceiptRule()
        self.UpdateTemplate = actions.SesUpdateTemplate()
        self.VerifyDomainDkim = actions.SesVerifyDomainDkim()
        self.VerifyDomainIdentity = actions.SesVerifyDomainIdentity()
        self.VerifyEmailAddress = actions.SesVerifyEmailAddress()
        self.VerifyEmailIdentity = actions.SesVerifyEmailIdentity()


class Shield:
    def __init__(self):
        self.all = IamAction("shield",  all=True)
        self.CreateProtection = actions.ShieldCreateProtection()
        self.CreateSubscription = actions.ShieldCreateSubscription()
        self.DeleteProtection = actions.ShieldDeleteProtection()
        self.DeleteSubscription = actions.ShieldDeleteSubscription()
        self.DescribeAttack = actions.ShieldDescribeAttack()
        self.DescribeProtection = actions.ShieldDescribeProtection()
        self.DescribeSubscription = actions.ShieldDescribeSubscription()
        self.ListAttacks = actions.ShieldListAttacks()
        self.ListProtections = actions.ShieldListProtections()


class Signer:
    def __init__(self):
        self.all = IamAction("signer",  all=True)
        self.DescribeSigningJob = actions.SignerDescribeSigningJob()
        self.ListSigningJobs = actions.SignerListSigningJobs()
        self.StartSigningJob = actions.SignerStartSigningJob()


class Snowball:
    def __init__(self):
        self.all = IamAction("snowball",  all=True)
        self.CancelCluster = actions.SnowballCancelCluster()
        self.CancelJob = actions.SnowballCancelJob()
        self.CreateAddress = actions.SnowballCreateAddress()
        self.CreateCluster = actions.SnowballCreateCluster()
        self.CreateJob = actions.SnowballCreateJob()
        self.DescribeAddress = actions.SnowballDescribeAddress()
        self.DescribeAddresses = actions.SnowballDescribeAddresses()
        self.DescribeCluster = actions.SnowballDescribeCluster()
        self.DescribeJob = actions.SnowballDescribeJob()
        self.GetJobManifest = actions.SnowballGetJobManifest()
        self.GetJobUnlockCode = actions.SnowballGetJobUnlockCode()
        self.GetSnowballUsage = actions.SnowballGetSnowballUsage()
        self.ListClusterJobs = actions.SnowballListClusterJobs()
        self.ListClusters = actions.SnowballListClusters()
        self.ListJobs = actions.SnowballListJobs()
        self.UpdateCluster = actions.SnowballUpdateCluster()
        self.UpdateJob = actions.SnowballUpdateJob()


class Sns:
    def __init__(self):
        self.all = IamAction("sns",  all=True)
        self.AddPermission = actions.SnsAddPermission()
        self.CheckIfPhoneNumberIsOptedOut = actions.SnsCheckIfPhoneNumberIsOptedOut()
        self.ConfirmSubscription = actions.SnsConfirmSubscription()
        self.CreatePlatformApplication = actions.SnsCreatePlatformApplication()
        self.CreatePlatformEndpoint = actions.SnsCreatePlatformEndpoint()
        self.CreateTopic = actions.SnsCreateTopic()
        self.DeleteEndpoint = actions.SnsDeleteEndpoint()
        self.DeletePlatformApplication = actions.SnsDeletePlatformApplication()
        self.DeleteTopic = actions.SnsDeleteTopic()
        self.GetEndpointAttributes = actions.SnsGetEndpointAttributes()
        self.GetPlatformApplicationAttributes = actions.SnsGetPlatformApplicationAttributes()
        self.GetSMSAttributes = actions.SnsGetSMSAttributes()
        self.GetSubscriptionAttributes = actions.SnsGetSubscriptionAttributes()
        self.GetTopicAttributes = actions.SnsGetTopicAttributes()
        self.ListEndpointsByPlatformApplication = actions.SnsListEndpointsByPlatformApplication()
        self.ListPhoneNumbersOptedOut = actions.SnsListPhoneNumbersOptedOut()
        self.ListPlatformApplications = actions.SnsListPlatformApplications()
        self.ListSubscriptions = actions.SnsListSubscriptions()
        self.ListSubscriptionsByTopic = actions.SnsListSubscriptionsByTopic()
        self.ListTopics = actions.SnsListTopics()
        self.OptInPhoneNumber = actions.SnsOptInPhoneNumber()
        self.Publish = actions.SnsPublish()
        self.RemovePermission = actions.SnsRemovePermission()
        self.SetEndpointAttributes = actions.SnsSetEndpointAttributes()
        self.SetPlatformApplicationAttributes = actions.SnsSetPlatformApplicationAttributes()
        self.SetSMSAttributes = actions.SnsSetSMSAttributes()
        self.SetSubscriptionAttributes = actions.SnsSetSubscriptionAttributes()
        self.SetTopicAttributes = actions.SnsSetTopicAttributes()
        self.Subscribe = actions.SnsSubscribe()
        self.Unsubscribe = actions.SnsUnsubscribe()


class Sqs:
    def __init__(self):
        self.all = IamAction("sqs",  all=True)
        self.AddPermission = actions.SqsAddPermission()
        self.ChangeMessageVisibility = actions.SqsChangeMessageVisibility()
        self.ChangeMessageVisibilityBatch = actions.SqsChangeMessageVisibilityBatch()
        self.CreateQueue = actions.SqsCreateQueue()
        self.DeleteMessage = actions.SqsDeleteMessage()
        self.DeleteMessageBatch = actions.SqsDeleteMessageBatch()
        self.DeleteQueue = actions.SqsDeleteQueue()
        self.GetQueueAttributes = actions.SqsGetQueueAttributes()
        self.GetQueueUrl = actions.SqsGetQueueUrl()
        self.ListDeadLetterSourceQueues = actions.SqsListDeadLetterSourceQueues()
        self.ListQueueTags = actions.SqsListQueueTags()
        self.ListQueues = actions.SqsListQueues()
        self.PurgeQueue = actions.SqsPurgeQueue()
        self.ReceiveMessage = actions.SqsReceiveMessage()
        self.RemovePermission = actions.SqsRemovePermission()
        self.SendMessage = actions.SqsSendMessage()
        self.SendMessageBatch = actions.SqsSendMessageBatch()
        self.SetQueueAttributes = actions.SqsSetQueueAttributes()
        self.TagQueue = actions.SqsTagQueue()
        self.UntagQueue = actions.SqsUntagQueue()


class Ssm:
    def __init__(self):
        self.all = IamAction("ssm",  all=True)
        self.AddTagsToResource = actions.SsmAddTagsToResource()
        self.CancelCommand = actions.SsmCancelCommand()
        self.CreateActivation = actions.SsmCreateActivation()
        self.CreateAssociation = actions.SsmCreateAssociation()
        self.CreateAssociationBatch = actions.SsmCreateAssociationBatch()
        self.CreateDocument = actions.SsmCreateDocument()
        self.CreateMaintenanceWindow = actions.SsmCreateMaintenanceWindow()
        self.CreatePatchBaseline = actions.SsmCreatePatchBaseline()
        self.CreateResourceDataSync = actions.SsmCreateResourceDataSync()
        self.DeleteActivation = actions.SsmDeleteActivation()
        self.DeleteAssociation = actions.SsmDeleteAssociation()
        self.DeleteDocument = actions.SsmDeleteDocument()
        self.DeleteMaintenanceWindow = actions.SsmDeleteMaintenanceWindow()
        self.DeleteParameter = actions.SsmDeleteParameter()
        self.DeleteParameters = actions.SsmDeleteParameters()
        self.DeletePatchBaseline = actions.SsmDeletePatchBaseline()
        self.DeleteResourceDataSync = actions.SsmDeleteResourceDataSync()
        self.DeregisterManagedInstance = actions.SsmDeregisterManagedInstance()
        self.DeregisterPatchBaselineForPatchGroup = actions.SsmDeregisterPatchBaselineForPatchGroup()
        self.DeregisterTargetFromMaintenanceWindow = actions.SsmDeregisterTargetFromMaintenanceWindow()
        self.DeregisterTaskFromMaintenanceWindow = actions.SsmDeregisterTaskFromMaintenanceWindow()
        self.DescribeActivations = actions.SsmDescribeActivations()
        self.DescribeAssociation = actions.SsmDescribeAssociation()
        self.DescribeAutomationExecutions = actions.SsmDescribeAutomationExecutions()
        self.DescribeAutomationStepExecutions = actions.SsmDescribeAutomationStepExecutions()
        self.DescribeAvailablePatches = actions.SsmDescribeAvailablePatches()
        self.DescribeDocument = actions.SsmDescribeDocument()
        self.DescribeDocumentParameters = actions.SsmDescribeDocumentParameters()
        self.DescribeDocumentPermission = actions.SsmDescribeDocumentPermission()
        self.DescribeEffectiveInstanceAssociations = actions.SsmDescribeEffectiveInstanceAssociations()
        self.DescribeEffectivePatchesForPatchBaseline = actions.SsmDescribeEffectivePatchesForPatchBaseline()
        self.DescribeInstanceAssociationsStatus = actions.SsmDescribeInstanceAssociationsStatus()
        self.DescribeInstanceInformation = actions.SsmDescribeInstanceInformation()
        self.DescribeInstancePatchStates = actions.SsmDescribeInstancePatchStates()
        self.DescribeInstancePatchStatesForPatchGroup = actions.SsmDescribeInstancePatchStatesForPatchGroup()
        self.DescribeInstancePatches = actions.SsmDescribeInstancePatches()
        self.DescribeInstanceProperties = actions.SsmDescribeInstanceProperties()
        self.DescribeMaintenanceWindowExecutionTaskInvocations = actions.SsmDescribeMaintenanceWindowExecutionTaskInvocations()
        self.DescribeMaintenanceWindowExecutionTasks = actions.SsmDescribeMaintenanceWindowExecutionTasks()
        self.DescribeMaintenanceWindowExecutions = actions.SsmDescribeMaintenanceWindowExecutions()
        self.DescribeMaintenanceWindowTargets = actions.SsmDescribeMaintenanceWindowTargets()
        self.DescribeMaintenanceWindowTasks = actions.SsmDescribeMaintenanceWindowTasks()
        self.DescribeMaintenanceWindows = actions.SsmDescribeMaintenanceWindows()
        self.DescribeParameters = actions.SsmDescribeParameters()
        self.DescribePatchBaselines = actions.SsmDescribePatchBaselines()
        self.DescribePatchGroupState = actions.SsmDescribePatchGroupState()
        self.DescribePatchGroups = actions.SsmDescribePatchGroups()
        self.GetAutomationExecution = actions.SsmGetAutomationExecution()
        self.GetCommandInvocation = actions.SsmGetCommandInvocation()
        self.GetDefaultPatchBaseline = actions.SsmGetDefaultPatchBaseline()
        self.GetDeployablePatchSnapshotForInstance = actions.SsmGetDeployablePatchSnapshotForInstance()
        self.GetDocument = actions.SsmGetDocument()
        self.GetInventory = actions.SsmGetInventory()
        self.GetInventorySchema = actions.SsmGetInventorySchema()
        self.GetMaintenanceWindow = actions.SsmGetMaintenanceWindow()
        self.GetMaintenanceWindowExecution = actions.SsmGetMaintenanceWindowExecution()
        self.GetMaintenanceWindowExecutionTask = actions.SsmGetMaintenanceWindowExecutionTask()
        self.GetMaintenanceWindowExecutionTaskInvocation = actions.SsmGetMaintenanceWindowExecutionTaskInvocation()
        self.GetMaintenanceWindowTask = actions.SsmGetMaintenanceWindowTask()
        self.GetManifest = actions.SsmGetManifest()
        self.GetParameter = actions.SsmGetParameter()
        self.GetParameterHistory = actions.SsmGetParameterHistory()
        self.GetParameters = actions.SsmGetParameters()
        self.GetParametersByPath = actions.SsmGetParametersByPath()
        self.GetPatchBaseline = actions.SsmGetPatchBaseline()
        self.GetPatchBaselineForPatchGroup = actions.SsmGetPatchBaselineForPatchGroup()
        self.ListAssociationVersions = actions.SsmListAssociationVersions()
        self.ListAssociations = actions.SsmListAssociations()
        self.ListCommandInvocations = actions.SsmListCommandInvocations()
        self.ListCommands = actions.SsmListCommands()
        self.ListDocumentVersions = actions.SsmListDocumentVersions()
        self.ListDocuments = actions.SsmListDocuments()
        self.ListInstanceAssociations = actions.SsmListInstanceAssociations()
        self.ListInventoryEntries = actions.SsmListInventoryEntries()
        self.ListResourceDataSync = actions.SsmListResourceDataSync()
        self.ListTagsForResource = actions.SsmListTagsForResource()
        self.ModifyDocumentPermission = actions.SsmModifyDocumentPermission()
        self.PutComplianceItems = actions.SsmPutComplianceItems()
        self.PutConfigurePackageResult = actions.SsmPutConfigurePackageResult()
        self.PutInventory = actions.SsmPutInventory()
        self.PutParameter = actions.SsmPutParameter()
        self.RegisterDefaultPatchBaseline = actions.SsmRegisterDefaultPatchBaseline()
        self.RegisterPatchBaselineForPatchGroup = actions.SsmRegisterPatchBaselineForPatchGroup()
        self.RegisterTargetWithMaintenanceWindow = actions.SsmRegisterTargetWithMaintenanceWindow()
        self.RegisterTaskWithMaintenanceWindow = actions.SsmRegisterTaskWithMaintenanceWindow()
        self.RemoveTagsFromResource = actions.SsmRemoveTagsFromResource()
        self.SendAutomationSignal = actions.SsmSendAutomationSignal()
        self.SendCommand = actions.SsmSendCommand()
        self.StartAssociationsOnce = actions.SsmStartAssociationsOnce()
        self.StartAutomationExecution = actions.SsmStartAutomationExecution()
        self.StopAutomationExecution = actions.SsmStopAutomationExecution()
        self.UpdateAssociation = actions.SsmUpdateAssociation()
        self.UpdateAssociationStatus = actions.SsmUpdateAssociationStatus()
        self.UpdateDocument = actions.SsmUpdateDocument()
        self.UpdateDocumentDefaultVersion = actions.SsmUpdateDocumentDefaultVersion()
        self.UpdateInstanceAssociationStatus = actions.SsmUpdateInstanceAssociationStatus()
        self.UpdateInstanceInformation = actions.SsmUpdateInstanceInformation()
        self.UpdateMaintenanceWindow = actions.SsmUpdateMaintenanceWindow()
        self.UpdateMaintenanceWindowTarget = actions.SsmUpdateMaintenanceWindowTarget()
        self.UpdateMaintenanceWindowTask = actions.SsmUpdateMaintenanceWindowTask()
        self.UpdateManagedInstanceRole = actions.SsmUpdateManagedInstanceRole()
        self.UpdatePatchBaseline = actions.SsmUpdatePatchBaseline()


class Sso:
    def __init__(self):
        self.all = IamAction("sso",  all=True)
        self.AssociateDirectory = actions.SsoAssociateDirectory()
        self.AssociateProfile = actions.SsoAssociateProfile()
        self.CreateApplicationInstance = actions.SsoCreateApplicationInstance()
        self.CreateApplicationInstanceCertificate = actions.SsoCreateApplicationInstanceCertificate()
        self.CreatePermissionSet = actions.SsoCreatePermissionSet()
        self.CreateProfile = actions.SsoCreateProfile()
        self.CreateTrust = actions.SsoCreateTrust()
        self.DeleteApplicationInstance = actions.SsoDeleteApplicationInstance()
        self.DeleteApplicationInstanceCertificate = actions.SsoDeleteApplicationInstanceCertificate()
        self.DeletePermissionSet = actions.SsoDeletePermissionSet()
        self.DeletePermissionsPolicy = actions.SsoDeletePermissionsPolicy()
        self.DeleteProfile = actions.SsoDeleteProfile()
        self.DescribePermissionsPolicies = actions.SsoDescribePermissionsPolicies()
        self.DisassociateDirectory = actions.SsoDisassociateDirectory()
        self.DisassociateProfile = actions.SsoDisassociateProfile()
        self.GetApplicationInstance = actions.SsoGetApplicationInstance()
        self.GetApplicationTemplate = actions.SsoGetApplicationTemplate()
        self.GetPermissionSet = actions.SsoGetPermissionSet()
        self.GetProfile = actions.SsoGetProfile()
        self.GetSSOStatus = actions.SsoGetSSOStatus()
        self.GetTrust = actions.SsoGetTrust()
        self.ImportApplicationInstanceServiceProviderMetadata = actions.SsoImportApplicationInstanceServiceProviderMetadata()
        self.ListApplicationInstanceCertificates = actions.SsoListApplicationInstanceCertificates()
        self.ListApplicationInstances = actions.SsoListApplicationInstances()
        self.ListApplicationTemplates = actions.SsoListApplicationTemplates()
        self.ListDirectoryAssociations = actions.SsoListDirectoryAssociations()
        self.ListPermissionSets = actions.SsoListPermissionSets()
        self.ListProfileAssociations = actions.SsoListProfileAssociations()
        self.ListProfiles = actions.SsoListProfiles()
        self.PutPermissionsPolicy = actions.SsoPutPermissionsPolicy()
        self.StartSSO = actions.SsoStartSSO()
        self.UpdateApplicationInstanceActiveCertificate = actions.SsoUpdateApplicationInstanceActiveCertificate()
        self.UpdateApplicationInstanceDisplayData = actions.SsoUpdateApplicationInstanceDisplayData()
        self.UpdateApplicationInstanceResponseConfiguration = actions.SsoUpdateApplicationInstanceResponseConfiguration()
        self.UpdateApplicationInstanceResponseSchemaConfiguration = actions.SsoUpdateApplicationInstanceResponseSchemaConfiguration()
        self.UpdateApplicationInstanceSecurityConfiguration = actions.SsoUpdateApplicationInstanceSecurityConfiguration()
        self.UpdateApplicationInstanceServiceProviderConfiguration = actions.SsoUpdateApplicationInstanceServiceProviderConfiguration()
        self.UpdateApplicationInstanceStatus = actions.SsoUpdateApplicationInstanceStatus()
        self.UpdateDirectoryAssociation = actions.SsoUpdateDirectoryAssociation()
        self.UpdateProfile = actions.SsoUpdateProfile()
        self.UpdateTrust = actions.SsoUpdateTrust()


class States:
    def __init__(self):
        self.all = IamAction("states",  all=True)
        self.CreateActivity = actions.StatesCreateActivity()
        self.CreateStateMachine = actions.StatesCreateStateMachine()
        self.DeleteActivity = actions.StatesDeleteActivity()
        self.DeleteStateMachine = actions.StatesDeleteStateMachine()
        self.DescribeActivity = actions.StatesDescribeActivity()
        self.DescribeExecution = actions.StatesDescribeExecution()
        self.DescribeStateMachine = actions.StatesDescribeStateMachine()
        self.DescribeStateMachineForExecution = actions.StatesDescribeStateMachineForExecution()
        self.GetActivityTask = actions.StatesGetActivityTask()
        self.GetExecutionHistory = actions.StatesGetExecutionHistory()
        self.ListActivities = actions.StatesListActivities()
        self.ListExecutions = actions.StatesListExecutions()
        self.ListStateMachines = actions.StatesListStateMachines()
        self.SendTaskFailure = actions.StatesSendTaskFailure()
        self.SendTaskHeartbeat = actions.StatesSendTaskHeartbeat()
        self.SendTaskSuccess = actions.StatesSendTaskSuccess()
        self.StartExecution = actions.StatesStartExecution()
        self.StopExecution = actions.StatesStopExecution()
        self.UpdateStateMachine = actions.StatesUpdateStateMachine()


class StorageGateway:
    def __init__(self):
        self.all = IamAction("storagegateway",  all=True)
        self.ActivateGateway = actions.StoragegatewayActivateGateway()
        self.AddCache = actions.StoragegatewayAddCache()
        self.AddTagsToResource = actions.StoragegatewayAddTagsToResource()
        self.AddUploadBuffer = actions.StoragegatewayAddUploadBuffer()
        self.AddWorkingStorage = actions.StoragegatewayAddWorkingStorage()
        self.CancelArchival = actions.StoragegatewayCancelArchival()
        self.CancelRetrieval = actions.StoragegatewayCancelRetrieval()
        self.CreateCachediSCSIVolume = actions.StoragegatewayCreateCachediSCSIVolume()
        self.CreateNFSFileShare = actions.StoragegatewayCreateNFSFileShare()
        self.CreateSnapshot = actions.StoragegatewayCreateSnapshot()
        self.CreateSnapshotFromVolumeRecoveryPoint = actions.StoragegatewayCreateSnapshotFromVolumeRecoveryPoint()
        self.CreateStorediSCSIVolume = actions.StoragegatewayCreateStorediSCSIVolume()
        self.CreateTapeWithBarcode = actions.StoragegatewayCreateTapeWithBarcode()
        self.CreateTapes = actions.StoragegatewayCreateTapes()
        self.DeleteBandwidthRateLimit = actions.StoragegatewayDeleteBandwidthRateLimit()
        self.DeleteChapCredentials = actions.StoragegatewayDeleteChapCredentials()
        self.DeleteFileShare = actions.StoragegatewayDeleteFileShare()
        self.DeleteGateway = actions.StoragegatewayDeleteGateway()
        self.DeleteSnapshotSchedule = actions.StoragegatewayDeleteSnapshotSchedule()
        self.DeleteTape = actions.StoragegatewayDeleteTape()
        self.DeleteTapeArchive = actions.StoragegatewayDeleteTapeArchive()
        self.DeleteVolume = actions.StoragegatewayDeleteVolume()
        self.DescribeBandwidthRateLimit = actions.StoragegatewayDescribeBandwidthRateLimit()
        self.DescribeCache = actions.StoragegatewayDescribeCache()
        self.DescribeCachediSCSIVolumes = actions.StoragegatewayDescribeCachediSCSIVolumes()
        self.DescribeChapCredentials = actions.StoragegatewayDescribeChapCredentials()
        self.DescribeGatewayInformation = actions.StoragegatewayDescribeGatewayInformation()
        self.DescribeMaintenanceStartTime = actions.StoragegatewayDescribeMaintenanceStartTime()
        self.DescribeNFSFileShares = actions.StoragegatewayDescribeNFSFileShares()
        self.DescribeSnapshotSchedule = actions.StoragegatewayDescribeSnapshotSchedule()
        self.DescribeStorediSCSIVolumes = actions.StoragegatewayDescribeStorediSCSIVolumes()
        self.DescribeTapeArchives = actions.StoragegatewayDescribeTapeArchives()
        self.DescribeTapeRecoveryPoints = actions.StoragegatewayDescribeTapeRecoveryPoints()
        self.DescribeTapes = actions.StoragegatewayDescribeTapes()
        self.DescribeUploadBuffer = actions.StoragegatewayDescribeUploadBuffer()
        self.DescribeVTLDevices = actions.StoragegatewayDescribeVTLDevices()
        self.DescribeWorkingStorage = actions.StoragegatewayDescribeWorkingStorage()
        self.DisableGateway = actions.StoragegatewayDisableGateway()
        self.ListFileShares = actions.StoragegatewayListFileShares()
        self.ListGateways = actions.StoragegatewayListGateways()
        self.ListLocalDisks = actions.StoragegatewayListLocalDisks()
        self.ListTagsForResource = actions.StoragegatewayListTagsForResource()
        self.ListTapes = actions.StoragegatewayListTapes()
        self.ListVolumeInitiators = actions.StoragegatewayListVolumeInitiators()
        self.ListVolumeRecoveryPoints = actions.StoragegatewayListVolumeRecoveryPoints()
        self.ListVolumes = actions.StoragegatewayListVolumes()
        self.RefreshCache = actions.StoragegatewayRefreshCache()
        self.RemoveTagsFromResource = actions.StoragegatewayRemoveTagsFromResource()
        self.ResetCache = actions.StoragegatewayResetCache()
        self.RetrieveTapeArchive = actions.StoragegatewayRetrieveTapeArchive()
        self.RetrieveTapeRecoveryPoint = actions.StoragegatewayRetrieveTapeRecoveryPoint()
        self.SetLocalConsolePassword = actions.StoragegatewaySetLocalConsolePassword()
        self.ShutdownGateway = actions.StoragegatewayShutdownGateway()
        self.StartGateway = actions.StoragegatewayStartGateway()
        self.UpdateBandwidthRateLimit = actions.StoragegatewayUpdateBandwidthRateLimit()
        self.UpdateChapCredentials = actions.StoragegatewayUpdateChapCredentials()
        self.UpdateGatewayInformation = actions.StoragegatewayUpdateGatewayInformation()
        self.UpdateGatewaySoftwareNow = actions.StoragegatewayUpdateGatewaySoftwareNow()
        self.UpdateMaintenanceStartTime = actions.StoragegatewayUpdateMaintenanceStartTime()
        self.UpdateNFSFileShare = actions.StoragegatewayUpdateNFSFileShare()
        self.UpdateSnapshotSchedule = actions.StoragegatewayUpdateSnapshotSchedule()
        self.UpdateVTLDeviceType = actions.StoragegatewayUpdateVTLDeviceType()


class Sts:
    def __init__(self):
        self.all = IamAction("sts",  all=True)
        self.AssumeRole = actions.StsAssumeRole()
        self.AssumeRoleWithSAML = actions.StsAssumeRoleWithSAML()
        self.AssumeRoleWithWebIdentity = actions.StsAssumeRoleWithWebIdentity()
        self.DecodeAuthorizationMessage = actions.StsDecodeAuthorizationMessage()
        self.GetCallerIdentity = actions.StsGetCallerIdentity()
        self.GetFederationToken = actions.StsGetFederationToken()
        self.GetSessionToken = actions.StsGetSessionToken()


class Support:
    def __init__(self):
        self.all = IamAction("support",  all=True)
        self.AddAttachmentsToSet = actions.SupportAddAttachmentsToSet()
        self.AddCommunicationToCase = actions.SupportAddCommunicationToCase()
        self.CreateCase = actions.SupportCreateCase()
        self.DescribeAttachment = actions.SupportDescribeAttachment()
        self.DescribeCases = actions.SupportDescribeCases()
        self.DescribeCommunications = actions.SupportDescribeCommunications()
        self.DescribeServices = actions.SupportDescribeServices()
        self.DescribeSeverityLevels = actions.SupportDescribeSeverityLevels()
        self.DescribeTrustedAdvisorCheckRefreshStatuses = actions.SupportDescribeTrustedAdvisorCheckRefreshStatuses()
        self.DescribeTrustedAdvisorCheckResult = actions.SupportDescribeTrustedAdvisorCheckResult()
        self.DescribeTrustedAdvisorCheckSummaries = actions.SupportDescribeTrustedAdvisorCheckSummaries()
        self.DescribeTrustedAdvisorChecks = actions.SupportDescribeTrustedAdvisorChecks()
        self.RefreshTrustedAdvisorCheck = actions.SupportRefreshTrustedAdvisorCheck()
        self.ResolveCase = actions.SupportResolveCase()


class Swf:
    def __init__(self):
        self.all = IamAction("swf",  all=True)
        self.CancelTimer = actions.SwfCancelTimer()
        self.CancelWorkflowExecution = actions.SwfCancelWorkflowExecution()
        self.CompleteWorkflowExecution = actions.SwfCompleteWorkflowExecution()
        self.ContinueAsNewWorkflowExecution = actions.SwfContinueAsNewWorkflowExecution()
        self.CountClosedWorkflowExecutions = actions.SwfCountClosedWorkflowExecutions()
        self.CountOpenWorkflowExecutions = actions.SwfCountOpenWorkflowExecutions()
        self.CountPendingActivityTasks = actions.SwfCountPendingActivityTasks()
        self.CountPendingDecisionTasks = actions.SwfCountPendingDecisionTasks()
        self.DeprecateActivityType = actions.SwfDeprecateActivityType()
        self.DeprecateDomain = actions.SwfDeprecateDomain()
        self.DeprecateWorkflowType = actions.SwfDeprecateWorkflowType()
        self.DescribeActivityType = actions.SwfDescribeActivityType()
        self.DescribeDomain = actions.SwfDescribeDomain()
        self.DescribeWorkflowExecution = actions.SwfDescribeWorkflowExecution()
        self.DescribeWorkflowType = actions.SwfDescribeWorkflowType()
        self.FailWorkflowExecution = actions.SwfFailWorkflowExecution()
        self.GetWorkflowExecutionHistory = actions.SwfGetWorkflowExecutionHistory()
        self.ListActivityTypes = actions.SwfListActivityTypes()
        self.ListClosedWorkflowExecutions = actions.SwfListClosedWorkflowExecutions()
        self.ListDomains = actions.SwfListDomains()
        self.ListOpenWorkflowExecutions = actions.SwfListOpenWorkflowExecutions()
        self.ListWorkflowTypes = actions.SwfListWorkflowTypes()
        self.PollForActivityTask = actions.SwfPollForActivityTask()
        self.PollForDecisionTask = actions.SwfPollForDecisionTask()
        self.RecordActivityTaskHeartbeat = actions.SwfRecordActivityTaskHeartbeat()
        self.RecordMarker = actions.SwfRecordMarker()
        self.RegisterActivityType = actions.SwfRegisterActivityType()
        self.RegisterDomain = actions.SwfRegisterDomain()
        self.RegisterWorkflowType = actions.SwfRegisterWorkflowType()
        self.RequestCancelActivityTask = actions.SwfRequestCancelActivityTask()
        self.RequestCancelExternalWorkflowExecution = actions.SwfRequestCancelExternalWorkflowExecution()
        self.RequestCancelWorkflowExecution = actions.SwfRequestCancelWorkflowExecution()
        self.RespondActivityTaskCanceled = actions.SwfRespondActivityTaskCanceled()
        self.RespondActivityTaskCompleted = actions.SwfRespondActivityTaskCompleted()
        self.RespondActivityTaskFailed = actions.SwfRespondActivityTaskFailed()
        self.RespondDecisionTaskCompleted = actions.SwfRespondDecisionTaskCompleted()
        self.ScheduleActivityTask = actions.SwfScheduleActivityTask()
        self.SignalExternalWorkflowExecution = actions.SwfSignalExternalWorkflowExecution()
        self.SignalWorkflowExecution = actions.SwfSignalWorkflowExecution()
        self.StartChildWorkflowExecution = actions.SwfStartChildWorkflowExecution()
        self.StartTimer = actions.SwfStartTimer()
        self.StartWorkflowExecution = actions.SwfStartWorkflowExecution()
        self.TerminateWorkflowExecution = actions.SwfTerminateWorkflowExecution()


class Tag:
    def __init__(self):
        self.all = IamAction("tag",  all=True)
        self.GetResources = actions.TagGetResources()
        self.GetTagKeys = actions.TagGetTagKeys()
        self.GetTagValues = actions.TagGetTagValues()
        self.TagResources = actions.TagTagResources()
        self.UntagResources = actions.TagUntagResources()


class Transcribe:
    def __init__(self):
        self.all = IamAction("transcribe",  all=True)
        self.GetTranscriptionJob = actions.TranscribeGetTranscriptionJob()
        self.ListTranscriptionJobs = actions.TranscribeListTranscriptionJobs()
        self.StartTranscriptionJob = actions.TranscribeStartTranscriptionJob()


class Translate:
    def __init__(self):
        self.all = IamAction("translate",  all=True)
        self.TranslateText = actions.TranslateTranslateText()


class TrustedAdvisor:
    def __init__(self):
        self.all = IamAction("trustedadvisor",  all=True)
        self.DescribeCheckItems = actions.TrustedadvisorDescribeCheckItems()
        self.DescribeCheckRefreshStatuses = actions.TrustedadvisorDescribeCheckRefreshStatuses()
        self.DescribeCheckSummaries = actions.TrustedadvisorDescribeCheckSummaries()
        self.DescribeNotificationPreferences = actions.TrustedadvisorDescribeNotificationPreferences()
        self.ExcludeCheckItems = actions.TrustedadvisorExcludeCheckItems()
        self.IncludeCheckItems = actions.TrustedadvisorIncludeCheckItems()
        self.RefreshCheck = actions.TrustedadvisorRefreshCheck()
        self.UpdateNotificationPreferences = actions.TrustedadvisorUpdateNotificationPreferences()


class WafRegional:
    def __init__(self):
        self.all = IamAction("waf-regional",  all=True)
        self.AssociateWebACL = actions.WafRegionalAssociateWebACL()
        self.CreateByteMatchSet = actions.WafRegionalCreateByteMatchSet()
        self.CreateGeoMatchSet = actions.WafRegionalCreateGeoMatchSet()
        self.CreateIPSet = actions.WafRegionalCreateIPSet()
        self.CreateRateBasedRule = actions.WafRegionalCreateRateBasedRule()
        self.CreateRegexMatchSet = actions.WafRegionalCreateRegexMatchSet()
        self.CreateRegexPatternSet = actions.WafRegionalCreateRegexPatternSet()
        self.CreateRule = actions.WafRegionalCreateRule()
        self.CreateSizeConstraintSet = actions.WafRegionalCreateSizeConstraintSet()
        self.CreateSqlInjectionMatchSet = actions.WafRegionalCreateSqlInjectionMatchSet()
        self.CreateWebACL = actions.WafRegionalCreateWebACL()
        self.CreateXssMatchSet = actions.WafRegionalCreateXssMatchSet()
        self.DeleteByteMatchSet = actions.WafRegionalDeleteByteMatchSet()
        self.DeleteGeoMatchSet = actions.WafRegionalDeleteGeoMatchSet()
        self.DeleteIPSet = actions.WafRegionalDeleteIPSet()
        self.DeleteRateBasedRule = actions.WafRegionalDeleteRateBasedRule()
        self.DeleteRegexMatchSet = actions.WafRegionalDeleteRegexMatchSet()
        self.DeleteRegexPatternSet = actions.WafRegionalDeleteRegexPatternSet()
        self.DeleteRule = actions.WafRegionalDeleteRule()
        self.DeleteSizeConstraintSet = actions.WafRegionalDeleteSizeConstraintSet()
        self.DeleteSqlInjectionMatchSet = actions.WafRegionalDeleteSqlInjectionMatchSet()
        self.DeleteWebACL = actions.WafRegionalDeleteWebACL()
        self.DeleteXssMatchSet = actions.WafRegionalDeleteXssMatchSet()
        self.DisassociateWebACL = actions.WafRegionalDisassociateWebACL()
        self.GetByteMatchSet = actions.WafRegionalGetByteMatchSet()
        self.GetChangeToken = actions.WafRegionalGetChangeToken()
        self.GetChangeTokenStatus = actions.WafRegionalGetChangeTokenStatus()
        self.GetGeoMatchSet = actions.WafRegionalGetGeoMatchSet()
        self.GetIPSet = actions.WafRegionalGetIPSet()
        self.GetRateBasedRule = actions.WafRegionalGetRateBasedRule()
        self.GetRateBasedRuleManagedKeys = actions.WafRegionalGetRateBasedRuleManagedKeys()
        self.GetRegexMatchSet = actions.WafRegionalGetRegexMatchSet()
        self.GetRegexPatternSet = actions.WafRegionalGetRegexPatternSet()
        self.GetRule = actions.WafRegionalGetRule()
        self.GetSampledRequests = actions.WafRegionalGetSampledRequests()
        self.GetSizeConstraintSet = actions.WafRegionalGetSizeConstraintSet()
        self.GetSqlInjectionMatchSet = actions.WafRegionalGetSqlInjectionMatchSet()
        self.GetWebACL = actions.WafRegionalGetWebACL()
        self.GetWebACLForResource = actions.WafRegionalGetWebACLForResource()
        self.GetXssMatchSet = actions.WafRegionalGetXssMatchSet()
        self.ListByteMatchSets = actions.WafRegionalListByteMatchSets()
        self.ListGeoMatchSets = actions.WafRegionalListGeoMatchSets()
        self.ListIPSets = actions.WafRegionalListIPSets()
        self.ListRateBasedRules = actions.WafRegionalListRateBasedRules()
        self.ListRegexMatchSets = actions.WafRegionalListRegexMatchSets()
        self.ListRegexPatternSets = actions.WafRegionalListRegexPatternSets()
        self.ListResourcesForWebACL = actions.WafRegionalListResourcesForWebACL()
        self.ListRules = actions.WafRegionalListRules()
        self.ListSizeConstraintSets = actions.WafRegionalListSizeConstraintSets()
        self.ListSqlInjectionMatchSets = actions.WafRegionalListSqlInjectionMatchSets()
        self.ListWebACLs = actions.WafRegionalListWebACLs()
        self.ListXssMatchSets = actions.WafRegionalListXssMatchSets()
        self.UpdateByteMatchSet = actions.WafRegionalUpdateByteMatchSet()
        self.UpdateGeoMatchSet = actions.WafRegionalUpdateGeoMatchSet()
        self.UpdateIPSet = actions.WafRegionalUpdateIPSet()
        self.UpdateRateBasedRule = actions.WafRegionalUpdateRateBasedRule()
        self.UpdateRegexMatchSet = actions.WafRegionalUpdateRegexMatchSet()
        self.UpdateRegexPatternSet = actions.WafRegionalUpdateRegexPatternSet()
        self.UpdateRule = actions.WafRegionalUpdateRule()
        self.UpdateSizeConstraintSet = actions.WafRegionalUpdateSizeConstraintSet()
        self.UpdateSqlInjectionMatchSet = actions.WafRegionalUpdateSqlInjectionMatchSet()
        self.UpdateWebACL = actions.WafRegionalUpdateWebACL()
        self.UpdateXssMatchSet = actions.WafRegionalUpdateXssMatchSet()


class Waf:
    def __init__(self):
        self.all = IamAction("waf",  all=True)
        self.CreateByteMatchSet = actions.WafCreateByteMatchSet()
        self.CreateGeoMatchSet = actions.WafCreateGeoMatchSet()
        self.CreateIPSet = actions.WafCreateIPSet()
        self.CreateRateBasedRule = actions.WafCreateRateBasedRule()
        self.CreateRegexMatchSet = actions.WafCreateRegexMatchSet()
        self.CreateRegexPatternSet = actions.WafCreateRegexPatternSet()
        self.CreateRule = actions.WafCreateRule()
        self.CreateSizeConstraintSet = actions.WafCreateSizeConstraintSet()
        self.CreateSqlInjectionMatchSet = actions.WafCreateSqlInjectionMatchSet()
        self.CreateWebACL = actions.WafCreateWebACL()
        self.CreateXssMatchSet = actions.WafCreateXssMatchSet()
        self.DeleteByteMatchSet = actions.WafDeleteByteMatchSet()
        self.DeleteGeoMatchSet = actions.WafDeleteGeoMatchSet()
        self.DeleteIPSet = actions.WafDeleteIPSet()
        self.DeleteRateBasedRule = actions.WafDeleteRateBasedRule()
        self.DeleteRegexMatchSet = actions.WafDeleteRegexMatchSet()
        self.DeleteRegexPatternSet = actions.WafDeleteRegexPatternSet()
        self.DeleteRule = actions.WafDeleteRule()
        self.DeleteSizeConstraintSet = actions.WafDeleteSizeConstraintSet()
        self.DeleteSqlInjectionMatchSet = actions.WafDeleteSqlInjectionMatchSet()
        self.DeleteWebACL = actions.WafDeleteWebACL()
        self.DeleteXssMatchSet = actions.WafDeleteXssMatchSet()
        self.GetByteMatchSet = actions.WafGetByteMatchSet()
        self.GetChangeToken = actions.WafGetChangeToken()
        self.GetChangeTokenStatus = actions.WafGetChangeTokenStatus()
        self.GetGeoMatchSet = actions.WafGetGeoMatchSet()
        self.GetIPSet = actions.WafGetIPSet()
        self.GetRateBasedRule = actions.WafGetRateBasedRule()
        self.GetRateBasedRuleManagedKeys = actions.WafGetRateBasedRuleManagedKeys()
        self.GetRegexMatchSet = actions.WafGetRegexMatchSet()
        self.GetRegexPatternSet = actions.WafGetRegexPatternSet()
        self.GetRule = actions.WafGetRule()
        self.GetSampledRequests = actions.WafGetSampledRequests()
        self.GetSizeConstraintSet = actions.WafGetSizeConstraintSet()
        self.GetSqlInjectionMatchSet = actions.WafGetSqlInjectionMatchSet()
        self.GetWebACL = actions.WafGetWebACL()
        self.GetXssMatchSet = actions.WafGetXssMatchSet()
        self.ListByteMatchSets = actions.WafListByteMatchSets()
        self.ListGeoMatchSets = actions.WafListGeoMatchSets()
        self.ListIPSets = actions.WafListIPSets()
        self.ListRateBasedRules = actions.WafListRateBasedRules()
        self.ListRegexMatchSets = actions.WafListRegexMatchSets()
        self.ListRegexPatternSets = actions.WafListRegexPatternSets()
        self.ListRules = actions.WafListRules()
        self.ListSizeConstraintSets = actions.WafListSizeConstraintSets()
        self.ListSqlInjectionMatchSets = actions.WafListSqlInjectionMatchSets()
        self.ListWebACLs = actions.WafListWebACLs()
        self.ListXssMatchSets = actions.WafListXssMatchSets()
        self.UpdateByteMatchSet = actions.WafUpdateByteMatchSet()
        self.UpdateGeoMatchSet = actions.WafUpdateGeoMatchSet()
        self.UpdateIPSet = actions.WafUpdateIPSet()
        self.UpdateRateBasedRule = actions.WafUpdateRateBasedRule()
        self.UpdateRegexMatchSet = actions.WafUpdateRegexMatchSet()
        self.UpdateRegexPatternSet = actions.WafUpdateRegexPatternSet()
        self.UpdateRule = actions.WafUpdateRule()
        self.UpdateSizeConstraintSet = actions.WafUpdateSizeConstraintSet()
        self.UpdateSqlInjectionMatchSet = actions.WafUpdateSqlInjectionMatchSet()
        self.UpdateWebACL = actions.WafUpdateWebACL()
        self.UpdateXssMatchSet = actions.WafUpdateXssMatchSet()


class Wam:
    def __init__(self):
        self.all = IamAction("wam",  all=True)
        self.AuthenticatePackager = actions.WamAuthenticatePackager()


class WorkDocs:
    def __init__(self):
        self.all = IamAction("workdocs",  all=True)
        self.AbortDocumentVersionUpload = actions.WorkdocsAbortDocumentVersionUpload()
        self.ActivateUser = actions.WorkdocsActivateUser()
        self.AddResourcePermissions = actions.WorkdocsAddResourcePermissions()
        self.AddUserToGroup = actions.WorkdocsAddUserToGroup()
        self.CheckAlias = actions.WorkdocsCheckAlias()
        self.CreateFolder = actions.WorkdocsCreateFolder()
        self.CreateInstance = actions.WorkdocsCreateInstance()
        self.CreateNotificationSubscription = actions.WorkdocsCreateNotificationSubscription()
        self.CreateUser = actions.WorkdocsCreateUser()
        self.DeactivateUser = actions.WorkdocsDeactivateUser()
        self.DeleteDocument = actions.WorkdocsDeleteDocument()
        self.DeleteFolder = actions.WorkdocsDeleteFolder()
        self.DeleteFolderContents = actions.WorkdocsDeleteFolderContents()
        self.DeleteInstance = actions.WorkdocsDeleteInstance()
        self.DeleteNotificationSubscription = actions.WorkdocsDeleteNotificationSubscription()
        self.DeleteUser = actions.WorkdocsDeleteUser()
        self.DeregisterDirectory = actions.WorkdocsDeregisterDirectory()
        self.DescribeAvailableDirectories = actions.WorkdocsDescribeAvailableDirectories()
        self.DescribeDocumentVersions = actions.WorkdocsDescribeDocumentVersions()
        self.DescribeFolderContents = actions.WorkdocsDescribeFolderContents()
        self.DescribeInstances = actions.WorkdocsDescribeInstances()
        self.DescribeNotificationSubscriptions = actions.WorkdocsDescribeNotificationSubscriptions()
        self.DescribeResourcePermissions = actions.WorkdocsDescribeResourcePermissions()
        self.DescribeUsers = actions.WorkdocsDescribeUsers()
        self.GetDocument = actions.WorkdocsGetDocument()
        self.GetDocumentPath = actions.WorkdocsGetDocumentPath()
        self.GetDocumentVersion = actions.WorkdocsGetDocumentVersion()
        self.GetFolder = actions.WorkdocsGetFolder()
        self.GetFolderPath = actions.WorkdocsGetFolderPath()
        self.InitiateDocumentVersionUpload = actions.WorkdocsInitiateDocumentVersionUpload()
        self.RegisterDirectory = actions.WorkdocsRegisterDirectory()
        self.RemoveAllResourcePermissions = actions.WorkdocsRemoveAllResourcePermissions()
        self.RemoveResourcePermission = actions.WorkdocsRemoveResourcePermission()
        self.RemoveUserFromGroup = actions.WorkdocsRemoveUserFromGroup()
        self.UpdateDocument = actions.WorkdocsUpdateDocument()
        self.UpdateDocumentVersion = actions.WorkdocsUpdateDocumentVersion()
        self.UpdateFolder = actions.WorkdocsUpdateFolder()
        self.UpdateInstanceAlias = actions.WorkdocsUpdateInstanceAlias()
        self.UpdateUser = actions.WorkdocsUpdateUser()


class WorkMail:
    def __init__(self):
        self.all = IamAction("workmail",  all=True)
        self.AddMembersToGroup = actions.WorkmailAddMembersToGroup()
        self.CreateGroup = actions.WorkmailCreateGroup()
        self.CreateMailDomain = actions.WorkmailCreateMailDomain()
        self.CreateMailUser = actions.WorkmailCreateMailUser()
        self.CreateOrganization = actions.WorkmailCreateOrganization()
        self.CreateResource = actions.WorkmailCreateResource()
        self.DeleteMailDomain = actions.WorkmailDeleteMailDomain()
        self.DeleteMobileDevice = actions.WorkmailDeleteMobileDevice()
        self.DeleteOrganization = actions.WorkmailDeleteOrganization()
        self.DescribeDirectories = actions.WorkmailDescribeDirectories()
        self.DescribeKmsKeys = actions.WorkmailDescribeKmsKeys()
        self.DescribeMailDomains = actions.WorkmailDescribeMailDomains()
        self.DescribeMailGroups = actions.WorkmailDescribeMailGroups()
        self.DescribeMailUsers = actions.WorkmailDescribeMailUsers()
        self.DescribeOrganizations = actions.WorkmailDescribeOrganizations()
        self.DisableMailGroups = actions.WorkmailDisableMailGroups()
        self.DisableMailUsers = actions.WorkmailDisableMailUsers()
        self.EnableMailDomain = actions.WorkmailEnableMailDomain()
        self.EnableMailGroups = actions.WorkmailEnableMailGroups()
        self.EnableMailUsers = actions.WorkmailEnableMailUsers()
        self.GetMailDomainDetails = actions.WorkmailGetMailDomainDetails()
        self.GetMailGroupDetails = actions.WorkmailGetMailGroupDetails()
        self.GetMailUserDetails = actions.WorkmailGetMailUserDetails()
        self.GetMobileDeviceDetails = actions.WorkmailGetMobileDeviceDetails()
        self.GetMobileDevicesForUser = actions.WorkmailGetMobileDevicesForUser()
        self.GetMobilePolicyDetails = actions.WorkmailGetMobilePolicyDetails()
        self.ListMembersInMailGroup = actions.WorkmailListMembersInMailGroup()
        self.RemoveMembersFromGroup = actions.WorkmailRemoveMembersFromGroup()
        self.ResetUserPassword = actions.WorkmailResetUserPassword()
        self.SearchMembers = actions.WorkmailSearchMembers()
        self.SetAdmin = actions.WorkmailSetAdmin()
        self.SetDefaultMailDomain = actions.WorkmailSetDefaultMailDomain()
        self.SetMailGroupDetails = actions.WorkmailSetMailGroupDetails()
        self.SetMailUserDetails = actions.WorkmailSetMailUserDetails()
        self.SetMobilePolicyDetails = actions.WorkmailSetMobilePolicyDetails()
        self.WipeMobileDevice = actions.WorkmailWipeMobileDevice()


class Workspaces:
    def __init__(self):
        self.all = IamAction("workspaces",  all=True)
        self.CreateTags = actions.WorkspacesCreateTags()
        self.CreateWorkspaces = actions.WorkspacesCreateWorkspaces()
        self.DeleteTags = actions.WorkspacesDeleteTags()
        self.DescribeTags = actions.WorkspacesDescribeTags()
        self.DescribeWorkspaceBundles = actions.WorkspacesDescribeWorkspaceBundles()
        self.DescribeWorkspaceDirectories = actions.WorkspacesDescribeWorkspaceDirectories()
        self.DescribeWorkspaces = actions.WorkspacesDescribeWorkspaces()
        self.DescribeWorkspacesConnectionStatus = actions.WorkspacesDescribeWorkspacesConnectionStatus()
        self.ModifyWorkspaceProperties = actions.WorkspacesModifyWorkspaceProperties()
        self.RebootWorkspaces = actions.WorkspacesRebootWorkspaces()
        self.RebuildWorkspaces = actions.WorkspacesRebuildWorkspaces()
        self.StartWorkspaces = actions.WorkspacesStartWorkspaces()
        self.StopWorkspaces = actions.WorkspacesStopWorkspaces()
        self.TerminateWorkspaces = actions.WorkspacesTerminateWorkspaces()


class Xray:
    def __init__(self):
        self.all = IamAction("xray",  all=True)
        self.BatchGetTraces = actions.XrayBatchGetTraces()
        self.GetServiceGraph = actions.XrayGetServiceGraph()
        self.GetTraceGraph = actions.XrayGetTraceGraph()
        self.GetTraceSummaries = actions.XrayGetTraceSummaries()
        self.PutTelemetryRecords = actions.XrayPutTelemetryRecords()
        self.PutTraceSegments = actions.XrayPutTraceSegments()
